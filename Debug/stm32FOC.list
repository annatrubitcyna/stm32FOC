
stm32FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a67c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8ac  0800a8ac  0000c05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8ac  0800a8ac  0000b8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b4  0800a8b4  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b4  0800a8b4  0000b8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b8  0800a8b8  0000b8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800a8bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  2000005c  0800a918  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800a918  0000c7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5ce  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003561  00000000  00000000  0002965a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  0002cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ab  00000000  00000000  0002e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215c7  00000000  00000000  0002f88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3c2  00000000  00000000  00050e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e00b3  00000000  00000000  0006d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d2c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072a8  00000000  00000000  0014d30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001545b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a83c 	.word	0x0800a83c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	0800a83c 	.word	0x0800a83c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e5e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8000e60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	db0a      	blt.n	8000e84 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8000e6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e72:	f009 fbc5 	bl	800a600 <sqrtf>
 8000e76:	eef0 7a40 	vmov.f32	s15, s0
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8000e80:	2300      	movs	r3, #0
 8000e82:	e005      	b.n	8000e90 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <normalizeAngle>:

HAL_StatusTypeDef status;


float normalizeAngle(float angle)  //[0, 2pi]
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
	float a = fmodf(angle, PI_2);
 8000ea2:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000edc <normalizeAngle+0x44>
 8000ea6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000eaa:	f009 fb89 	bl	800a5c0 <fmodf>
 8000eae:	ed87 0a03 	vstr	s0, [r7, #12]
    return a >= 0 ? a : (a + PI_2);
 8000eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebe:	db02      	blt.n	8000ec6 <normalizeAngle+0x2e>
 8000ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec4:	e005      	b.n	8000ed2 <normalizeAngle+0x3a>
 8000ec6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eca:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000edc <normalizeAngle+0x44>
 8000ece:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40c90fdb 	.word	0x40c90fdb

08000ee0 <normalizeAnglePI>:
float normalizeAnglePI(float angle)  //[-pi, pi]
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0a01 	vstr	s0, [r7, #4]
	float a = fmodf(angle, PI_2);
 8000eea:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8000f68 <normalizeAnglePI+0x88>
 8000eee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ef2:	f009 fb65 	bl	800a5c0 <fmodf>
 8000ef6:	ed87 0a03 	vstr	s0, [r7, #12]
	if( a > M_PI){
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff faf0 	bl	80004e0 <__aeabi_f2d>
 8000f00:	a315      	add	r3, pc, #84	@ (adr r3, 8000f58 <normalizeAnglePI+0x78>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff fdd3 	bl	8000ab0 <__aeabi_dcmpgt>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <normalizeAnglePI+0x40>
		a -= PI_2;
 8000f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f14:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000f68 <normalizeAnglePI+0x88>
 8000f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f1c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if( a < -M_PI){
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff fadd 	bl	80004e0 <__aeabi_f2d>
 8000f26:	a30e      	add	r3, pc, #56	@ (adr r3, 8000f60 <normalizeAnglePI+0x80>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fda2 	bl	8000a74 <__aeabi_dcmplt>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <normalizeAnglePI+0x66>
		a += PI_2;
 8000f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000f68 <normalizeAnglePI+0x88>
 8000f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f42:	edc7 7a03 	vstr	s15, [r7, #12]
	}
    return a;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	ee07 3a90 	vmov	s15, r3
}
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	54442d18 	.word	0x54442d18
 8000f5c:	400921fb 	.word	0x400921fb
 8000f60:	54442d18 	.word	0x54442d18
 8000f64:	c00921fb 	.word	0xc00921fb
 8000f68:	40c90fdb 	.word	0x40c90fdb

08000f6c <saturate>:

float saturate(float a, float amin, float amax)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f76:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f7a:	ed87 1a01 	vstr	s2, [r7, #4]
	if ( a > amax ){
 8000f7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	dd01      	ble.n	8000f94 <saturate+0x28>
		return amax;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	e00b      	b.n	8000fac <saturate+0x40>
	}
	else if (a < amin){
 8000f94:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	d501      	bpl.n	8000faa <saturate+0x3e>
		return amin;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	e000      	b.n	8000fac <saturate+0x40>
	}
	return a;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <f32_to_q31>:
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))

#define q31_to_f32(x) ldexp((int32_t) x, -31)

static inline int f32_to_q31(float input)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
	const float Q31_MAX_F = 0x0.FFFFFFp0F;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <f32_to_q31+0x5c>)
 8000fcc:	60fb      	str	r3, [r7, #12]
	const float Q31_MIN_F = -1.0F;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <f32_to_q31+0x60>)
 8000fd0:	60bb      	str	r3, [r7, #8]
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIN_F), 31));
 8000fd2:	edd7 0a03 	vldr	s1, [r7, #12]
 8000fd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fda:	f009 fb4c 	bl	800a676 <fminf>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
 8000fe2:	eef0 0a67 	vmov.f32	s1, s15
 8000fe6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fea:	f009 fb27 	bl	800a63c <fmaxf>
 8000fee:	eef0 7a40 	vmov.f32	s15, s0
 8000ff2:	201f      	movs	r0, #31
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	f009 fa70 	bl	800a4dc <scalbnf>
 8000ffc:	eef0 7a40 	vmov.f32	s15, s0
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	f009 fb74 	bl	800a6f0 <roundf>
 8001008:	eef0 7a40 	vmov.f32	s15, s0
 800100c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001010:	ee17 3a90 	vmov	r3, s15
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	3f7fffff 	.word	0x3f7fffff
 8001020:	bf800000 	.word	0xbf800000

08001024 <sendByUart>:

////////////////////////////   UART   ////////////////////////////

void sendByUart(struct Motor* m, struct SentData* sentData)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	sentData->refAngle = m->refAngle;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	605a      	str	r2, [r3, #4]
	sentData->angle =  m->mechAngle;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	609a      	str	r2, [r3, #8]
	sentData->refSpeed = m->refSpeed;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	60da      	str	r2, [r3, #12]
	sentData->speed = m->speed;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	611a      	str	r2, [r3, #16]
 	sentData->Id = m->IqRef;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	615a      	str	r2, [r3, #20]
	sentData->Iq = m->Iq;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	619a      	str	r2, [r3, #24]
	sentData->time = m->time;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	61da      	str	r2, [r3, #28]
	sentData->Uq = m->Uq;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	621a      	str	r2, [r3, #32]

	status = HAL_UART_Transmit_DMA(&huart1, (uint8_t*)sentData, sizeof(*sentData));
 8001072:	2228      	movs	r2, #40	@ 0x28
 8001074:	6839      	ldr	r1, [r7, #0]
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <sendByUart+0x68>)
 8001078:	f007 fe54 	bl	8008d24 <HAL_UART_Transmit_DMA>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <sendByUart+0x6c>)
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000390 	.word	0x20000390
 8001090:	20000078 	.word	0x20000078
 8001094:	00000000 	.word	0x00000000

08001098 <changeAngle>:
	}
	m->refSpeed += m->speedSign * 20 * PI_2 / 60;
}

void changeAngle(struct Motor* m)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	m->refAngle += 20 *M_PI/180;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa1a 	bl	80004e0 <__aeabi_f2d>
 80010ac:	a30a      	add	r3, pc, #40	@ (adr r3, 80010d8 <changeAngle+0x40>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff f8b7 	bl	8000224 <__adddf3>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd01 	bl	8000ac4 <__aeabi_d2f>
 80010c2:	4602      	mov	r2, r0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	4ae74487 	.word	0x4ae74487
 80010dc:	3fd65718 	.word	0x3fd65718

080010e0 <cordic_q31_sinf>:


////////////////////////////   CORDIC   ////////////////////////////

float cordic_q31_sinf(float x, CORDIC_HandleTypeDef* hcordic)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ea:	6038      	str	r0, [r7, #0]
	int32_t input_q31 = f32_to_q31(x /(M_PI));    // from -PI to PI
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f9f7 	bl	80004e0 <__aeabi_f2d>
 80010f2:	a327      	add	r3, pc, #156	@ (adr r3, 8001190 <cordic_q31_sinf+0xb0>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fb74 	bl	80007e4 <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fcde 	bl	8000ac4 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	ee00 3a10 	vmov	s0, r3
 800110e:	f7ff ff57 	bl	8000fc0 <f32_to_q31>
 8001112:	6178      	str	r0, [r7, #20]
	int32_t output_q31[2] = {0};
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]

	hcordic->Instance->CSR &= 0xFFFFFFF0; // function cosine
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 020f 	bic.w	r2, r2, #15
 800112c:	601a      	str	r2, [r3, #0]
	hcordic->Instance->WDATA = input_q31;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	605a      	str	r2, [r3, #4]
	hcordic->Instance->WDATA = f32_to_q31(1); // to use 2 arguments in all functions (scale = 1)
 8001136:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800113a:	f7ff ff41 	bl	8000fc0 <f32_to_q31>
 800113e:	4602      	mov	r2, r0
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
	output_q31[0] = hcordic->Instance->RDATA;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	60bb      	str	r3, [r7, #8]
	output_q31[1] = hcordic->Instance->RDATA;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	60fb      	str	r3, [r7, #12]
	float ans = (float)q31_to_f32(output_q31[1]);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9af 	bl	80004bc <__aeabi_i2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	f06f 001e 	mvn.w	r0, #30
 8001166:	ec43 2b10 	vmov	d0, r2, r3
 800116a:	f009 f905 	bl	800a378 <ldexp>
 800116e:	ec53 2b10 	vmov	r2, r3, d0
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fca5 	bl	8000ac4 <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	613b      	str	r3, [r7, #16]
	return ans;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	ee07 3a90 	vmov	s15, r3
}
 8001184:	eeb0 0a67 	vmov.f32	s0, s15
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	54442d18 	.word	0x54442d18
 8001194:	400921fb 	.word	0x400921fb

08001198 <cordic_q31_cos_sinf>:

static inline void cordic_q31_cos_sinf(struct trAngle* x, CORDIC_HandleTypeDef* hcordic)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	int32_t input_q31 = f32_to_q31(normalizeAnglePI(x->an) / M_PI); // [0, 2*PI] -> [-1, 1]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ac:	f7ff fe98 	bl	8000ee0 <normalizeAnglePI>
 80011b0:	ee10 3a10 	vmov	r3, s0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f993 	bl	80004e0 <__aeabi_f2d>
 80011ba:	a331      	add	r3, pc, #196	@ (adr r3, 8001280 <cordic_q31_cos_sinf+0xe8>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fb10 	bl	80007e4 <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc7a 	bl	8000ac4 <__aeabi_d2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	ee00 3a10 	vmov	s0, r3
 80011d6:	f7ff fef3 	bl	8000fc0 <f32_to_q31>
 80011da:	6178      	str	r0, [r7, #20]
	int32_t output_q31[2] = {0};
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]

	hcordic->Instance->CSR &= 0xFFFFFFF0; // function cosine
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 020f 	bic.w	r2, r2, #15
 80011f4:	601a      	str	r2, [r3, #0]
	hcordic->Instance->WDATA = input_q31;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	605a      	str	r2, [r3, #4]
	hcordic->Instance->WDATA = f32_to_q31(1);
 80011fe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001202:	f7ff fedd 	bl	8000fc0 <f32_to_q31>
 8001206:	4602      	mov	r2, r0
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
	output_q31[0] = hcordic->Instance->RDATA;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	60fb      	str	r3, [r7, #12]
	output_q31[1] = hcordic->Instance->RDATA;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
	x->cos = (float)q31_to_f32(output_q31[0]);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f94b 	bl	80004bc <__aeabi_i2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	f06f 001e 	mvn.w	r0, #30
 800122e:	ec43 2b10 	vmov	d0, r2, r3
 8001232:	f009 f8a1 	bl	800a378 <ldexp>
 8001236:	ec53 2b10 	vmov	r2, r3, d0
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fc41 	bl	8000ac4 <__aeabi_d2f>
 8001242:	4602      	mov	r2, r0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	609a      	str	r2, [r3, #8]
	x->sin = (float)q31_to_f32(output_q31[1]);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f936 	bl	80004bc <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	f06f 001e 	mvn.w	r0, #30
 8001258:	ec43 2b10 	vmov	d0, r2, r3
 800125c:	f009 f88c 	bl	800a378 <ldexp>
 8001260:	ec53 2b10 	vmov	r2, r3, d0
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fc2c 	bl	8000ac4 <__aeabi_d2f>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	605a      	str	r2, [r3, #4]
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54442d18 	.word	0x54442d18
 8001284:	400921fb 	.word	0x400921fb

08001288 <cordic_q31_atanf>:

static inline void cordic_q31_atanf(float x, float y, CORDIC_HandleTypeDef* hcordic, struct Motor* m)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001292:	edc7 0a02 	vstr	s1, [r7, #8]
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	float maxMod = 3 * m->Umax; // more than sqrt(2) to made answer less than 1
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80012a0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80012a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	int32_t input_q31[2] = {0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
	input_q31[0] = f32_to_q31(x / maxMod);
 80012b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012c2:	eeb0 0a66 	vmov.f32	s0, s13
 80012c6:	f7ff fe7b 	bl	8000fc0 <f32_to_q31>
 80012ca:	4603      	mov	r3, r0
 80012cc:	61fb      	str	r3, [r7, #28]
	input_q31[1] = f32_to_q31(y / maxMod);
 80012ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012da:	eeb0 0a66 	vmov.f32	s0, s13
 80012de:	f7ff fe6f 	bl	8000fc0 <f32_to_q31>
 80012e2:	4603      	mov	r3, r0
 80012e4:	623b      	str	r3, [r7, #32]
	int32_t output_q31[2] = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

	hcordic->Instance->CSR &= 0xFFFFFFF0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 020f 	bic.w	r2, r2, #15
 80012fe:	601a      	str	r2, [r3, #0]
	hcordic->Instance->CSR |= 0x00000002; // function phase
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0202 	orr.w	r2, r2, #2
 800130e:	601a      	str	r2, [r3, #0]

	hcordic->Instance->WDATA = input_q31[0];
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
	hcordic->Instance->WDATA = input_q31[1];
 8001318:	6a3a      	ldr	r2, [r7, #32]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
	output_q31[0] = hcordic->Instance->RDATA; // from -1 to 1: -PI to PI
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	617b      	str	r3, [r7, #20]
	output_q31[1] = hcordic->Instance->RDATA; // from 0 to 1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]

	m->alpha = normalizeAngle((float)q31_to_f32(output_q31[0]) * M_PI);
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f8c2 	bl	80004bc <__aeabi_i2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	f06f 001e 	mvn.w	r0, #30
 8001340:	ec43 2b10 	vmov	d0, r2, r3
 8001344:	f009 f818 	bl	800a378 <ldexp>
 8001348:	ec53 2b10 	vmov	r2, r3, d0
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fbb8 	bl	8000ac4 <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8c2 	bl	80004e0 <__aeabi_f2d>
 800135c:	a31a      	add	r3, pc, #104	@ (adr r3, 80013c8 <cordic_q31_atanf+0x140>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f915 	bl	8000590 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fba9 	bl	8000ac4 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	ee00 3a10 	vmov	s0, r3
 8001378:	f7ff fd8e 	bl	8000e98 <normalizeAngle>
 800137c:	eef0 7a40 	vmov.f32	s15, s0
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	m->U = (float)q31_to_f32(output_q31[1]) * maxMod;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f897 	bl	80004bc <__aeabi_i2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	f06f 001e 	mvn.w	r0, #30
 8001396:	ec43 2b10 	vmov	d0, r2, r3
 800139a:	f008 ffed 	bl	800a378 <ldexp>
 800139e:	ec53 2b10 	vmov	r2, r3, d0
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fb8d 	bl	8000ac4 <__aeabi_d2f>
 80013aa:	ee07 0a10 	vmov	s14, r0
 80013ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	@ 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	f3af 8000 	nop.w
 80013c8:	54442d18 	.word	0x54442d18
 80013cc:	400921fb 	.word	0x400921fb

080013d0 <getSector>:

////////////////////////////   vector PWM   ////////////////////////////

uint32_t getSector(float alpha)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	ed87 0a01 	vstr	s0, [r7, #4]
	return alpha / PI_1_3;
 80013da:	ed97 7a01 	vldr	s14, [r7, #4]
 80013de:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013fc <getSector+0x2c>
 80013e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ea:	ee17 3a90 	vmov	r3, s15
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	3f860a92 	.word	0x3f860a92

08001400 <getPeriodsABC>:

float* getPeriodsABC(int sector, float t1, float t2, float t3, float T0_1_2)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6178      	str	r0, [r7, #20]
 8001408:	ed87 0a04 	vstr	s0, [r7, #16]
 800140c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001410:	ed87 1a02 	vstr	s2, [r7, #8]
 8001414:	edc7 1a01 	vstr	s3, [r7, #4]
	static float Periods[3] = {0};
	switch( sector )
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d850      	bhi.n	80014c0 <getPeriodsABC+0xc0>
 800141e:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <getPeriodsABC+0x24>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001453 	.word	0x08001453
 800142c:	08001469 	.word	0x08001469
 8001430:	0800147f 	.word	0x0800147f
 8001434:	08001495 	.word	0x08001495
 8001438:	080014ab 	.word	0x080014ab
	{
	    case 0:
	    	Periods[0] = t1;
 800143c:	4a24      	ldr	r2, [pc, #144]	@ (80014d0 <getPeriodsABC+0xd0>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6013      	str	r3, [r2, #0]
	    	Periods[1] = t2;
 8001442:	4a23      	ldr	r2, [pc, #140]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6053      	str	r3, [r2, #4]
	    	Periods[2] = T0_1_2;
 8001448:	4a21      	ldr	r2, [pc, #132]	@ (80014d0 <getPeriodsABC+0xd0>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6093      	str	r3, [r2, #8]
	    	return Periods;
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001450:	e037      	b.n	80014c2 <getPeriodsABC+0xc2>
	    case 1:
			Periods[0] = t3;
 8001452:	4a1f      	ldr	r2, [pc, #124]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	6013      	str	r3, [r2, #0]
			Periods[1] = t1;
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <getPeriodsABC+0xd0>)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	6053      	str	r3, [r2, #4]
			Periods[2] = T0_1_2;
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6093      	str	r3, [r2, #8]
			return Periods;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001466:	e02c      	b.n	80014c2 <getPeriodsABC+0xc2>
	    case 2:
			Periods[0] = T0_1_2;
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <getPeriodsABC+0xd0>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
			Periods[1] = t1;
 800146e:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6053      	str	r3, [r2, #4]
			Periods[2] = t2;
 8001474:	4a16      	ldr	r2, [pc, #88]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6093      	str	r3, [r2, #8]
			return Periods;
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <getPeriodsABC+0xd0>)
 800147c:	e021      	b.n	80014c2 <getPeriodsABC+0xc2>
	    case 3:
			Periods[0] = T0_1_2;
 800147e:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6013      	str	r3, [r2, #0]
			Periods[1] = t3;
 8001484:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	6053      	str	r3, [r2, #4]
			Periods[2] = t1;
 800148a:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <getPeriodsABC+0xd0>)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	6093      	str	r3, [r2, #8]
			return Periods;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001492:	e016      	b.n	80014c2 <getPeriodsABC+0xc2>
	    case 4:
			Periods[0] = t2;
 8001494:	4a0e      	ldr	r2, [pc, #56]	@ (80014d0 <getPeriodsABC+0xd0>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6013      	str	r3, [r2, #0]
			Periods[1] = T0_1_2;
 800149a:	4a0d      	ldr	r2, [pc, #52]	@ (80014d0 <getPeriodsABC+0xd0>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6053      	str	r3, [r2, #4]
			Periods[2] = t1;
 80014a0:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <getPeriodsABC+0xd0>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6093      	str	r3, [r2, #8]
			return Periods;
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <getPeriodsABC+0xd0>)
 80014a8:	e00b      	b.n	80014c2 <getPeriodsABC+0xc2>
	    case 5:
			Periods[0] = t1;
 80014aa:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <getPeriodsABC+0xd0>)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	6013      	str	r3, [r2, #0]
			Periods[1] = T0_1_2;
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <getPeriodsABC+0xd0>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6053      	str	r3, [r2, #4]
			Periods[2] = t3;
 80014b6:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <getPeriodsABC+0xd0>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	6093      	str	r3, [r2, #8]
			return Periods;
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <getPeriodsABC+0xd0>)
 80014be:	e000      	b.n	80014c2 <getPeriodsABC+0xc2>
	}
	return Periods;
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <getPeriodsABC+0xd0>)
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000007c 	.word	0x2000007c

080014d4 <getPeriods>:


float* getPeriods(struct Motor* m)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	ed2d 8b02 	vpush	{d8}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	uint32_t sector = getSector(m->alpha);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	f7ff ff71 	bl	80013d0 <getSector>
 80014ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
	float betta = m->alpha - sector * PI_1_3; // angle inside sector
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80014f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001500:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80015e8 <getPeriods+0x114>
 8001504:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Tb1 = m->U * cordic_q31_sinf( PI_1_3 - betta , m->hcordic);  // or arm_sin_f32
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	ed93 8a16 	vldr	s16, [r3, #88]	@ 0x58
 8001516:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80015e8 <getPeriods+0x114>
 800151a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800151e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001528:	4618      	mov	r0, r3
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	f7ff fdd7 	bl	80010e0 <cordic_q31_sinf>
 8001532:	eef0 7a40 	vmov.f32	s15, s0
 8001536:	ee68 7a27 	vmul.f32	s15, s16, s15
 800153a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float Tb2 = m->U * cordic_q31_sinf( betta, m->hcordic);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	ed93 8a16 	vldr	s16, [r3, #88]	@ 0x58
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800154a:	4618      	mov	r0, r3
 800154c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001550:	f7ff fdc6 	bl	80010e0 <cordic_q31_sinf>
 8001554:	eef0 7a40 	vmov.f32	s15, s0
 8001558:	ee68 7a27 	vmul.f32	s15, s16, s15
 800155c:	edc7 7a08 	vstr	s15, [r7, #32]

	float T0 = 1 - Tb1 - Tb2;
 8001560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001564:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800156c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001574:	edc7 7a07 	vstr	s15, [r7, #28]
	float T0_1_2 = T0 * 0.5;
 8001578:	edd7 7a07 	vldr	s15, [r7, #28]
 800157c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001584:	edc7 7a06 	vstr	s15, [r7, #24]
	float t1 = Tb1 + Tb2 + T0_1_2;
 8001588:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800158c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	ed97 7a06 	vldr	s14, [r7, #24]
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	edc7 7a05 	vstr	s15, [r7, #20]
	float t2 = Tb2 + T0_1_2;
 80015a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80015a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	edc7 7a04 	vstr	s15, [r7, #16]
	float t3 = Tb1 + T0_1_2;
 80015b0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	edc7 7a03 	vstr	s15, [r7, #12]
	float* periods = getPeriodsABC(sector, t1, t2, t3, T0_1_2);
 80015c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c2:	edd7 1a06 	vldr	s3, [r7, #24]
 80015c6:	ed97 1a03 	vldr	s2, [r7, #12]
 80015ca:	edd7 0a04 	vldr	s1, [r7, #16]
 80015ce:	ed97 0a05 	vldr	s0, [r7, #20]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff14 	bl	8001400 <getPeriodsABC>
 80015d8:	60b8      	str	r0, [r7, #8]
	return periods;
 80015da:	68bb      	ldr	r3, [r7, #8]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3730      	adds	r7, #48	@ 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	ecbd 8b02 	vpop	{d8}
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	3f860a92 	.word	0x3f860a92

080015ec <processEncoderData>:

////////////////////////////   encoder   ////////////////////////////

void processEncoderData(struct Motor* m)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	m->data = m->data & 0x3FFF;  // to get only 14 last bits
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	61da      	str	r2, [r3, #28]
	m->mechAngle = normalizeAngle(m->data * encConst);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80016e4 <processEncoderData+0xf8>
 8001610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	f7ff fc3e 	bl	8000e98 <normalizeAngle>
 800161c:	eef0 7a40 	vmov.f32	s15, s0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	m->elAngle.an = normalizeAngle (m->mechAngle * m->zp - m->startAngle); // zero shift + number of pole pairs
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f7ff fc25 	bl	8000e98 <normalizeAngle>
 800164e:	eef0 7a40 	vmov.f32	s15, s0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	cordic_q31_cos_sinf(&(m->elAngle), m->hcordic);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f7ff fd96 	bl	8001198 <cordic_q31_cos_sinf>

	// count turns
	if (m->mechAngle <= PI_1_2){
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001672:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80016e8 <processEncoderData+0xfc>
 8001676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d80f      	bhi.n	80016a0 <processEncoderData+0xb4>
		if (PI_3_2 <= m->pMAngle){
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001686:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80016ec <processEncoderData+0x100>
 800168a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	db1e      	blt.n	80016d2 <processEncoderData+0xe6>
			m->kTurns += 1;  // moved from forth quarter to first
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800169e:	e018      	b.n	80016d2 <processEncoderData+0xe6>
		}
	}
	else if (PI_3_2 <= m->mechAngle){
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016a6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80016ec <processEncoderData+0x100>
 80016aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	db0e      	blt.n	80016d2 <processEncoderData+0xe6>
		if (m->pMAngle <= PI_1_2){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80016e8 <processEncoderData+0xfc>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d804      	bhi.n	80016d2 <processEncoderData+0xe6>
			m->kTurns -= 1;  // moved from first quarter to forth
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	m->pMAngle = m->mechAngle; //to count turns
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	39c90fdb 	.word	0x39c90fdb
 80016e8:	3fc90fdb 	.word	0x3fc90fdb
 80016ec:	4096cbe4 	.word	0x4096cbe4

080016f0 <checkParity>:

uint32_t checkParity(uint16_t data)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
	uint32_t ans = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
	for(int i=0; i<15; i++){
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e00e      	b.n	8001722 <checkParity+0x32>
		uint16_t x = (data >> i) & 0x1;
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	fa42 f303 	asr.w	r3, r2, r3
 800170c:	b29b      	uxth	r3, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	81fb      	strh	r3, [r7, #14]
		ans+= x;
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4413      	add	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
	for(int i=0; i<15; i++){
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3301      	adds	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b0e      	cmp	r3, #14
 8001726:	dded      	ble.n	8001704 <checkParity+0x14>
	}
	if((data >> 15) == (ans & 0x1)){
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	0bdb      	lsrs	r3, r3, #15
 800172c:	b29b      	uxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	429a      	cmp	r2, r3
 8001738:	d101      	bne.n	800173e <checkParity+0x4e>
		return 1;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <checkParity+0x50>
	}
	else{
		return 0;
 800173e:	2300      	movs	r3, #0
	}
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <updateEncData>:

void updateEncData(struct Motor* m)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
	uint16_t address = (uint16_t)(ANGLECOM);
 8001754:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001758:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2110      	movs	r1, #16
 800175e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001762:	f004 fac1 	bl	8005ce8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&address, (uint8_t *)&(m->data), 1, 100);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f103 021c 	add.w	r2, r3, #28
 800176c:	f107 010e 	add.w	r1, r7, #14
 8001770:	2364      	movs	r3, #100	@ 0x64
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <updateEncData+0x5c>)
 8001778:	f005 fb7d 	bl	8006e76 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2110      	movs	r1, #16
 8001780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001784:	f004 fab0 	bl	8005ce8 <HAL_GPIO_WritePin>
	if(checkParity(m->data)){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ffae 	bl	80016f0 <checkParity>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <updateEncData+0x54>
		processEncoderData(m);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff26 	bl	80015ec <processEncoderData>
	}
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000248 	.word	0x20000248

080017ac <angleController>:
    float speedN =( e - k1 * m->speed - k2 * m->dSpeed / m->speedFrequency + m->refSpeed * m->speedFrequency * k3)/(1 + k3 * m->speedFrequency ) ;
    m->refSpeed = saturate (speedN, -m->speedMax, m->speedMax);
}

void angleController(struct Motor* m)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	ed2d 8b02 	vpush	{d8}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	//idling 5.97, 0, 30
    float Kp = 2.97;
 80017b8:	4b3b      	ldr	r3, [pc, #236]	@ (80018a8 <angleController+0xfc>)
 80017ba:	61fb      	str	r3, [r7, #28]
    float Ki = 0.01;
 80017bc:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <angleController+0x100>)
 80017be:	61bb      	str	r3, [r7, #24]
    float Kd = 1450;
 80017c0:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <angleController+0x104>)
 80017c2:	617b      	str	r3, [r7, #20]
    float e =  normalizeAnglePI(m->refAngle - m->mechAngle);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	ed93 7a22 	vldr	s14, [r3, #136]	@ 0x88
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	eeb0 0a67 	vmov.f32	s0, s15
 80017d8:	f7ff fb82 	bl	8000ee0 <normalizeAnglePI>
 80017dc:	ed87 0a04 	vstr	s0, [r7, #16]
    m->eIAngle += e;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 80017e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
    m->prevMAngle = m->mechAngle;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	635a      	str	r2, [r3, #52]	@ 0x34
    float speedN = Kp * e + Ki * m->eIAngle - Kd * normalizeAngle(m->mechAngle - m->prevMAngle - m->kTurns * PI_2)  * m->speedFrequency;
 80017fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001800:	edd7 7a04 	vldr	s15, [r7, #16]
 8001804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 800180e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001816:	ee37 8a27 	vadd.f32	s16, s14, s15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001836:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80018b4 <angleController+0x108>
 800183a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800183e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	f7ff fb27 	bl	8000e98 <normalizeAngle>
 800184a:	eeb0 7a40 	vmov.f32	s14, s0
 800184e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001868:	ee78 7a67 	vsub.f32	s15, s16, s15
 800186c:	edc7 7a03 	vstr	s15, [r7, #12]
    m->refSpeed = saturate (speedN, -m->speedMax, m->speedMax);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001876:	eef1 7a67 	vneg.f32	s15, s15
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001880:	eeb0 1a47 	vmov.f32	s2, s14
 8001884:	eef0 0a67 	vmov.f32	s1, s15
 8001888:	ed97 0a03 	vldr	s0, [r7, #12]
 800188c:	f7ff fb6e 	bl	8000f6c <saturate>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	ecbd 8b02 	vpop	{d8}
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	403e147b 	.word	0x403e147b
 80018ac:	3c23d70a 	.word	0x3c23d70a
 80018b0:	44b54000 	.word	0x44b54000
 80018b4:	40c90fdb 	.word	0x40c90fdb

080018b8 <observer>:

////////////////////////////   speed   ////////////////////////////

float observer(struct Motor* m)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	struct Observer* o = &(m->obs);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	33b4      	adds	r3, #180	@ 0xb4
 80018c4:	60fb      	str	r3, [r7, #12]
	o->x1_hat = (o->x2_hat - o->l1*(o->y_hat - (m->mechAngle + m->kTurns * PI_2))) / m->speedFrequency + o->x1_hat;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	ed93 6a00 	vldr	s12, [r3]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80019ac <observer+0xf4>
 80018ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80018f2:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80018f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	edd3 7a01 	vldr	s15, [r3, #4]
 800191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	edc3 7a01 	vstr	s15, [r3, #4]
	m->dSpeed = (m->Iq - o->l2*(o->y_hat - (m->mechAngle + m->kTurns * PI_2))) / m->speedFrequency;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	ed93 6a00 	vldr	s12, [r3]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001948:	ed9f 5a18 	vldr	s10, [pc, #96]	@ 80019ac <observer+0xf4>
 800194c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8001950:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001954:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
	o->x2_hat =  m->dSpeed + o->x2_hat;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	ed93 7a25 	vldr	s14, [r3, #148]	@ 0x94
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	edd3 7a02 	vldr	s15, [r3, #8]
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	edc3 7a02 	vstr	s15, [r3, #8]
	o->y_hat = o->x1_hat;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	601a      	str	r2, [r3, #0]
	return o->x2_hat;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	ee07 3a90 	vmov	s15, r3
}
 800199e:	eeb0 0a67 	vmov.f32	s0, s15
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40c90fdb 	.word	0x40c90fdb

080019b0 <countSpeed>:

void countSpeed(struct Motor* m)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	m->time+= (float)DWT->CYCCNT / SystemCoreClock;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <countSpeed+0x80>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <countSpeed+0x84>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	if(!m->flagSpeed) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d111      	bne.n	8001a12 <countSpeed+0x62>
		m->speedFrequency = SystemCoreClock / DWT->CYCCNT;
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <countSpeed+0x84>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <countSpeed+0x80>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
		m->speed = observer(m);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff59 	bl	80018b8 <observer>
 8001a06:	eef0 7a40 	vmov.f32	s15, s0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 8001a10:	e007      	b.n	8001a22 <countSpeed+0x72>
	}
	else {
		m->speed = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
		m->flagSpeed = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	}
	DWT->CYCCNT = 0U;
 8001a22:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <countSpeed+0x80>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	e0001000 	.word	0xe0001000
 8001a34:	20000000 	.word	0x20000000

08001a38 <speedController>:

void speedController(struct Motor* m)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    float e = m->refSpeed - m->speed;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a50:	edc7 7a03 	vstr	s15, [r7, #12]
    m->eISpeed += e;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 8001a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
    float In = m->sC.Kp * e + m->sC.Ki * m->eISpeed - m->sC.Kd * m->dSpeed / m->speedFrequency;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 6a2b 	vldr	s13, [r3, #172]	@ 0xac
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8001a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	edd3 6a2c 	vldr	s13, [r3, #176]	@ 0xb0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001a96:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab0:	edc7 7a02 	vstr	s15, [r7, #8]
    m->IqRef = saturate (In, -m->Imax, m->Imax);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001aba:	eef1 7a67 	vneg.f32	s15, s15
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001ac4:	eeb0 1a47 	vmov.f32	s2, s14
 8001ac8:	eef0 0a67 	vmov.f32	s1, s15
 8001acc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ad0:	f7ff fa4c 	bl	8000f6c <saturate>
 8001ad4:	eef0 7a40 	vmov.f32	s15, s0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <med>:

////////////////////////////   current   ////////////////////////////

float med(float x[3], float I)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	ed87 0a00 	vstr	s0, [r7]
	for (int i =0 ; i < 2 ; i++){
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e00d      	b.n	8001b14 <med+0x2e>
		x[i] =x[i+1];
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	441a      	add	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	440b      	add	r3, r1
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
	for (int i =0 ; i < 2 ; i++){
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	ddee      	ble.n	8001af8 <med+0x12>
	}
	x[2] = I;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
	if(x[0] < x[2]){
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	d521      	bpl.n	8001b7e <med+0x98>
		if (x[1] < x[0]){
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	ed93 7a00 	vldr	s14, [r3]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d502      	bpl.n	8001b58 <med+0x72>
			return x[0];
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	e033      	b.n	8001bc0 <med+0xda>
		}
		else if (x[1]> x[2]){
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	ed93 7a00 	vldr	s14, [r3]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3308      	adds	r3, #8
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	dd02      	ble.n	8001b78 <med+0x92>
			return x[2];
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	e023      	b.n	8001bc0 <med+0xda>
		}
		else{
			return x[1];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	e020      	b.n	8001bc0 <med+0xda>
		}
	}
	else{
		if (x[1] < x[2]){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3304      	adds	r3, #4
 8001b82:	ed93 7a00 	vldr	s14, [r3]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3308      	adds	r3, #8
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d502      	bpl.n	8001b9e <med+0xb8>
			return x[2];
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	e010      	b.n	8001bc0 <med+0xda>
		}
		else if (x[1]> x[0]){
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	ed93 7a00 	vldr	s14, [r3]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	dd02      	ble.n	8001bbc <med+0xd6>
			return x[0];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	e001      	b.n	8001bc0 <med+0xda>
		}
		else{
			return x[1];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
		}
	}
}
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <cur_filter>:
    }
    return arr[median] ;
}

float cur_filter(struct Motor* m, int i, float I)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	ed87 0a01 	vstr	s0, [r7, #4]
	struct Filter* f = &(m->filter);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	33d4      	adds	r3, #212	@ 0xd4
 8001be4:	617b      	str	r3, [r7, #20]
	f->x_med[i] = med(f->x[i], I);
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff74 	bl	8001ae6 <med>
 8001bfe:	eef0 7a40 	vmov.f32	s15, s0
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	330c      	adds	r3, #12
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	edc3 7a00 	vstr	s15, [r3]

	float dx = f->x_med[i] - f->x_hat[i];
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	330c      	adds	r3, #12
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	3312      	adds	r3, #18
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c32:	edc7 7a04 	vstr	s15, [r7, #16]
	if (fabs(dx) > f->dx_max){
 8001c36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c3a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	dd19      	ble.n	8001c82 <cur_filter+0xb0>
		f->x_hat[i] += dx * f->k_max ;
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3312      	adds	r3, #18
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3304      	adds	r3, #4
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001c64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3312      	adds	r3, #18
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
 8001c80:	e018      	b.n	8001cb4 <cur_filter+0xe2>
	}
	else{
		f->x_hat[i] += dx * f->k;
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	3312      	adds	r3, #18
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001c98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3312      	adds	r3, #18
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3304      	adds	r3, #4
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
	}
	return f->x_hat[i];
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3312      	adds	r3, #18
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	ee07 3a90 	vmov	s15, r3
}
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <getCurrents>:

void getCurrents(struct Motor* m)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	m->IA = (m->adcData[0] - 2048) * curSenseConst + 0.1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	8c1b      	ldrh	r3, [r3, #32]
 8001cdc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001d98 <getCurrents+0xc8>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	ee17 0a90 	vmov	r0, s15
 8001cf4:	f7fe fbf4 	bl	80004e0 <__aeabi_f2d>
 8001cf8:	a325      	add	r3, pc, #148	@ (adr r3, 8001d90 <getCurrents+0xc0>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fa91 	bl	8000224 <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe fedb 	bl	8000ac4 <__aeabi_d2f>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	679a      	str	r2, [r3, #120]	@ 0x78
	m->IA = cur_filter(m, 0, m->IA);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	2100      	movs	r1, #0
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff56 	bl	8001bd2 <cur_filter>
 8001d26:	eef0 7a40 	vmov.f32	s15, s0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
	m->IB = -(m->adcData[1] - 2048) * curSenseConst - 0.1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001d34:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d98 <getCurrents+0xc8>
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	ee17 0a90 	vmov	r0, s15
 8001d4c:	f7fe fbc8 	bl	80004e0 <__aeabi_f2d>
 8001d50:	a30f      	add	r3, pc, #60	@ (adr r3, 8001d90 <getCurrents+0xc0>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fa63 	bl	8000220 <__aeabi_dsub>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe feaf 	bl	8000ac4 <__aeabi_d2f>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	67da      	str	r2, [r3, #124]	@ 0x7c
	m->IB = cur_filter(m, 1, m->IB);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8001d72:	eeb0 0a67 	vmov.f32	s0, s15
 8001d76:	2101      	movs	r1, #1
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff2a 	bl	8001bd2 <cur_filter>
 8001d7e:	eef0 7a40 	vmov.f32	s15, s0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	9999999a 	.word	0x9999999a
 8001d94:	3fb99999 	.word	0x3fb99999
 8001d98:	3ad33333 	.word	0x3ad33333

08001d9c <countCurrents>:

void countCurrents(struct Motor* m)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	float Ialpha = m->IA;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001da8:	60fb      	str	r3, [r7, #12]
	float Ibetta = D_SQRT3 * m->IA + D2_SQRT3 * m->IB;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8001db0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001e28 <countCurrents+0x8c>
 8001db4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8001dbe:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001e2c <countCurrents+0x90>
 8001dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	edc7 7a02 	vstr	s15, [r7, #8]

	m->Id = Ibetta * m->elAngle.sin + Ialpha * m->elAngle.cos;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001de2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	m->Iq = Ibetta * m->elAngle.cos - Ialpha * m->elAngle.sin;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001dfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	3f13cd3a 	.word	0x3f13cd3a
 8001e2c:	3f93cd3a 	.word	0x3f93cd3a

08001e30 <currentController>:

void currentController(struct Motor* m)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	// idling Kpd = 0.6, Kid = 0.00001, Kpq = 0.5, Kiq = 0
	// with weight 2 Kpq = 0.7, Kiq = 0.0005
	float Kpd = 0.6;
 8001e38:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <currentController+0x108>)
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
	float Kid = 0.00001;
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f3c <currentController+0x10c>)
 8001e3e:	623b      	str	r3, [r7, #32]
	float Kpq = 0.7;   // L/Tt = 0.0138/0.005 = 2.76
 8001e40:	4b3f      	ldr	r3, [pc, #252]	@ (8001f40 <currentController+0x110>)
 8001e42:	61fb      	str	r3, [r7, #28]
	float Kiq = 0.0005; // R/Tt = 9.9/0.005 = 1980
 8001e44:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <currentController+0x114>)
 8001e46:	61bb      	str	r3, [r7, #24]

	float eq = m->IqRef - m->Iq;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8001e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e58:	edc7 7a05 	vstr	s15, [r7, #20]
	float ed = m->IdRef - m->Id;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8001e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6c:	edc7 7a04 	vstr	s15, [r7, #16]

	m->eIq += eq;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 8001e76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
	m->eId += ed;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8001e8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
    float Unq = Kpq * eq + Kiq * m->eIq;
 8001e98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	edd3 6a28 	vldr	s13, [r3, #160]	@ 0xa0
 8001eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	edc7 7a03 	vstr	s15, [r7, #12]
    float Und = Kpd * ed + Kid * m->eId;
 8001eba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ebe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 6a29 	vldr	s13, [r3, #164]	@ 0xa4
 8001ecc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed8:	edc7 7a02 	vstr	s15, [r7, #8]
    m->Uq = saturate (Unq, -m->Umax, m->Umax);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001ee2:	eef1 7a67 	vneg.f32	s15, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001eec:	eeb0 1a47 	vmov.f32	s2, s14
 8001ef0:	eef0 0a67 	vmov.f32	s1, s15
 8001ef4:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ef8:	f7ff f838 	bl	8000f6c <saturate>
 8001efc:	eef0 7a40 	vmov.f32	s15, s0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
    m->Ud = saturate (Und, -m->Umax, m->Umax);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001f0c:	eef1 7a67 	vneg.f32	s15, s15
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001f16:	eeb0 1a47 	vmov.f32	s2, s14
 8001f1a:	eef0 0a67 	vmov.f32	s1, s15
 8001f1e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f22:	f7ff f823 	bl	8000f6c <saturate>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	3f19999a 	.word	0x3f19999a
 8001f3c:	3727c5ac 	.word	0x3727c5ac
 8001f40:	3f333333 	.word	0x3f333333
 8001f44:	3a03126f 	.word	0x3a03126f

08001f48 <invCoordsTransform>:
}

////////////////////////////   invCoordsTransform   ////////////////////////////

void invCoordsTransform(struct Motor* m)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	float Ualpha = m->Ud * m->elAngle.cos - m->Uq * m->elAngle.sin;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f74:	edc7 7a03 	vstr	s15, [r7, #12]
	float Ubetta = m->Ud * m->elAngle.sin + m->Uq * m->elAngle.cos;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	edc7 7a02 	vstr	s15, [r7, #8]
	cordic_q31_atanf(Ualpha, Ubetta, m->hcordic, m);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	edd7 0a02 	vldr	s1, [r7, #8]
 8001fae:	ed97 0a03 	vldr	s0, [r7, #12]
 8001fb2:	f7ff f969 	bl	8001288 <cordic_q31_atanf>
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <setPeriods>:

void setPeriods(struct Motor* m)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	float* periods = getPeriods(m);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fa83 	bl	80014d4 <getPeriods>
 8001fce:	60f8      	str	r0, [r7, #12]
	TIM1->CCR2 = TIM1->ARR * periods[0];
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <setPeriods+0x84>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <setPeriods+0x84>)
 8001fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fec:	ee17 2a90 	vmov	r2, s15
 8001ff0:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR3 = TIM1->ARR * periods[1];
 8001ff2:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <setPeriods+0x84>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3304      	adds	r3, #4
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200a:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <setPeriods+0x84>)
 800200c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002010:	ee17 2a90 	vmov	r2, s15
 8002014:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM1->CCR4 = TIM1->ARR * periods[2];
 8002016:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <setPeriods+0x84>)
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3308      	adds	r3, #8
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <setPeriods+0x84>)
 8002030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002034:	ee17 2a90 	vmov	r2, s15
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40012c00 	.word	0x40012c00

08002048 <InitEncoder>:

////////////////////////////   initialization   ////////////////////////////

void InitEncoder(struct Motor* m){
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	m->U = m->Umax;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	659a      	str	r2, [r3, #88]	@ 0x58
	m->alpha = 0;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	65da      	str	r2, [r3, #92]	@ 0x5c
	setPeriods(m);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffad 	bl	8001fc0 <setPeriods>
	HAL_Delay(1000);
 8002066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800206a:	f001 fad3 	bl	8003614 <HAL_Delay>
	updateEncData(m); //sent request to read data
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fb6c 	bl	800174c <updateEncData>
	updateEncData(m); //read data
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fb69 	bl	800174c <updateEncData>
	m->startAngle = m->elAngle.an;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <InitCordic>:
void InitCordic(CORDIC_HandleTypeDef* hcordic){
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	//xxxx xxxx x001 1000(no int) xxxx x000 0110 (6cicles) 0000 cosine(0001 -sine, 0010 - phase)
	hcordic->Instance->CSR |= 0x00180060 ; //0000 0000 0001 1000 0000 0000 0110 0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80020a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020a6:	6013      	str	r3, [r2, #0]
	hcordic->Instance->CSR &= 0xFFF9F860 ; //1111 1111 1001 1000 1111 1000 0110 0000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <InitCordic+0x38>)
 80020b4:	400b      	ands	r3, r1
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	fff9f860 	.word	0xfff9f860

080020c8 <InitFilter>:
void InitFilter(struct Filter* f){
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	for(int i =0; i<4; i++){
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e028      	b.n	8002128 <InitFilter+0x60>
		f->x_med[i] = 0;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	330c      	adds	r3, #12
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
		f->x_hat[i] = 0;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3312      	adds	r3, #18
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
		for(int j =0; j<3 ; j++){
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	e00e      	b.n	800211c <InitFilter+0x54>
			f->x[i][j] = 0;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
		for(int j =0; j<3 ; j++){
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b02      	cmp	r3, #2
 8002120:	dded      	ble.n	80020fe <InitFilter+0x36>
	for(int i =0; i<4; i++){
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3301      	adds	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b03      	cmp	r3, #3
 800212c:	ddd3      	ble.n	80020d6 <InitFilter+0xe>
		}
	}
	f->k = 0.1; //if more new value has bigger part
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <InitFilter+0x88>)
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40
	f->dx_max = 0.5; // if current change for that value k change to k_max
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800213a:	645a      	str	r2, [r3, #68]	@ 0x44
	f->k_max = 0.9;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <InitFilter+0x8c>)
 8002140:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	3dcccccd 	.word	0x3dcccccd
 8002154:	3f666666 	.word	0x3f666666

08002158 <InitObserver>:
void InitObserver(struct Observer* o){
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	o->y_hat = 0;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
	o->x1_hat = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
	o->x2_hat = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
	o->q1 = 0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
	o->q2 = 10;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a17      	ldr	r2, [pc, #92]	@ (80021e0 <InitObserver+0x88>)
 8002184:	619a      	str	r2, [r3, #24]
	o->r = 0.001;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <InitObserver+0x8c>)
 800218a:	61da      	str	r2, [r3, #28]
	arm_sqrt_f32 (o->q2 / o->r , &(o->l2));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	edd3 7a07 	vldr	s15, [r3, #28]
 8002198:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3310      	adds	r3, #16
 80021a0:	4618      	mov	r0, r3
 80021a2:	eeb0 0a66 	vmov.f32	s0, s13
 80021a6:	f7fe fe55 	bl	8000e54 <arm_sqrt_f32>
	arm_sqrt_f32 (2 * o->l2 + o->q1 / o->r , &(o->l1));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80021b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	ed93 6a05 	vldr	s12, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	edd3 6a07 	vldr	s13, [r3, #28]
 80021c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80021c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	330c      	adds	r3, #12
 80021cc:	4618      	mov	r0, r3
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	f7fe fe3f 	bl	8000e54 <arm_sqrt_f32>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	41200000 	.word	0x41200000
 80021e4:	3a83126f 	.word	0x3a83126f

080021e8 <DWT_Init>:

__STATIC_INLINE void DWT_Init(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <DWT_Init+0x28>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <DWT_Init+0x28>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <DWT_Init+0x2c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a05      	ldr	r2, [pc, #20]	@ (8002214 <DWT_Init+0x2c>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000edf0 	.word	0xe000edf0
 8002214:	e0001000 	.word	0xe0001000

08002218 <InitMotor>:
void InitMotor(struct Motor* m,CORDIC_HandleTypeDef* hcordic){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
	m->zp = 14;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	220e      	movs	r2, #14
 8002226:	601a      	str	r2, [r3, #0]
	m->R = 9.9;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <InitMotor+0xd8>)
 800222c:	605a      	str	r2, [r3, #4]
	m->startAngle = 0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
	m->isEncInit = 0;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
	m->data = 0;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
	m->startRefSpeed = -100 * PI_2 / 60;   // rpm -> rad/sec
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2b      	ldr	r2, [pc, #172]	@ (80022f4 <InitMotor+0xdc>)
 8002246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	m->refSpeed = 0 ;                      // rad/sec
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	m->refAngle = 1 * M_PI / 180;          //radians
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <InitMotor+0xe0>)
 8002258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	m->Umax = 1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002262:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->Imax = 4;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800226a:	651a      	str	r2, [r3, #80]	@ 0x50
	m->speedMax = 200 * PI_2 / 60;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a23      	ldr	r2, [pc, #140]	@ (80022fc <InitMotor+0xe4>)
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
	m->IdRef = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	66da      	str	r2, [r3, #108]	@ 0x6c
	m->hcordic = hcordic;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	m->speedPerCounter = 0; //for first loop
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	m->speedFrequency = 100; //frequency = 20000/ 200
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2264      	movs	r2, #100	@ 0x64
 800228e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
	m->flagSpeed = 1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	//idling - Kp = 0.6, Ki = 0.005, Kd = 500.
	//with weight1 - 2.2, 0.0, 1600 *3
	//with weight2 - 0.9, 0.0005, 1970
    m->sC.Kp = 0.9;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <InitMotor+0xe8>)
 800229e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    m->sC.Ki = 0.0005;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <InitMotor+0xec>)
 80022a6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    m->sC.Kd = 19700;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a16      	ldr	r2, [pc, #88]	@ (8002308 <InitMotor+0xf0>)
 80022ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	InitCordic(hcordic);
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	f7ff feea 	bl	800208c <InitCordic>
	InitFilter(&(m->filter));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	33d4      	adds	r3, #212	@ 0xd4
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff03 	bl	80020c8 <InitFilter>
	InitObserver(&(m->obs));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	33b4      	adds	r3, #180	@ 0xb4
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff46 	bl	8002158 <InitObserver>
	InitEncoder(m);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff febb 	bl	8002048 <InitEncoder>
	DWT_Init();
 80022d2:	f7ff ff89 	bl	80021e8 <DWT_Init>
	m->time = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	649a      	str	r2, [r3, #72]	@ 0x48
	m->speedSign = 1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	411e6666 	.word	0x411e6666
 80022f4:	c1278d36 	.word	0xc1278d36
 80022f8:	3c8efa35 	.word	0x3c8efa35
 80022fc:	41a78d36 	.word	0x41a78d36
 8002300:	3f666666 	.word	0x3f666666
 8002304:	3a03126f 	.word	0x3a03126f
 8002308:	4699e800 	.word	0x4699e800

0800230c <mainLoop>:

void mainLoop(struct Motor* m)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	updateEncData(m);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff fa19 	bl	800174c <updateEncData>
	getCurrents(m);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fcd8 	bl	8001cd0 <getCurrents>
	countCurrents(m);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fd3b 	bl	8001d9c <countCurrents>
	currentController(m);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fd82 	bl	8001e30 <currentController>
	if(m->speedPerCounter > 20){
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8002332:	2b14      	cmp	r3, #20
 8002334:	d90d      	bls.n	8002352 <mainLoop+0x46>
		countSpeed(m);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fb3a 	bl	80019b0 <countSpeed>
		speedController(m);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fb7b 	bl	8001a38 <speedController>
		angleController(m);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fa32 	bl	80017ac <angleController>
		m->speedPerCounter = 0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 8002350:	e006      	b.n	8002360 <mainLoop+0x54>
	}
	else{
		m->speedPerCounter +=1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	}
	invCoordsTransform(m);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fdf1 	bl	8001f48 <invCoordsTransform>
	setPeriods(m);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fe2a 	bl	8001fc0 <setPeriods>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0c      	blt.n	80023a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	@ (80023ac <__NVIC_ClearPendingIRQ+0x38>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	3360      	adds	r3, #96	@ 0x60
 800239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b4:	f001 f8bd 	bl	8003532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b8:	f000 f890 	bl	80024dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f000 fbf8 	bl	8002bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c0:	f000 fbbc 	bl	8002b3c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80023c4:	f000 fb6e 	bl	8002aa4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80023c8:	f000 fa04 	bl	80027d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80023cc:	f000 face 	bl	800296c <MX_TIM2_Init>
  MX_ADC1_Init();
 80023d0:	f000 f8d0 	bl	8002574 <MX_ADC1_Init>
  MX_ADC2_Init();
 80023d4:	f000 f946 	bl	8002664 <MX_ADC2_Init>
  MX_TIM3_Init();
 80023d8:	f000 fb14 	bl	8002a04 <MX_TIM3_Init>
  MX_CORDIC_Init();
 80023dc:	f000 f9a8 	bl	8002730 <MX_CORDIC_Init>
  MX_SPI1_Init();
 80023e0:	f000 f9ba 	bl	8002758 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  sentData.header = *(int32_t*)"XXXX";
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <main+0xe8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b2c      	ldr	r3, [pc, #176]	@ (800249c <main+0xec>)
 80023ec:	601a      	str	r2, [r3, #0]
  sentData.terminator = *(int32_t*)"EEEE";
 80023ee:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <main+0xf0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b29      	ldr	r3, [pc, #164]	@ (800249c <main+0xec>)
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023fe:	4829      	ldr	r0, [pc, #164]	@ (80024a4 <main+0xf4>)
 8002400:	f003 fc72 	bl	8005ce8 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 8002404:	4828      	ldr	r0, [pc, #160]	@ (80024a8 <main+0xf8>)
 8002406:	f005 f915 	bl	8007634 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800240a:	2104      	movs	r1, #4
 800240c:	4827      	ldr	r0, [pc, #156]	@ (80024ac <main+0xfc>)
 800240e:	f005 fa0b 	bl	8007828 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002412:	2108      	movs	r1, #8
 8002414:	4825      	ldr	r0, [pc, #148]	@ (80024ac <main+0xfc>)
 8002416:	f005 fa07 	bl	8007828 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800241a:	210c      	movs	r1, #12
 800241c:	4823      	ldr	r0, [pc, #140]	@ (80024ac <main+0xfc>)
 800241e:	f005 fa03 	bl	8007828 <HAL_TIM_PWM_Start>

  st = HAL_ADC_Start_DMA(&hadc1, (uint32_t *)(m.adcData), 1);
 8002422:	2201      	movs	r2, #1
 8002424:	4922      	ldr	r1, [pc, #136]	@ (80024b0 <main+0x100>)
 8002426:	4823      	ldr	r0, [pc, #140]	@ (80024b4 <main+0x104>)
 8002428:	f001 fcda 	bl	8003de0 <HAL_ADC_Start_DMA>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <main+0x108>)
 8002432:	701a      	strb	r2, [r3, #0]
  st = HAL_ADC_Start_DMA(&hadc2, (uint32_t *)(m.adcData+1), 1);
 8002434:	4b21      	ldr	r3, [pc, #132]	@ (80024bc <main+0x10c>)
 8002436:	2201      	movs	r2, #1
 8002438:	4619      	mov	r1, r3
 800243a:	4821      	ldr	r0, [pc, #132]	@ (80024c0 <main+0x110>)
 800243c:	f001 fcd0 	bl	8003de0 <HAL_ADC_Start_DMA>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <main+0x108>)
 8002446:	701a      	strb	r2, [r3, #0]
  InitMotor(&m, &hcordic);
 8002448:	491e      	ldr	r1, [pc, #120]	@ (80024c4 <main+0x114>)
 800244a:	481f      	ldr	r0, [pc, #124]	@ (80024c8 <main+0x118>)
 800244c:	f7ff fee4 	bl	8002218 <InitMotor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(FLAG){
 8002450:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <main+0x11c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <main+0xb4>
		mainLoop(&m);
 8002458:	481b      	ldr	r0, [pc, #108]	@ (80024c8 <main+0x118>)
 800245a:	f7ff ff57 	bl	800230c <mainLoop>
		FLAG = 0;
 800245e:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <main+0x11c>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
	}
	if(UART_FLAG){
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <main+0x120>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <main+0xca>
		sendByUart(&m, &sentData);      // getByUart(&m, &refData);
 800246c:	490b      	ldr	r1, [pc, #44]	@ (800249c <main+0xec>)
 800246e:	4816      	ldr	r0, [pc, #88]	@ (80024c8 <main+0x118>)
 8002470:	f7fe fdd8 	bl	8001024 <sendByUart>
		UART_FLAG = 0;
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <main+0x120>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
	}
	if(BUT_FLAG){
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <main+0x124>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0e6      	beq.n	8002450 <main+0xa0>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002482:	2140      	movs	r1, #64	@ 0x40
 8002484:	4814      	ldr	r0, [pc, #80]	@ (80024d8 <main+0x128>)
 8002486:	f003 fc47 	bl	8005d18 <HAL_GPIO_TogglePin>
		changeAngle(&m);
 800248a:	480f      	ldr	r0, [pc, #60]	@ (80024c8 <main+0x118>)
 800248c:	f7fe fe04 	bl	8001098 <changeAngle>
		BUT_FLAG = 0;
 8002490:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <main+0x124>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
	if(FLAG){
 8002496:	e7db      	b.n	8002450 <main+0xa0>
 8002498:	0800a854 	.word	0x0800a854
 800249c:	2000063c 	.word	0x2000063c
 80024a0:	0800a85c 	.word	0x0800a85c
 80024a4:	48000400 	.word	0x48000400
 80024a8:	200002f8 	.word	0x200002f8
 80024ac:	200002ac 	.word	0x200002ac
 80024b0:	20000518 	.word	0x20000518
 80024b4:	20000088 	.word	0x20000088
 80024b8:	200004f4 	.word	0x200004f4
 80024bc:	2000051a 	.word	0x2000051a
 80024c0:	200000f4 	.word	0x200000f4
 80024c4:	20000220 	.word	0x20000220
 80024c8:	200004f8 	.word	0x200004f8
 80024cc:	200004e4 	.word	0x200004e4
 80024d0:	200004e8 	.word	0x200004e8
 80024d4:	200004f0 	.word	0x200004f0
 80024d8:	48000800 	.word	0x48000800

080024dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b094      	sub	sp, #80	@ 0x50
 80024e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	2238      	movs	r2, #56	@ 0x38
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f007 ff12 	bl	800a314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80024fe:	2000      	movs	r0, #0
 8002500:	f003 fc3c 	bl	8005d7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002504:	2302      	movs	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800250e:	2340      	movs	r3, #64	@ 0x40
 8002510:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002512:	2302      	movs	r3, #2
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002516:	2302      	movs	r3, #2
 8002518:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800251a:	2304      	movs	r3, #4
 800251c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800251e:	2355      	movs	r3, #85	@ 0x55
 8002520:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002522:	2302      	movs	r3, #2
 8002524:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002526:	2302      	movs	r3, #2
 8002528:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800252a:	2302      	movs	r3, #2
 800252c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252e:	f107 0318 	add.w	r3, r7, #24
 8002532:	4618      	mov	r0, r3
 8002534:	f003 fcd6 	bl	8005ee4 <HAL_RCC_OscConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800253e:	f000 fc41 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002542:	230f      	movs	r3, #15
 8002544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002546:	2303      	movs	r3, #3
 8002548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2104      	movs	r1, #4
 800255a:	4618      	mov	r0, r3
 800255c:	f003 ffd4 	bl	8006508 <HAL_RCC_ClockConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002566:	f000 fc2d 	bl	8002dc4 <Error_Handler>
  }
}
 800256a:	bf00      	nop
 800256c:	3750      	adds	r7, #80	@ 0x50
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	@ 0x30
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800257a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2220      	movs	r2, #32
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f007 fec1 	bl	800a314 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002592:	4b32      	ldr	r3, [pc, #200]	@ (800265c <MX_ADC1_Init+0xe8>)
 8002594:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002598:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800259a:	4b30      	ldr	r3, [pc, #192]	@ (800265c <MX_ADC1_Init+0xe8>)
 800259c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80025a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025a2:	4b2e      	ldr	r3, [pc, #184]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80025ae:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025ba:	4b28      	ldr	r3, [pc, #160]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025bc:	2204      	movs	r2, #4
 80025be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025c0:	4b26      	ldr	r3, [pc, #152]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80025cc:	4b23      	ldr	r3, [pc, #140]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025d2:	4b22      	ldr	r3, [pc, #136]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025e0:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025ee:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025fc:	4817      	ldr	r0, [pc, #92]	@ (800265c <MX_ADC1_Init+0xe8>)
 80025fe:	f001 fa6b 	bl	8003ad8 <HAL_ADC_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002608:	f000 fbdc 	bl	8002dc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002614:	4619      	mov	r1, r3
 8002616:	4811      	ldr	r0, [pc, #68]	@ (800265c <MX_ADC1_Init+0xe8>)
 8002618:	f002 fc30 	bl	8004e7c <HAL_ADCEx_MultiModeConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002622:	f000 fbcf 	bl	8002dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <MX_ADC1_Init+0xec>)
 8002628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800262a:	2306      	movs	r3, #6
 800262c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002632:	237f      	movs	r3, #127	@ 0x7f
 8002634:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002636:	2304      	movs	r3, #4
 8002638:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4806      	ldr	r0, [pc, #24]	@ (800265c <MX_ADC1_Init+0xe8>)
 8002644:	f001 feb8 	bl	80043b8 <HAL_ADC_ConfigChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800264e:	f000 fbb9 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	3730      	adds	r7, #48	@ 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000088 	.word	0x20000088
 8002660:	04300002 	.word	0x04300002

08002664 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800266a:	463b      	mov	r3, r7
 800266c:	2220      	movs	r2, #32
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f007 fe4f 	bl	800a314 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002676:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <MX_ADC2_Init+0xc0>)
 8002678:	4a2b      	ldr	r2, [pc, #172]	@ (8002728 <MX_ADC2_Init+0xc4>)
 800267a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800267c:	4b29      	ldr	r3, [pc, #164]	@ (8002724 <MX_ADC2_Init+0xc0>)
 800267e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002682:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002684:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <MX_ADC2_Init+0xc0>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800268a:	4b26      	ldr	r3, [pc, #152]	@ (8002724 <MX_ADC2_Init+0xc0>)
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002690:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <MX_ADC2_Init+0xc0>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002696:	4b23      	ldr	r3, [pc, #140]	@ (8002724 <MX_ADC2_Init+0xc0>)
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800269c:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <MX_ADC2_Init+0xc0>)
 800269e:	2204      	movs	r2, #4
 80026a0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80026a2:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026c2:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80026de:	4811      	ldr	r0, [pc, #68]	@ (8002724 <MX_ADC2_Init+0xc0>)
 80026e0:	f001 f9fa 	bl	8003ad8 <HAL_ADC_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80026ea:	f000 fb6b 	bl	8002dc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <MX_ADC2_Init+0xc8>)
 80026f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026f2:	2306      	movs	r3, #6
 80026f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026fa:	237f      	movs	r3, #127	@ 0x7f
 80026fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026fe:	2304      	movs	r3, #4
 8002700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002706:	463b      	mov	r3, r7
 8002708:	4619      	mov	r1, r3
 800270a:	4806      	ldr	r0, [pc, #24]	@ (8002724 <MX_ADC2_Init+0xc0>)
 800270c:	f001 fe54 	bl	80043b8 <HAL_ADC_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002716:	f000 fb55 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200000f4 	.word	0x200000f4
 8002728:	50000100 	.word	0x50000100
 800272c:	08600004 	.word	0x08600004

08002730 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <MX_CORDIC_Init+0x20>)
 8002736:	4a07      	ldr	r2, [pc, #28]	@ (8002754 <MX_CORDIC_Init+0x24>)
 8002738:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <MX_CORDIC_Init+0x20>)
 800273c:	f002 fc42 	bl	8004fc4 <HAL_CORDIC_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8002746:	f000 fb3d 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000220 	.word	0x20000220
 8002754:	40020c00 	.word	0x40020c00

08002758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <MX_SPI1_Init+0x74>)
 800275e:	4a1c      	ldr	r2, [pc, #112]	@ (80027d0 <MX_SPI1_Init+0x78>)
 8002760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002762:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <MX_SPI1_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002772:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <MX_SPI1_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800277e:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002780:	2201      	movs	r2, #1
 8002782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800278a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <MX_SPI1_Init+0x74>)
 800278e:	2220      	movs	r2, #32
 8002790:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_SPI1_Init+0x74>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_SPI1_Init+0x74>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027a6:	2207      	movs	r2, #7
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b6:	4805      	ldr	r0, [pc, #20]	@ (80027cc <MX_SPI1_Init+0x74>)
 80027b8:	f004 fab2 	bl	8006d20 <HAL_SPI_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80027c2:	f000 faff 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000248 	.word	0x20000248
 80027d0:	40013000 	.word	0x40013000

080027d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b09c      	sub	sp, #112	@ 0x70
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
 8002804:	615a      	str	r2, [r3, #20]
 8002806:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2234      	movs	r2, #52	@ 0x34
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f007 fd80 	bl	800a314 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002814:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002816:	4a54      	ldr	r2, [pc, #336]	@ (8002968 <MX_TIM1_Init+0x194>)
 8002818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800281a:	4b52      	ldr	r3, [pc, #328]	@ (8002964 <MX_TIM1_Init+0x190>)
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002820:	4b50      	ldr	r3, [pc, #320]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002822:	2220      	movs	r2, #32
 8002824:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3399;
 8002826:	4b4f      	ldr	r3, [pc, #316]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002828:	f640 5247 	movw	r2, #3399	@ 0xd47
 800282c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282e:	4b4d      	ldr	r3, [pc, #308]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 100;
 8002834:	4b4b      	ldr	r3, [pc, #300]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002836:	2264      	movs	r2, #100	@ 0x64
 8002838:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283a:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <MX_TIM1_Init+0x190>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002840:	4848      	ldr	r0, [pc, #288]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002842:	f004 fe9f 	bl	8007584 <HAL_TIM_Base_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800284c:	f000 faba 	bl	8002dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002854:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002856:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800285a:	4619      	mov	r1, r3
 800285c:	4841      	ldr	r0, [pc, #260]	@ (8002964 <MX_TIM1_Init+0x190>)
 800285e:	f005 fb47 	bl	8007ef0 <HAL_TIM_ConfigClockSource>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002868:	f000 faac 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800286c:	483d      	ldr	r0, [pc, #244]	@ (8002964 <MX_TIM1_Init+0x190>)
 800286e:	f004 ff7a 	bl	8007766 <HAL_TIM_PWM_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002878:	f000 faa4 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002888:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800288c:	4619      	mov	r1, r3
 800288e:	4835      	ldr	r0, [pc, #212]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002890:	f006 f8a4 	bl	80089dc <HAL_TIMEx_MasterConfigSynchronization>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800289a:	f000 fa93 	bl	8002dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289e:	2360      	movs	r3, #96	@ 0x60
 80028a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 80028a2:	f640 5348 	movw	r3, #3400	@ 0xd48
 80028a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a8:	2300      	movs	r3, #0
 80028aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028ac:	2300      	movs	r3, #0
 80028ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028b8:	2300      	movs	r3, #0
 80028ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028c0:	2204      	movs	r2, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4827      	ldr	r0, [pc, #156]	@ (8002964 <MX_TIM1_Init+0x190>)
 80028c6:	f005 f9ff 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80028d0:	f000 fa78 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028d8:	2208      	movs	r2, #8
 80028da:	4619      	mov	r1, r3
 80028dc:	4821      	ldr	r0, [pc, #132]	@ (8002964 <MX_TIM1_Init+0x190>)
 80028de:	f005 f9f3 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80028e8:	f000 fa6c 	bl	8002dc4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028f4:	220c      	movs	r2, #12
 80028f6:	4619      	mov	r1, r3
 80028f8:	481a      	ldr	r0, [pc, #104]	@ (8002964 <MX_TIM1_Init+0x190>)
 80028fa:	f005 f9e5 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8002904:	f000 fa5e 	bl	8002dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800291c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002920:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800292e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002938:	2300      	movs	r3, #0
 800293a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	4619      	mov	r1, r3
 8002944:	4807      	ldr	r0, [pc, #28]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002946:	f006 f8cb 	bl	8008ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8002950:	f000 fa38 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002954:	4803      	ldr	r0, [pc, #12]	@ (8002964 <MX_TIM1_Init+0x190>)
 8002956:	f000 fc29 	bl	80031ac <HAL_TIM_MspPostInit>

}
 800295a:	bf00      	nop
 800295c:	3770      	adds	r7, #112	@ 0x70
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200002ac 	.word	0x200002ac
 8002968:	40012c00 	.word	0x40012c00

0800296c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800298a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <MX_TIM2_Init+0x94>)
 800298c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002990:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <MX_TIM2_Init+0x94>)
 8002994:	2210      	movs	r2, #16
 8002996:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <MX_TIM2_Init+0x94>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800299e:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <MX_TIM2_Init+0x94>)
 80029a0:	2263      	movs	r2, #99	@ 0x63
 80029a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a4:	4b16      	ldr	r3, [pc, #88]	@ (8002a00 <MX_TIM2_Init+0x94>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <MX_TIM2_Init+0x94>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029b0:	4813      	ldr	r0, [pc, #76]	@ (8002a00 <MX_TIM2_Init+0x94>)
 80029b2:	f004 fde7 	bl	8007584 <HAL_TIM_Base_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029bc:	f000 fa02 	bl	8002dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	4619      	mov	r1, r3
 80029cc:	480c      	ldr	r0, [pc, #48]	@ (8002a00 <MX_TIM2_Init+0x94>)
 80029ce:	f005 fa8f 	bl	8007ef0 <HAL_TIM_ConfigClockSource>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029d8:	f000 f9f4 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <MX_TIM2_Init+0x94>)
 80029ea:	f005 fff7 	bl	80089dc <HAL_TIMEx_MasterConfigSynchronization>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029f4:	f000 f9e6 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200002f8 	.word	0x200002f8

08002a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a24:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <MX_TIM3_Init+0x9c>)
 8002a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13399;
 8002a28:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a2a:	f243 4257 	movw	r2, #13399	@ 0x3457
 8002a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8002a36:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a38:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a4a:	4814      	ldr	r0, [pc, #80]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a4c:	f004 fd9a 	bl	8007584 <HAL_TIM_Base_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002a56:	f000 f9b5 	bl	8002dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	4619      	mov	r1, r3
 8002a66:	480d      	ldr	r0, [pc, #52]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a68:	f005 fa42 	bl	8007ef0 <HAL_TIM_ConfigClockSource>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002a72:	f000 f9a7 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4806      	ldr	r0, [pc, #24]	@ (8002a9c <MX_TIM3_Init+0x98>)
 8002a84:	f005 ffaa 	bl	80089dc <HAL_TIMEx_MasterConfigSynchronization>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002a8e:	f000 f999 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000344 	.word	0x20000344
 8002aa0:	40000400 	.word	0x40000400

08002aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002aaa:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <MX_USART1_UART_Init+0x94>)
 8002aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002aca:	220c      	movs	r2, #12
 8002acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad4:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ae0:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aec:	4811      	ldr	r0, [pc, #68]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002aee:	f006 f8c9 	bl	8008c84 <HAL_UART_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002af8:	f000 f964 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002afc:	2100      	movs	r1, #0
 8002afe:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002b00:	f007 fb3d 	bl	800a17e <HAL_UARTEx_SetTxFifoThreshold>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b0a:	f000 f95b 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4808      	ldr	r0, [pc, #32]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002b12:	f007 fb72 	bl	800a1fa <HAL_UARTEx_SetRxFifoThreshold>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b1c:	f000 f952 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b20:	4804      	ldr	r0, [pc, #16]	@ (8002b34 <MX_USART1_UART_Init+0x90>)
 8002b22:	f007 faf3 	bl	800a10c <HAL_UARTEx_DisableFifoMode>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b2c:	f000 f94a 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000390 	.word	0x20000390
 8002b38:	40013800 	.word	0x40013800

08002b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b42:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <MX_DMA_Init+0x70>)
 8002b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b46:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <MX_DMA_Init+0x70>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b4e:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <MX_DMA_Init+0x70>)
 8002b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <MX_DMA_Init+0x70>)
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5e:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <MX_DMA_Init+0x70>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <MX_DMA_Init+0x70>)
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	200b      	movs	r0, #11
 8002b78:	f002 fb55 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b7c:	200b      	movs	r0, #11
 8002b7e:	f002 fb6c 	bl	800525a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	200c      	movs	r0, #12
 8002b88:	f002 fb4d 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002b8c:	200c      	movs	r0, #12
 8002b8e:	f002 fb64 	bl	800525a <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	205e      	movs	r0, #94	@ 0x5e
 8002b98:	f002 fb45 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8002b9c:	205e      	movs	r0, #94	@ 0x5e
 8002b9e:	f002 fb5c 	bl	800525a <HAL_NVIC_EnableIRQ>

}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000

08002bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	@ 0x28
 8002bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bc6:	4b43      	ldr	r3, [pc, #268]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	4a42      	ldr	r2, [pc, #264]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bcc:	f043 0320 	orr.w	r3, r3, #32
 8002bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd2:	4b40      	ldr	r3, [pc, #256]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bea:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	4a36      	ldr	r2, [pc, #216]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c02:	4b34      	ldr	r3, [pc, #208]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0e:	4b31      	ldr	r3, [pc, #196]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c12:	4a30      	ldr	r2, [pc, #192]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <MX_GPIO_Init+0x124>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_RESET);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2110      	movs	r1, #16
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c2e:	f003 f85b 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8002c32:	2200      	movs	r2, #0
 8002c34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c38:	4827      	ldr	r0, [pc, #156]	@ (8002cd8 <MX_GPIO_Init+0x128>)
 8002c3a:	f003 f855 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2140      	movs	r1, #64	@ 0x40
 8002c42:	4826      	ldr	r0, [pc, #152]	@ (8002cdc <MX_GPIO_Init+0x12c>)
 8002c44:	f003 f850 	bl	8005ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 8002c48:	2310      	movs	r3, #16
 8002c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c54:	2301      	movs	r3, #1
 8002c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c62:	f002 fea7 	bl	80059b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c6c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4816      	ldr	r0, [pc, #88]	@ (8002cd8 <MX_GPIO_Init+0x128>)
 8002c7e:	f002 fe99 	bl	80059b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8002c82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4619      	mov	r1, r3
 8002c9a:	480f      	ldr	r0, [pc, #60]	@ (8002cd8 <MX_GPIO_Init+0x128>)
 8002c9c:	f002 fe8a 	bl	80059b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002ca0:	2340      	movs	r3, #64	@ 0x40
 8002ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4809      	ldr	r0, [pc, #36]	@ (8002cdc <MX_GPIO_Init+0x12c>)
 8002cb8:	f002 fe7c 	bl	80059b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2028      	movs	r0, #40	@ 0x28
 8002cc2:	f002 fab0 	bl	8005226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cc6:	2028      	movs	r0, #40	@ 0x28
 8002cc8:	f002 fac7 	bl	800525a <HAL_NVIC_EnableIRQ>

}
 8002ccc:	bf00      	nop
 8002cce:	3728      	adds	r7, #40	@ 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	48000400 	.word	0x48000400
 8002cdc:	48000800 	.word	0x48000800

08002ce0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) { // 10 kHz
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf0:	d112      	bne.n	8002d18 <HAL_TIM_PeriodElapsedCallback+0x38>
		FLAG = 1;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

		if(UART_i==100){		//100 Hz
 8002cf8:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b64      	cmp	r3, #100	@ 0x64
 8002cfe:	d106      	bne.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0x2e>
			UART_FLAG = 1;
 8002d00:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
			UART_i = 0;
 8002d06:	4b16      	ldr	r3, [pc, #88]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e004      	b.n	8002d18 <HAL_TIM_PeriodElapsedCallback+0x38>
		}
		else{
			UART_i += 1;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002d16:	6013      	str	r3, [r2, #0]
		}

	}
	if (htim->Instance == TIM3 ){ // for a delay after pressing the button (to avoid contact bounce)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d117      	bne.n	8002d52 <HAL_TIM_PeriodElapsedCallback+0x72>
		HAL_TIM_Base_Stop_IT(&htim3);
 8002d22:	4812      	ldr	r0, [pc, #72]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002d24:	f004 fcf0 	bl	8007708 <HAL_TIM_Base_Stop_IT>
		if( HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 8002d28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d2c:	4810      	ldr	r0, [pc, #64]	@ (8002d70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002d2e:	f002 ffc3 	bl	8005cb8 <HAL_GPIO_ReadPin>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <HAL_TIM_PeriodElapsedCallback+0x5e>
			BUT_FLAG = 1;
 8002d38:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_Pin);   // clear EXTI_PR (interrupt bit)
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002d40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d44:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn);   // clear NVIC_ICPRx (queue bit)
 8002d46:	2028      	movs	r0, #40	@ 0x28
 8002d48:	f7ff fb14 	bl	8002374 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // enable external interrupt
 8002d4c:	2028      	movs	r0, #40	@ 0x28
 8002d4e:	f002 fa84 	bl	800525a <HAL_NVIC_EnableIRQ>
	}
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200004e4 	.word	0x200004e4
 8002d60:	200004ec 	.word	0x200004ec
 8002d64:	200004e8 	.word	0x200004e8
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	20000344 	.word	0x20000344
 8002d70:	48000400 	.word	0x48000400
 8002d74:	200004f0 	.word	0x200004f0
 8002d78:	40010400 	.word	0x40010400

08002d7c <HAL_ADC_ConvCpltCallback>:

// interrupt at the end of ADC data processing
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_Pin) {
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da0:	d10a      	bne.n	8002db8 <HAL_GPIO_EXTI_Callback+0x28>
	  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002da2:	2028      	movs	r0, #40	@ 0x28
 8002da4:	f002 fa67 	bl	8005276 <HAL_NVIC_DisableIRQ>
	  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF); // clear flag
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_GPIO_EXTI_Callback+0x30>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0201 	mvn.w	r2, #1
 8002db0:	611a      	str	r2, [r3, #16]
	  HAL_TIM_Base_Start_IT(&htim3);
 8002db2:	4803      	ldr	r0, [pc, #12]	@ (8002dc0 <HAL_GPIO_EXTI_Callback+0x30>)
 8002db4:	f004 fc3e 	bl	8007634 <HAL_TIM_Base_Start_IT>
  }
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000344 	.word	0x20000344

08002dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <Error_Handler+0x8>

08002dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e14 <HAL_MspInit+0x44>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dda:	4a0e      	ldr	r2, [pc, #56]	@ (8002e14 <HAL_MspInit+0x44>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002de2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <HAL_MspInit+0x44>)
 8002de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <HAL_MspInit+0x44>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	4a08      	ldr	r2, [pc, #32]	@ (8002e14 <HAL_MspInit+0x44>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_MspInit+0x44>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e06:	f003 f85d 	bl	8005ec4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b09c      	sub	sp, #112	@ 0x70
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e30:	f107 0318 	add.w	r3, r7, #24
 8002e34:	2244      	movs	r2, #68	@ 0x44
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f007 fa6b 	bl	800a314 <memset>
  if(hadc->Instance==ADC1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e46:	d172      	bne.n	8002f2e <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002e4e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002e52:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e54:	f107 0318 	add.w	r3, r7, #24
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fd71 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e64:	f7ff ffae 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e68:	4b6e      	ldr	r3, [pc, #440]	@ (8003024 <HAL_ADC_MspInit+0x20c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003024 <HAL_ADC_MspInit+0x20c>)
 8002e70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e72:	4b6c      	ldr	r3, [pc, #432]	@ (8003024 <HAL_ADC_MspInit+0x20c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10b      	bne.n	8002e92 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e7a:	4b6b      	ldr	r3, [pc, #428]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002e80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e86:	4b68      	ldr	r3, [pc, #416]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	4b65      	ldr	r3, [pc, #404]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	4a64      	ldr	r2, [pc, #400]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e9e:	4b62      	ldr	r3, [pc, #392]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ec0:	f002 fd78 	bl	80059b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 8002ec4:	4b59      	ldr	r3, [pc, #356]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8003030 <HAL_ADC_MspInit+0x218>)
 8002ec8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002eca:	4b58      	ldr	r3, [pc, #352]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002ecc:	2205      	movs	r2, #5
 8002ece:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed0:	4b56      	ldr	r3, [pc, #344]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed6:	4b55      	ldr	r3, [pc, #340]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ee2:	4b52      	ldr	r3, [pc, #328]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ee8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eea:	4b50      	ldr	r3, [pc, #320]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002eec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ef0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002efa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002efe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f00:	484a      	ldr	r0, [pc, #296]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002f02:	f002 f9d3 	bl	80052ac <HAL_DMA_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8002f0c:	f7ff ff5a 	bl	8002dc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a46      	ldr	r2, [pc, #280]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f16:	4a45      	ldr	r2, [pc, #276]	@ (800302c <HAL_ADC_MspInit+0x214>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2100      	movs	r1, #0
 8002f20:	2012      	movs	r0, #18
 8002f22:	f002 f980 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f26:	2012      	movs	r0, #18
 8002f28:	f002 f997 	bl	800525a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f2c:	e076      	b.n	800301c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a40      	ldr	r2, [pc, #256]	@ (8003034 <HAL_ADC_MspInit+0x21c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d171      	bne.n	800301c <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002f3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f42:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f44:	f107 0318 	add.w	r3, r7, #24
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fcf9 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8002f54:	f7ff ff36 	bl	8002dc4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002f58:	4b32      	ldr	r3, [pc, #200]	@ (8003024 <HAL_ADC_MspInit+0x20c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a31      	ldr	r2, [pc, #196]	@ (8003024 <HAL_ADC_MspInit+0x20c>)
 8002f60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f62:	4b30      	ldr	r3, [pc, #192]	@ (8003024 <HAL_ADC_MspInit+0x20c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10b      	bne.n	8002f82 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002f70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f76:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f82:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f86:	4a28      	ldr	r2, [pc, #160]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f8e:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <HAL_ADC_MspInit+0x210>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002faa:	4619      	mov	r1, r3
 8002fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fb0:	f002 fd00 	bl	80059b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel4;
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fb6:	4a21      	ldr	r2, [pc, #132]	@ (800303c <HAL_ADC_MspInit+0x224>)
 8002fb8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002fba:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fbc:	2224      	movs	r2, #36	@ 0x24
 8002fbe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fd8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fda:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002fea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002ff0:	4811      	ldr	r0, [pc, #68]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8002ff2:	f002 f95b 	bl	80052ac <HAL_DMA_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_ADC_MspInit+0x1e8>
      Error_Handler();
 8002ffc:	f7ff fee2 	bl	8002dc4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54
 8003006:	4a0c      	ldr	r2, [pc, #48]	@ (8003038 <HAL_ADC_MspInit+0x220>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800300c:	2200      	movs	r2, #0
 800300e:	2100      	movs	r1, #0
 8003010:	2012      	movs	r0, #18
 8003012:	f002 f908 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003016:	2012      	movs	r0, #18
 8003018:	f002 f91f 	bl	800525a <HAL_NVIC_EnableIRQ>
}
 800301c:	bf00      	nop
 800301e:	3770      	adds	r7, #112	@ 0x70
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000664 	.word	0x20000664
 8003028:	40021000 	.word	0x40021000
 800302c:	20000160 	.word	0x20000160
 8003030:	40020058 	.word	0x40020058
 8003034:	50000100 	.word	0x50000100
 8003038:	200001c0 	.word	0x200001c0
 800303c:	40020044 	.word	0x40020044

08003040 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <HAL_CORDIC_MspInit+0x38>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10b      	bne.n	800306a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_CORDIC_MspInit+0x3c>)
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	4a09      	ldr	r2, [pc, #36]	@ (800307c <HAL_CORDIC_MspInit+0x3c>)
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	6493      	str	r3, [r2, #72]	@ 0x48
 800305e:	4b07      	ldr	r3, [pc, #28]	@ (800307c <HAL_CORDIC_MspInit+0x3c>)
 8003060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40020c00 	.word	0x40020c00
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a17      	ldr	r2, [pc, #92]	@ (80030fc <HAL_SPI_MspInit+0x7c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d128      	bne.n	80030f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030a2:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <HAL_SPI_MspInit+0x80>)
 80030a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a6:	4a16      	ldr	r2, [pc, #88]	@ (8003100 <HAL_SPI_MspInit+0x80>)
 80030a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ae:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <HAL_SPI_MspInit+0x80>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_SPI_MspInit+0x80>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030be:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <HAL_SPI_MspInit+0x80>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_SPI_MspInit+0x80>)
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030d2:	23e0      	movs	r3, #224	@ 0xe0
 80030d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030e2:	2305      	movs	r3, #5
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030f0:	f002 fc60 	bl	80059b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030f4:	bf00      	nop
 80030f6:	3728      	adds	r7, #40	@ 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40013000 	.word	0x40013000
 8003100:	40021000 	.word	0x40021000

08003104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a23      	ldr	r2, [pc, #140]	@ (80031a0 <HAL_TIM_Base_MspInit+0x9c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003116:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 8003118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311a:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 800311c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003120:	6613      	str	r3, [r2, #96]	@ 0x60
 8003122:	4b20      	ldr	r3, [pc, #128]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 8003124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800312e:	e032      	b.n	8003196 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003138:	d114      	bne.n	8003164 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800313a:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6593      	str	r3, [r2, #88]	@ 0x58
 8003146:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	201c      	movs	r0, #28
 8003158:	f002 f865 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800315c:	201c      	movs	r0, #28
 800315e:	f002 f87c 	bl	800525a <HAL_NVIC_EnableIRQ>
}
 8003162:	e018      	b.n	8003196 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0f      	ldr	r2, [pc, #60]	@ (80031a8 <HAL_TIM_Base_MspInit+0xa4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d113      	bne.n	8003196 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800316e:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	4a0c      	ldr	r2, [pc, #48]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6593      	str	r3, [r2, #88]	@ 0x58
 800317a:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_TIM_Base_MspInit+0xa0>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	201d      	movs	r0, #29
 800318c:	f002 f84b 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003190:	201d      	movs	r0, #29
 8003192:	f002 f862 	bl	800525a <HAL_NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40000400 	.word	0x40000400

080031ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 030c 	add.w	r3, r7, #12
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <HAL_TIM_MspPostInit+0x8c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d12f      	bne.n	800322e <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_TIM_MspPostInit+0x90>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <HAL_TIM_MspPostInit+0x90>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031da:	4b18      	ldr	r3, [pc, #96]	@ (800323c <HAL_TIM_MspPostInit+0x90>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80031ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80031f8:	2306      	movs	r3, #6
 80031fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	4619      	mov	r1, r3
 8003202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003206:	f002 fbd5 	bl	80059b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800320a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800320e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800321c:	230b      	movs	r3, #11
 800321e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	4619      	mov	r1, r3
 8003226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800322a:	f002 fbc3 	bl	80059b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800322e:	bf00      	nop
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b09a      	sub	sp, #104	@ 0x68
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	2244      	movs	r2, #68	@ 0x44
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f007 f857 	bl	800a314 <memset>
  if(huart->Instance==USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4c      	ldr	r2, [pc, #304]	@ (800339c <HAL_UART_MspInit+0x15c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	f040 8091 	bne.w	8003394 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003272:	2301      	movs	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800327a:	f107 0310 	add.w	r3, r7, #16
 800327e:	4618      	mov	r0, r3
 8003280:	f003 fb5e 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800328a:	f7ff fd9b 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328e:	4b44      	ldr	r3, [pc, #272]	@ (80033a0 <HAL_UART_MspInit+0x160>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	4a43      	ldr	r2, [pc, #268]	@ (80033a0 <HAL_UART_MspInit+0x160>)
 8003294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003298:	6613      	str	r3, [r2, #96]	@ 0x60
 800329a:	4b41      	ldr	r3, [pc, #260]	@ (80033a0 <HAL_UART_MspInit+0x160>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a6:	4b3e      	ldr	r3, [pc, #248]	@ (80033a0 <HAL_UART_MspInit+0x160>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	4a3d      	ldr	r2, [pc, #244]	@ (80033a0 <HAL_UART_MspInit+0x160>)
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b2:	4b3b      	ldr	r3, [pc, #236]	@ (80033a0 <HAL_UART_MspInit+0x160>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032be:	23c0      	movs	r3, #192	@ 0xc0
 80032c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032ce:	2307      	movs	r3, #7
 80032d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032d6:	4619      	mov	r1, r3
 80032d8:	4832      	ldr	r0, [pc, #200]	@ (80033a4 <HAL_UART_MspInit+0x164>)
 80032da:	f002 fb6b 	bl	80059b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80032de:	4b32      	ldr	r3, [pc, #200]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 80032e0:	4a32      	ldr	r2, [pc, #200]	@ (80033ac <HAL_UART_MspInit+0x16c>)
 80032e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80032e4:	4b30      	ldr	r3, [pc, #192]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 80032e6:	2218      	movs	r2, #24
 80032e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ea:	4b2f      	ldr	r3, [pc, #188]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f0:	4b2d      	ldr	r3, [pc, #180]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032f6:	4b2c      	ldr	r3, [pc, #176]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 80032f8:	2280      	movs	r2, #128	@ 0x80
 80032fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032fc:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 80032fe:	2200      	movs	r2, #0
 8003300:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003302:	4b29      	ldr	r3, [pc, #164]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003308:	4b27      	ldr	r3, [pc, #156]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800330e:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003314:	4824      	ldr	r0, [pc, #144]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 8003316:	f001 ffc9 	bl	80052ac <HAL_DMA_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8003320:	f7ff fd50 	bl	8002dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a20      	ldr	r2, [pc, #128]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 8003328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800332c:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_UART_MspInit+0x168>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003332:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 8003334:	4a1f      	ldr	r2, [pc, #124]	@ (80033b4 <HAL_UART_MspInit+0x174>)
 8003336:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003338:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 800333a:	2219      	movs	r2, #25
 800333c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800333e:	4b1c      	ldr	r3, [pc, #112]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 8003340:	2210      	movs	r2, #16
 8003342:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 800334c:	2280      	movs	r2, #128	@ 0x80
 800334e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003350:	4b17      	ldr	r3, [pc, #92]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 8003352:	2200      	movs	r2, #0
 8003354:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003356:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800335c:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003368:	4811      	ldr	r0, [pc, #68]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 800336a:	f001 ff9f 	bl	80052ac <HAL_DMA_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003374:	f7ff fd26 	bl	8002dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0d      	ldr	r2, [pc, #52]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 800337c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800337e:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <HAL_UART_MspInit+0x170>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003384:	2200      	movs	r2, #0
 8003386:	2100      	movs	r1, #0
 8003388:	2025      	movs	r0, #37	@ 0x25
 800338a:	f001 ff4c 	bl	8005226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800338e:	2025      	movs	r0, #37	@ 0x25
 8003390:	f001 ff63 	bl	800525a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003394:	bf00      	nop
 8003396:	3768      	adds	r7, #104	@ 0x68
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40013800 	.word	0x40013800
 80033a0:	40021000 	.word	0x40021000
 80033a4:	48000400 	.word	0x48000400
 80033a8:	20000424 	.word	0x20000424
 80033ac:	40020008 	.word	0x40020008
 80033b0:	20000484 	.word	0x20000484
 80033b4:	4002001c 	.word	0x4002001c

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <NMI_Handler+0x4>

080033c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <HardFault_Handler+0x4>

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <MemManage_Handler+0x4>

080033d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <BusFault_Handler+0x4>

080033d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <UsageFault_Handler+0x4>

080033e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800340e:	f000 f8e3 	bl	80035d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800341c:	4802      	ldr	r0, [pc, #8]	@ (8003428 <DMA1_Channel1_IRQHandler+0x10>)
 800341e:	f002 f928 	bl	8005672 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000424 	.word	0x20000424

0800342c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003430:	4802      	ldr	r0, [pc, #8]	@ (800343c <DMA1_Channel2_IRQHandler+0x10>)
 8003432:	f002 f91e 	bl	8005672 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000484 	.word	0x20000484

08003440 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003444:	4803      	ldr	r0, [pc, #12]	@ (8003454 <ADC1_2_IRQHandler+0x14>)
 8003446:	f000 fd7f 	bl	8003f48 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800344a:	4803      	ldr	r0, [pc, #12]	@ (8003458 <ADC1_2_IRQHandler+0x18>)
 800344c:	f000 fd7c 	bl	8003f48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000088 	.word	0x20000088
 8003458:	200000f4 	.word	0x200000f4

0800345c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <TIM2_IRQHandler+0x10>)
 8003462:	f004 fae1 	bl	8007a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200002f8 	.word	0x200002f8

08003470 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <TIM3_IRQHandler+0x10>)
 8003476:	f004 fad7 	bl	8007a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000344 	.word	0x20000344

08003484 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <USART1_IRQHandler+0x10>)
 800348a:	f005 fccb 	bl	8008e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000390 	.word	0x20000390

08003498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800349c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80034a0:	f002 fc54 	bl	8005d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 80034ac:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <DMAMUX_OVR_IRQHandler+0x10>)
 80034ae:	f002 fa2f 	bl	8005910 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000484 	.word	0x20000484

080034bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034c0:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <SystemInit+0x20>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	4a05      	ldr	r2, [pc, #20]	@ (80034dc <SystemInit+0x20>)
 80034c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034e0:	480d      	ldr	r0, [pc, #52]	@ (8003518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80034e4:	f7ff ffea 	bl	80034bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e8:	480c      	ldr	r0, [pc, #48]	@ (800351c <LoopForever+0x6>)
  ldr r1, =_edata
 80034ea:	490d      	ldr	r1, [pc, #52]	@ (8003520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003524 <LoopForever+0xe>)
  movs r3, #0
 80034ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034f0:	e002      	b.n	80034f8 <LoopCopyDataInit>

080034f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034f6:	3304      	adds	r3, #4

080034f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034fc:	d3f9      	bcc.n	80034f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003500:	4c0a      	ldr	r4, [pc, #40]	@ (800352c <LoopForever+0x16>)
  movs r3, #0
 8003502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003504:	e001      	b.n	800350a <LoopFillZerobss>

08003506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003508:	3204      	adds	r2, #4

0800350a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800350a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800350c:	d3fb      	bcc.n	8003506 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800350e:	f006 ff0f 	bl	800a330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003512:	f7fe ff4d 	bl	80023b0 <main>

08003516 <LoopForever>:

LoopForever:
    b LoopForever
 8003516:	e7fe      	b.n	8003516 <LoopForever>
  ldr   r0, =_estack
 8003518:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800351c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003520:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003524:	0800a8bc 	.word	0x0800a8bc
  ldr r2, =_sbss
 8003528:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800352c:	200007a4 	.word	0x200007a4

08003530 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003530:	e7fe      	b.n	8003530 <COMP1_2_3_IRQHandler>

08003532 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353c:	2003      	movs	r0, #3
 800353e:	f001 fe67 	bl	8005210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003542:	200f      	movs	r0, #15
 8003544:	f000 f80e 	bl	8003564 <HAL_InitTick>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	71fb      	strb	r3, [r7, #7]
 8003552:	e001      	b.n	8003558 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003554:	f7ff fc3c 	bl	8002dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003558:	79fb      	ldrb	r3, [r7, #7]

}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003570:	4b16      	ldr	r3, [pc, #88]	@ (80035cc <HAL_InitTick+0x68>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003578:	4b15      	ldr	r3, [pc, #84]	@ (80035d0 <HAL_InitTick+0x6c>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b13      	ldr	r3, [pc, #76]	@ (80035cc <HAL_InitTick+0x68>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003584:	fbb1 f3f3 	udiv	r3, r1, r3
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fe80 	bl	8005292 <HAL_SYSTICK_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d809      	bhi.n	80035b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800359e:	2200      	movs	r2, #0
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	f04f 30ff 	mov.w	r0, #4294967295
 80035a6:	f001 fe3e 	bl	8005226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035aa:	4a0a      	ldr	r2, [pc, #40]	@ (80035d4 <HAL_InitTick+0x70>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e007      	b.n	80035c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	e004      	b.n	80035c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e001      	b.n	80035c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000008 	.word	0x20000008
 80035d0:	20000000 	.word	0x20000000
 80035d4:	20000004 	.word	0x20000004

080035d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_IncTick+0x1c>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_IncTick+0x20>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4413      	add	r3, r2
 80035e6:	4a03      	ldr	r2, [pc, #12]	@ (80035f4 <HAL_IncTick+0x1c>)
 80035e8:	6013      	str	r3, [r2, #0]
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	20000668 	.word	0x20000668
 80035f8:	20000008 	.word	0x20000008

080035fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_GetTick+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000668 	.word	0x20000668

08003614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800361c:	f7ff ffee 	bl	80035fc <HAL_GetTick>
 8003620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d004      	beq.n	8003638 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800362e:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <HAL_Delay+0x40>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003638:	bf00      	nop
 800363a:	f7ff ffdf 	bl	80035fc <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	429a      	cmp	r2, r3
 8003648:	d8f7      	bhi.n	800363a <HAL_Delay+0x26>
  {
  }
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000008 	.word	0x20000008

08003658 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	609a      	str	r2, [r3, #8]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3360      	adds	r3, #96	@ 0x60
 80036d2:	461a      	mov	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <LL_ADC_SetOffset+0x44>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	03fff000 	.word	0x03fff000

08003708 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3360      	adds	r3, #96	@ 0x60
 8003716:	461a      	mov	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3360      	adds	r3, #96	@ 0x60
 8003744:	461a      	mov	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	431a      	orrs	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800376a:	b480      	push	{r7}
 800376c:	b087      	sub	sp, #28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3360      	adds	r3, #96	@ 0x60
 800377a:	461a      	mov	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	431a      	orrs	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3360      	adds	r3, #96	@ 0x60
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	615a      	str	r2, [r3, #20]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003822:	b480      	push	{r7}
 8003824:	b087      	sub	sp, #28
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3330      	adds	r3, #48	@ 0x30
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	4413      	add	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	211f      	movs	r1, #31
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	401a      	ands	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	f003 011f 	and.w	r1, r3, #31
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	431a      	orrs	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3314      	adds	r3, #20
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	0e5b      	lsrs	r3, r3, #25
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	4413      	add	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	0d1b      	lsrs	r3, r3, #20
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	2107      	movs	r1, #7
 80038ce:	fa01 f303 	lsl.w	r3, r1, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	401a      	ands	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	0d1b      	lsrs	r3, r3, #20
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	431a      	orrs	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003910:	43db      	mvns	r3, r3
 8003912:	401a      	ands	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 0318 	and.w	r3, r3, #24
 800391a:	4908      	ldr	r1, [pc, #32]	@ (800393c <LL_ADC_SetChannelSingleDiff+0x44>)
 800391c:	40d9      	lsrs	r1, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	400b      	ands	r3, r1
 8003922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003926:	431a      	orrs	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	0007ffff 	.word	0x0007ffff

08003940 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 031f 	and.w	r3, r3, #31
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003988:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6093      	str	r3, [r2, #8]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b0:	d101      	bne.n	80039b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80039d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a00:	d101      	bne.n	8003a06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <LL_ADC_IsEnabled+0x18>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <LL_ADC_IsEnabled+0x1a>
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d101      	bne.n	8003aa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d101      	bne.n	8003ac8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b089      	sub	sp, #36	@ 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e167      	b.n	8003dc2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff f989 	bl	8002e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff3f 	bl	800399c <LL_ADC_IsDeepPowerDownEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff25 	bl	8003978 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff5a 	bl	80039ec <LL_ADC_IsInternalRegulatorEnabled>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff3e 	bl	80039c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b48:	4ba0      	ldr	r3, [pc, #640]	@ (8003dcc <HAL_ADC_Init+0x2f4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	4aa0      	ldr	r2, [pc, #640]	@ (8003dd0 <HAL_ADC_Init+0x2f8>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	3301      	adds	r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b5c:	e002      	b.n	8003b64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f9      	bne.n	8003b5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff3c 	bl	80039ec <LL_ADC_IsInternalRegulatorEnabled>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7e:	f043 0210 	orr.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ff75 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 8003ba0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 8100 	bne.w	8003db0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 80fc 	bne.w	8003db0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bc0:	f043 0202 	orr.w	r2, r3, #2
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff35 	bl	8003a3c <LL_ADC_IsEnabled>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d111      	bne.n	8003bfc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bdc:	f7ff ff2e 	bl	8003a3c <LL_ADC_IsEnabled>
 8003be0:	4604      	mov	r4, r0
 8003be2:	487c      	ldr	r0, [pc, #496]	@ (8003dd4 <HAL_ADC_Init+0x2fc>)
 8003be4:	f7ff ff2a 	bl	8003a3c <LL_ADC_IsEnabled>
 8003be8:	4603      	mov	r3, r0
 8003bea:	4323      	orrs	r3, r4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4878      	ldr	r0, [pc, #480]	@ (8003dd8 <HAL_ADC_Init+0x300>)
 8003bf8:	f7ff fd2e 	bl	8003658 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7f5b      	ldrb	r3, [r3, #29]
 8003c00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d106      	bne.n	8003c38 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	045b      	lsls	r3, r3, #17
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	4b60      	ldr	r3, [pc, #384]	@ (8003ddc <HAL_ADC_Init+0x304>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	69b9      	ldr	r1, [r7, #24]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff14 	bl	8003ab0 <LL_ADC_INJ_IsConversionOngoing>
 8003c88:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d16d      	bne.n	8003d6c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d16a      	bne.n	8003d6c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c9a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ca2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cb2:	f023 0302 	bic.w	r3, r3, #2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	69b9      	ldr	r1, [r7, #24]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d017      	beq.n	8003cf8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003cd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ce0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6911      	ldr	r1, [r2, #16]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003cf6:	e013      	b.n	8003d20 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d1c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d118      	bne.n	8003d5c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d40:	4311      	orrs	r1, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d46:	4311      	orrs	r1, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	611a      	str	r2, [r3, #16]
 8003d5a:	e007      	b.n	8003d6c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d10c      	bne.n	8003d8e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	f023 010f 	bic.w	r1, r3, #15
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d8c:	e007      	b.n	8003d9e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 020f 	bic.w	r2, r2, #15
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	f043 0201 	orr.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dae:	e007      	b.n	8003dc0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	f043 0210 	orr.w	r2, r3, #16
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3724      	adds	r7, #36	@ 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd90      	pop	{r4, r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	053e2d63 	.word	0x053e2d63
 8003dd4:	50000100 	.word	0x50000100
 8003dd8:	50000300 	.word	0x50000300
 8003ddc:	fff04007 	.word	0xfff04007

08003de0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dec:	4851      	ldr	r0, [pc, #324]	@ (8003f34 <HAL_ADC_Start_DMA+0x154>)
 8003dee:	f7ff fda7 	bl	8003940 <LL_ADC_GetMultimode>
 8003df2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fe46 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 808f 	bne.w	8003f24 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_Start_DMA+0x34>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e08a      	b.n	8003f2a <HAL_ADC_Start_DMA+0x14a>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d002      	beq.n	8003e2e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b09      	cmp	r3, #9
 8003e2c:	d173      	bne.n	8003f16 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 feb2 	bl	8004b98 <ADC_Enable>
 8003e34:	4603      	mov	r3, r0
 8003e36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d166      	bne.n	8003f0c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a38      	ldr	r2, [pc, #224]	@ (8003f38 <HAL_ADC_Start_DMA+0x158>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d002      	beq.n	8003e62 <HAL_ADC_Start_DMA+0x82>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e001      	b.n	8003e66 <HAL_ADC_Start_DMA+0x86>
 8003e62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d002      	beq.n	8003e74 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e90:	f023 0206 	bic.w	r2, r3, #6
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e98:	e002      	b.n	8003ea0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea4:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <HAL_ADC_Start_DMA+0x15c>)
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eac:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <HAL_ADC_Start_DMA+0x160>)
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	4a23      	ldr	r2, [pc, #140]	@ (8003f44 <HAL_ADC_Start_DMA+0x164>)
 8003eb6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	221c      	movs	r2, #28
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0210 	orr.w	r2, r2, #16
 8003ed6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3340      	adds	r3, #64	@ 0x40
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f001 fa80 	bl	80053fc <HAL_DMA_Start_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fdac 	bl	8003a62 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003f0a:	e00d      	b.n	8003f28 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003f14:	e008      	b.n	8003f28 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003f22:	e001      	b.n	8003f28 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
 8003f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	50000300 	.word	0x50000300
 8003f38:	50000100 	.word	0x50000100
 8003f3c:	08004ca5 	.word	0x08004ca5
 8003f40:	08004d7d 	.word	0x08004d7d
 8003f44:	08004d99 	.word	0x08004d99

08003f48 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f64:	4883      	ldr	r0, [pc, #524]	@ (8004174 <HAL_ADC_IRQHandler+0x22c>)
 8003f66:	f7ff fceb 	bl	8003940 <LL_ADC_GetMultimode>
 8003f6a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d017      	beq.n	8003fa6 <HAL_ADC_IRQHandler+0x5e>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d012      	beq.n	8003fa6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 ff65 	bl	8004e68 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <HAL_ADC_IRQHandler+0x72>
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8085 	beq.w	80040d0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d07f      	beq.n	80040d0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fc05 	bl	80037fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d064      	beq.n	80040c2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8004178 <HAL_ADC_IRQHandler+0x230>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d002      	beq.n	8004008 <HAL_ADC_IRQHandler+0xc0>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	e001      	b.n	800400c <HAL_ADC_IRQHandler+0xc4>
 8004008:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	4293      	cmp	r3, r2
 8004012:	d008      	beq.n	8004026 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d002      	beq.n	8004026 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b09      	cmp	r3, #9
 8004024:	d104      	bne.n	8004030 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	e00d      	b.n	800404c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a50      	ldr	r2, [pc, #320]	@ (8004178 <HAL_ADC_IRQHandler+0x230>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d002      	beq.n	8004040 <HAL_ADC_IRQHandler+0xf8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	e001      	b.n	8004044 <HAL_ADC_IRQHandler+0xfc>
 8004040:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004044:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d135      	bne.n	80040c2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d12e      	bne.n	80040c2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fd0e 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11a      	bne.n	80040aa <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 020c 	bic.w	r2, r2, #12
 8004082:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004088:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d112      	bne.n	80040c2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	f043 0201 	orr.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040a8:	e00b      	b.n	80040c2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	f043 0210 	orr.w	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ba:	f043 0201 	orr.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fe5a 	bl	8002d7c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	220c      	movs	r2, #12
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_ADC_IRQHandler+0x19c>
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 809e 	beq.w	800422c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8098 	beq.w	800422c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fbae 	bl	800387a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800411e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fb69 	bl	80037fc <LL_ADC_REG_IsTriggerSourceSWStart>
 800412a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a11      	ldr	r2, [pc, #68]	@ (8004178 <HAL_ADC_IRQHandler+0x230>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d002      	beq.n	800413c <HAL_ADC_IRQHandler+0x1f4>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e001      	b.n	8004140 <HAL_ADC_IRQHandler+0x1f8>
 800413c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	4293      	cmp	r3, r2
 8004146:	d008      	beq.n	800415a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d002      	beq.n	800415a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b07      	cmp	r3, #7
 8004158:	d104      	bne.n	8004164 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	e011      	b.n	8004188 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a03      	ldr	r2, [pc, #12]	@ (8004178 <HAL_ADC_IRQHandler+0x230>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d006      	beq.n	800417c <HAL_ADC_IRQHandler+0x234>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	e005      	b.n	8004180 <HAL_ADC_IRQHandler+0x238>
 8004174:	50000300 	.word	0x50000300
 8004178:	50000100 	.word	0x50000100
 800417c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004180:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d047      	beq.n	800421e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_ADC_IRQHandler+0x260>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d03f      	beq.n	800421e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d13a      	bne.n	800421e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b2:	2b40      	cmp	r3, #64	@ 0x40
 80041b4:	d133      	bne.n	800421e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d12e      	bne.n	800421e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fc73 	bl	8003ab0 <LL_ADC_INJ_IsConversionOngoing>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d11a      	bne.n	8004206 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041de:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d112      	bne.n	800421e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004204:	e00b      	b.n	800421e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420a:	f043 0210 	orr.w	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fdfa 	bl	8004e18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2260      	movs	r2, #96	@ 0x60
 800422a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d011      	beq.n	800425a <HAL_ADC_IRQHandler+0x312>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004244:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f89f 	bl	8004390 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2280      	movs	r2, #128	@ 0x80
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d012      	beq.n	800428a <HAL_ADC_IRQHandler+0x342>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fde0 	bl	8004e40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <HAL_ADC_IRQHandler+0x372>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fdd2 	bl	8004e54 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d036      	beq.n	8004332 <HAL_ADC_IRQHandler+0x3ea>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d031      	beq.n	8004332 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80042d6:	2301      	movs	r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042da:	e014      	b.n	8004306 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80042e2:	4825      	ldr	r0, [pc, #148]	@ (8004378 <HAL_ADC_IRQHandler+0x430>)
 80042e4:	f7ff fb3a 	bl	800395c <LL_ADC_GetMultiDMATransfer>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80042ee:	2301      	movs	r3, #1
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f2:	e008      	b.n	8004306 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004302:	2301      	movs	r3, #1
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10e      	bne.n	800432a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004310:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431c:	f043 0202 	orr.w	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f83d 	bl	80043a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2210      	movs	r2, #16
 8004330:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d018      	beq.n	800436e <HAL_ADC_IRQHandler+0x426>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004342:	2b00      	cmp	r3, #0
 8004344:	d013      	beq.n	800436e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004366:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fd5f 	bl	8004e2c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800436e:	bf00      	nop
 8004370:	3728      	adds	r7, #40	@ 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	50000300 	.word	0x50000300

0800437c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0b6      	sub	sp, #216	@ 0xd8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_ADC_ConfigChannel+0x22>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e3c8      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x7b4>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fb4f 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 83ad 	bne.w	8004b4e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6859      	ldr	r1, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	f7ff fa0e 	bl	8003822 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fb3d 	bl	8003a8a <LL_ADC_REG_IsConversionOngoing>
 8004410:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fb49 	bl	8003ab0 <LL_ADC_INJ_IsConversionOngoing>
 800441e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004422:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 81d9 	bne.w	80047de <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800442c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 81d4 	bne.w	80047de <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800443e:	d10f      	bne.n	8004460 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2200      	movs	r2, #0
 800444a:	4619      	mov	r1, r3
 800444c:	f7ff fa28 	bl	80038a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f9bc 	bl	80037d6 <LL_ADC_SetSamplingTimeCommonConfig>
 800445e:	e00e      	b.n	800447e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	461a      	mov	r2, r3
 800446e:	f7ff fa17 	bl	80038a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f9ac 	bl	80037d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	08db      	lsrs	r3, r3, #3
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b04      	cmp	r3, #4
 800449e:	d022      	beq.n	80044e6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6919      	ldr	r1, [r3, #16]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044b0:	f7ff f906 	bl	80036c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6919      	ldr	r1, [r3, #16]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f7ff f952 	bl	800376a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d102      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x124>
 80044d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044da:	e000      	b.n	80044de <HAL_ADC_ConfigChannel+0x126>
 80044dc:	2300      	movs	r3, #0
 80044de:	461a      	mov	r2, r3
 80044e0:	f7ff f95e 	bl	80037a0 <LL_ADC_SetOffsetSaturation>
 80044e4:	e17b      	b.n	80047de <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff f90b 	bl	8003708 <LL_ADC_GetOffsetChannel>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x15a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f900 	bl	8003708 <LL_ADC_GetOffsetChannel>
 8004508:	4603      	mov	r3, r0
 800450a:	0e9b      	lsrs	r3, r3, #26
 800450c:	f003 021f 	and.w	r2, r3, #31
 8004510:	e01e      	b.n	8004550 <HAL_ADC_ConfigChannel+0x198>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff f8f5 	bl	8003708 <LL_ADC_GetOffsetChannel>
 800451e:	4603      	mov	r3, r0
 8004520:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004538:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004540:	2320      	movs	r3, #32
 8004542:	e004      	b.n	800454e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x1b0>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0e9b      	lsrs	r3, r3, #26
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	e018      	b.n	800459a <HAL_ADC_ConfigChannel+0x1e2>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800457c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800458c:	2320      	movs	r3, #32
 800458e:	e004      	b.n	800459a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004594:	fab3 f383 	clz	r3, r3
 8004598:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800459a:	429a      	cmp	r2, r3
 800459c:	d106      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff f8c4 	bl	8003734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f8a8 	bl	8003708 <LL_ADC_GetOffsetChannel>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x220>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff f89d 	bl	8003708 <LL_ADC_GetOffsetChannel>
 80045ce:	4603      	mov	r3, r0
 80045d0:	0e9b      	lsrs	r3, r3, #26
 80045d2:	f003 021f 	and.w	r2, r3, #31
 80045d6:	e01e      	b.n	8004616 <HAL_ADC_ConfigChannel+0x25e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f892 	bl	8003708 <LL_ADC_GetOffsetChannel>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80045f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80045fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004606:	2320      	movs	r3, #32
 8004608:	e004      	b.n	8004614 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800460a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <HAL_ADC_ConfigChannel+0x276>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	0e9b      	lsrs	r3, r3, #26
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	e018      	b.n	8004660 <HAL_ADC_ConfigChannel+0x2a8>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004636:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004642:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800464a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004652:	2320      	movs	r3, #32
 8004654:	e004      	b.n	8004660 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004656:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004660:	429a      	cmp	r2, r3
 8004662:	d106      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2200      	movs	r2, #0
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff f861 	bl	8003734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2102      	movs	r1, #2
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff f845 	bl	8003708 <LL_ADC_GetOffsetChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <HAL_ADC_ConfigChannel+0x2e6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2102      	movs	r1, #2
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f83a 	bl	8003708 <LL_ADC_GetOffsetChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	0e9b      	lsrs	r3, r3, #26
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	e01e      	b.n	80046dc <HAL_ADC_ConfigChannel+0x324>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff f82f 	bl	8003708 <LL_ADC_GetOffsetChannel>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80046bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80046c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e004      	b.n	80046da <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80046d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x33c>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0e9b      	lsrs	r3, r3, #26
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	e016      	b.n	8004722 <HAL_ADC_ConfigChannel+0x36a>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004700:	fa93 f3a3 	rbit	r3, r3
 8004704:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800470c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004714:	2320      	movs	r3, #32
 8004716:	e004      	b.n	8004722 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004722:	429a      	cmp	r2, r3
 8004724:	d106      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	2102      	movs	r1, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff f800 	bl	8003734 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2103      	movs	r1, #3
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe ffe4 	bl	8003708 <LL_ADC_GetOffsetChannel>
 8004740:	4603      	mov	r3, r0
 8004742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x3a8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2103      	movs	r1, #3
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe ffd9 	bl	8003708 <LL_ADC_GetOffsetChannel>
 8004756:	4603      	mov	r3, r0
 8004758:	0e9b      	lsrs	r3, r3, #26
 800475a:	f003 021f 	and.w	r2, r3, #31
 800475e:	e017      	b.n	8004790 <HAL_ADC_ConfigChannel+0x3d8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2103      	movs	r1, #3
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe ffce 	bl	8003708 <LL_ADC_GetOffsetChannel>
 800476c:	4603      	mov	r3, r0
 800476e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004772:	fa93 f3a3 	rbit	r3, r3
 8004776:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800477a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800477c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004782:	2320      	movs	r3, #32
 8004784:	e003      	b.n	800478e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004788:	fab3 f383 	clz	r3, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x3f0>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0e9b      	lsrs	r3, r3, #26
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	e011      	b.n	80047cc <HAL_ADC_ConfigChannel+0x414>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80047b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80047ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80047c0:	2320      	movs	r3, #32
 80047c2:	e003      	b.n	80047cc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80047c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d106      	bne.n	80047de <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2103      	movs	r1, #3
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fe ffab 	bl	8003734 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f92a 	bl	8003a3c <LL_ADC_IsEnabled>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f040 8140 	bne.w	8004a70 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f7ff f87b 	bl	80038f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	4a8f      	ldr	r2, [pc, #572]	@ (8004a44 <HAL_ADC_ConfigChannel+0x68c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	f040 8131 	bne.w	8004a70 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x47e>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	0e9b      	lsrs	r3, r3, #26
 8004824:	3301      	adds	r3, #1
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2b09      	cmp	r3, #9
 800482c:	bf94      	ite	ls
 800482e:	2301      	movls	r3, #1
 8004830:	2300      	movhi	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e019      	b.n	800486a <HAL_ADC_ConfigChannel+0x4b2>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004846:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800484e:	2320      	movs	r3, #32
 8004850:	e003      	b.n	800485a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004854:	fab3 f383 	clz	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2b09      	cmp	r3, #9
 8004862:	bf94      	ite	ls
 8004864:	2301      	movls	r3, #1
 8004866:	2300      	movhi	r3, #0
 8004868:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800486a:	2b00      	cmp	r3, #0
 800486c:	d079      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <HAL_ADC_ConfigChannel+0x4d2>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	0e9b      	lsrs	r3, r3, #26
 8004880:	3301      	adds	r3, #1
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004888:	e015      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x4fe>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004892:	fa93 f3a3 	rbit	r3, r3
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800489c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80048a2:	2320      	movs	r3, #32
 80048a4:	e003      	b.n	80048ae <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80048a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	069b      	lsls	r3, r3, #26
 80048b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x51e>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	0e9b      	lsrs	r3, r3, #26
 80048c8:	3301      	adds	r3, #1
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	e017      	b.n	8004906 <HAL_ADC_ConfigChannel+0x54e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80048e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80048e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80048ee:	2320      	movs	r3, #32
 80048f0:	e003      	b.n	80048fa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80048f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	3301      	adds	r3, #1
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	ea42 0103 	orr.w	r1, r2, r3
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <HAL_ADC_ConfigChannel+0x574>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	0e9b      	lsrs	r3, r3, #26
 800491c:	3301      	adds	r3, #1
 800491e:	f003 021f 	and.w	r2, r3, #31
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	051b      	lsls	r3, r3, #20
 800492a:	e018      	b.n	800495e <HAL_ADC_ConfigChannel+0x5a6>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004934:	fa93 f3a3 	rbit	r3, r3
 8004938:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800493a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	e003      	b.n	8004950 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	f003 021f 	and.w	r2, r3, #31
 8004956:	4613      	mov	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800495e:	430b      	orrs	r3, r1
 8004960:	e081      	b.n	8004a66 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496a:	2b00      	cmp	r3, #0
 800496c:	d107      	bne.n	800497e <HAL_ADC_ConfigChannel+0x5c6>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	0e9b      	lsrs	r3, r3, #26
 8004974:	3301      	adds	r3, #1
 8004976:	069b      	lsls	r3, r3, #26
 8004978:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800497c:	e015      	b.n	80049aa <HAL_ADC_ConfigChannel+0x5f2>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004996:	2320      	movs	r3, #32
 8004998:	e003      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	069b      	lsls	r3, r3, #26
 80049a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x612>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	0e9b      	lsrs	r3, r3, #26
 80049bc:	3301      	adds	r3, #1
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2101      	movs	r1, #1
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	e017      	b.n	80049fa <HAL_ADC_ConfigChannel+0x642>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	61fb      	str	r3, [r7, #28]
  return result;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80049e2:	2320      	movs	r3, #32
 80049e4:	e003      	b.n	80049ee <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	ea42 0103 	orr.w	r1, r2, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10d      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x66e>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	0e9b      	lsrs	r3, r3, #26
 8004a10:	3301      	adds	r3, #1
 8004a12:	f003 021f 	and.w	r2, r3, #31
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3b1e      	subs	r3, #30
 8004a1e:	051b      	lsls	r3, r3, #20
 8004a20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a24:	e01e      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x6ac>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	613b      	str	r3, [r7, #16]
  return result;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	e006      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x698>
 8004a42:	bf00      	nop
 8004a44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	f003 021f 	and.w	r2, r3, #31
 8004a56:	4613      	mov	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3b1e      	subs	r3, #30
 8004a5e:	051b      	lsls	r3, r3, #20
 8004a60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a64:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f7fe ff18 	bl	80038a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b3f      	ldr	r3, [pc, #252]	@ (8004b74 <HAL_ADC_ConfigChannel+0x7bc>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d071      	beq.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a7c:	483e      	ldr	r0, [pc, #248]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a7e:	f7fe fe11 	bl	80036a4 <LL_ADC_GetCommonPathInternalCh>
 8004a82:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b7c <HAL_ADC_ConfigChannel+0x7c4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_ADC_ConfigChannel+0x6e2>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3a      	ldr	r2, [pc, #232]	@ (8004b80 <HAL_ADC_ConfigChannel+0x7c8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d127      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d121      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004aae:	d157      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ab4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ab8:	4619      	mov	r1, r3
 8004aba:	482f      	ldr	r0, [pc, #188]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8004abc:	f7fe fddf 	bl	800367e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac0:	4b30      	ldr	r3, [pc, #192]	@ (8004b84 <HAL_ADC_ConfigChannel+0x7cc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	4a30      	ldr	r2, [pc, #192]	@ (8004b88 <HAL_ADC_ConfigChannel+0x7d0>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ada:	e002      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f9      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ae8:	e03a      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a27      	ldr	r2, [pc, #156]	@ (8004b8c <HAL_ADC_ConfigChannel+0x7d4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d113      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a22      	ldr	r2, [pc, #136]	@ (8004b90 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d02a      	beq.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b12:	4619      	mov	r1, r3
 8004b14:	4818      	ldr	r0, [pc, #96]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b16:	f7fe fdb2 	bl	800367e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b1a:	e021      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	@ (8004b94 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d11c      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d116      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a16      	ldr	r2, [pc, #88]	@ (8004b90 <HAL_ADC_ConfigChannel+0x7d8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d011      	beq.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b44:	4619      	mov	r1, r3
 8004b46:	480c      	ldr	r0, [pc, #48]	@ (8004b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b48:	f7fe fd99 	bl	800367e <LL_ADC_SetCommonPathInternalCh>
 8004b4c:	e008      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b68:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	37d8      	adds	r7, #216	@ 0xd8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	80080000 	.word	0x80080000
 8004b78:	50000300 	.word	0x50000300
 8004b7c:	c3210000 	.word	0xc3210000
 8004b80:	90c00010 	.word	0x90c00010
 8004b84:	20000000 	.word	0x20000000
 8004b88:	053e2d63 	.word	0x053e2d63
 8004b8c:	c7520000 	.word	0xc7520000
 8004b90:	50000100 	.word	0x50000100
 8004b94:	cb840000 	.word	0xcb840000

08004b98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe ff47 	bl	8003a3c <LL_ADC_IsEnabled>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d169      	bne.n	8004c88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	4b36      	ldr	r3, [pc, #216]	@ (8004c94 <ADC_Enable+0xfc>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00d      	beq.n	8004bde <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e055      	b.n	8004c8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe ff16 	bl	8003a14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004be8:	482b      	ldr	r0, [pc, #172]	@ (8004c98 <ADC_Enable+0x100>)
 8004bea:	f7fe fd5b 	bl	80036a4 <LL_ADC_GetCommonPathInternalCh>
 8004bee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004bf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d013      	beq.n	8004c20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bf8:	4b28      	ldr	r3, [pc, #160]	@ (8004c9c <ADC_Enable+0x104>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	4a28      	ldr	r2, [pc, #160]	@ (8004ca0 <ADC_Enable+0x108>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c12:	e002      	b.n	8004c1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f9      	bne.n	8004c14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c20:	f7fe fcec 	bl	80035fc <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c26:	e028      	b.n	8004c7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe ff05 	bl	8003a3c <LL_ADC_IsEnabled>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d104      	bne.n	8004c42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fee9 	bl	8003a14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c42:	f7fe fcdb 	bl	80035fc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d914      	bls.n	8004c7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d00d      	beq.n	8004c7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c62:	f043 0210 	orr.w	r2, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e007      	b.n	8004c8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d1cf      	bne.n	8004c28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	8000003f 	.word	0x8000003f
 8004c98:	50000300 	.word	0x50000300
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	053e2d63 	.word	0x053e2d63

08004ca4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d14b      	bne.n	8004d56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d021      	beq.n	8004d1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe fd8d 	bl	80037fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d032      	beq.n	8004d4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d12b      	bne.n	8004d4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11f      	bne.n	8004d4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d1a:	e018      	b.n	8004d4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d111      	bne.n	8004d4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d46:	f043 0201 	orr.w	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7fe f814 	bl	8002d7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d54:	e00e      	b.n	8004d74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fb1e 	bl	80043a4 <HAL_ADC_ErrorCallback>
}
 8004d68:	e004      	b.n	8004d74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff faf6 	bl	800437c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff faf0 	bl	80043a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <LL_ADC_IsEnabled>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <LL_ADC_IsEnabled+0x18>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <LL_ADC_IsEnabled+0x1a>
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d101      	bne.n	8004e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b0a1      	sub	sp, #132	@ 0x84
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e08b      	b.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eb2:	d102      	bne.n	8004eba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004eb4:	4b41      	ldr	r3, [pc, #260]	@ (8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	e001      	b.n	8004ebe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10b      	bne.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e06a      	b.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff ff87 	bl	8004df2 <LL_ADC_REG_IsConversionOngoing>
 8004ee4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ff81 	bl	8004df2 <LL_ADC_REG_IsConversionOngoing>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d14c      	bne.n	8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d149      	bne.n	8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004efc:	4b30      	ldr	r3, [pc, #192]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004efe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d028      	beq.n	8004f5a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f1a:	035b      	lsls	r3, r3, #13
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f28:	f7ff ff50 	bl	8004dcc <LL_ADC_IsEnabled>
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	4823      	ldr	r0, [pc, #140]	@ (8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f30:	f7ff ff4c 	bl	8004dcc <LL_ADC_IsEnabled>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4323      	orrs	r3, r4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d133      	bne.n	8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f44:	f023 030f 	bic.w	r3, r3, #15
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	6811      	ldr	r1, [r2, #0]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	6892      	ldr	r2, [r2, #8]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	431a      	orrs	r2, r3
 8004f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f58:	e024      	b.n	8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f66:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f6a:	f7ff ff2f 	bl	8004dcc <LL_ADC_IsEnabled>
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4812      	ldr	r0, [pc, #72]	@ (8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004f72:	f7ff ff2b 	bl	8004dcc <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	4323      	orrs	r3, r4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d112      	bne.n	8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f86:	f023 030f 	bic.w	r3, r3, #15
 8004f8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f8e:	e009      	b.n	8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f94:	f043 0220 	orr.w	r2, r3, #32
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004fa2:	e000      	b.n	8004fa6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004fae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3784      	adds	r7, #132	@ 0x84
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd90      	pop	{r4, r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	50000100 	.word	0x50000100
 8004fc0:	50000300 	.word	0x50000300

08004fc4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e023      	b.n	800501e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fe f828 	bl	8003040 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <__NVIC_SetPriorityGrouping>:
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005038:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <__NVIC_SetPriorityGrouping+0x44>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800505a:	4a04      	ldr	r2, [pc, #16]	@ (800506c <__NVIC_SetPriorityGrouping+0x44>)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	60d3      	str	r3, [r2, #12]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <__NVIC_GetPriorityGrouping>:
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005074:	4b04      	ldr	r3, [pc, #16]	@ (8005088 <__NVIC_GetPriorityGrouping+0x18>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	f003 0307 	and.w	r3, r3, #7
}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <__NVIC_EnableIRQ>:
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	2b00      	cmp	r3, #0
 800509c:	db0b      	blt.n	80050b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	f003 021f 	and.w	r2, r3, #31
 80050a4:	4907      	ldr	r1, [pc, #28]	@ (80050c4 <__NVIC_EnableIRQ+0x38>)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	2001      	movs	r0, #1
 80050ae:	fa00 f202 	lsl.w	r2, r0, r2
 80050b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	e000e100 	.word	0xe000e100

080050c8 <__NVIC_DisableIRQ>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db12      	blt.n	8005100 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	f003 021f 	and.w	r2, r3, #31
 80050e0:	490a      	ldr	r1, [pc, #40]	@ (800510c <__NVIC_DisableIRQ+0x44>)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2001      	movs	r0, #1
 80050ea:	fa00 f202 	lsl.w	r2, r0, r2
 80050ee:	3320      	adds	r3, #32
 80050f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80050f4:	f3bf 8f4f 	dsb	sy
}
 80050f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050fa:	f3bf 8f6f 	isb	sy
}
 80050fe:	bf00      	nop
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000e100 	.word	0xe000e100

08005110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	6039      	str	r1, [r7, #0]
 800511a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800511c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005120:	2b00      	cmp	r3, #0
 8005122:	db0a      	blt.n	800513a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	490c      	ldr	r1, [pc, #48]	@ (800515c <__NVIC_SetPriority+0x4c>)
 800512a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512e:	0112      	lsls	r2, r2, #4
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	440b      	add	r3, r1
 8005134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005138:	e00a      	b.n	8005150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4908      	ldr	r1, [pc, #32]	@ (8005160 <__NVIC_SetPriority+0x50>)
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	3b04      	subs	r3, #4
 8005148:	0112      	lsls	r2, r2, #4
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	440b      	add	r3, r1
 800514e:	761a      	strb	r2, [r3, #24]
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	e000e100 	.word	0xe000e100
 8005160:	e000ed00 	.word	0xe000ed00

08005164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	@ 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f1c3 0307 	rsb	r3, r3, #7
 800517e:	2b04      	cmp	r3, #4
 8005180:	bf28      	it	cs
 8005182:	2304      	movcs	r3, #4
 8005184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3304      	adds	r3, #4
 800518a:	2b06      	cmp	r3, #6
 800518c:	d902      	bls.n	8005194 <NVIC_EncodePriority+0x30>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3b03      	subs	r3, #3
 8005192:	e000      	b.n	8005196 <NVIC_EncodePriority+0x32>
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005198:	f04f 32ff 	mov.w	r2, #4294967295
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	401a      	ands	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051ac:	f04f 31ff 	mov.w	r1, #4294967295
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	43d9      	mvns	r1, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051bc:	4313      	orrs	r3, r2
         );
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3724      	adds	r7, #36	@ 0x24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051dc:	d301      	bcc.n	80051e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051de:	2301      	movs	r3, #1
 80051e0:	e00f      	b.n	8005202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051e2:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <SysTick_Config+0x40>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ea:	210f      	movs	r1, #15
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	f7ff ff8e 	bl	8005110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <SysTick_Config+0x40>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051fa:	4b04      	ldr	r3, [pc, #16]	@ (800520c <SysTick_Config+0x40>)
 80051fc:	2207      	movs	r2, #7
 80051fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	e000e010 	.word	0xe000e010

08005210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ff05 	bl	8005028 <__NVIC_SetPriorityGrouping>
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	4603      	mov	r3, r0
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005234:	f7ff ff1c 	bl	8005070 <__NVIC_GetPriorityGrouping>
 8005238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	6978      	ldr	r0, [r7, #20]
 8005240:	f7ff ff90 	bl	8005164 <NVIC_EncodePriority>
 8005244:	4602      	mov	r2, r0
 8005246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff5f 	bl	8005110 <__NVIC_SetPriority>
}
 8005252:	bf00      	nop
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	4603      	mov	r3, r0
 8005262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff ff0f 	bl	800508c <__NVIC_EnableIRQ>
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	4603      	mov	r3, r0
 800527e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff ff1f 	bl	80050c8 <__NVIC_DisableIRQ>
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff ff96 	bl	80051cc <SysTick_Config>
 80052a0:	4603      	mov	r3, r0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e08d      	b.n	80053da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b47      	ldr	r3, [pc, #284]	@ (80053e4 <HAL_DMA_Init+0x138>)
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d80f      	bhi.n	80052ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	4b45      	ldr	r3, [pc, #276]	@ (80053e8 <HAL_DMA_Init+0x13c>)
 80052d2:	4413      	add	r3, r2
 80052d4:	4a45      	ldr	r2, [pc, #276]	@ (80053ec <HAL_DMA_Init+0x140>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	091b      	lsrs	r3, r3, #4
 80052dc:	009a      	lsls	r2, r3, #2
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a42      	ldr	r2, [pc, #264]	@ (80053f0 <HAL_DMA_Init+0x144>)
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80052e8:	e00e      	b.n	8005308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	4b40      	ldr	r3, [pc, #256]	@ (80053f4 <HAL_DMA_Init+0x148>)
 80052f2:	4413      	add	r3, r2
 80052f4:	4a3d      	ldr	r2, [pc, #244]	@ (80053ec <HAL_DMA_Init+0x140>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	009a      	lsls	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a3c      	ldr	r2, [pc, #240]	@ (80053f8 <HAL_DMA_Init+0x14c>)
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800532c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa76 	bl	800584c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005368:	d102      	bne.n	8005370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005384:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d010      	beq.n	80053b0 <HAL_DMA_Init+0x104>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d80c      	bhi.n	80053b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa96 	bl	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	e008      	b.n	80053c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40020407 	.word	0x40020407
 80053e8:	bffdfff8 	.word	0xbffdfff8
 80053ec:	cccccccd 	.word	0xcccccccd
 80053f0:	40020000 	.word	0x40020000
 80053f4:	bffdfbf8 	.word	0xbffdfbf8
 80053f8:	40020400 	.word	0x40020400

080053fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_DMA_Start_IT+0x20>
 8005418:	2302      	movs	r3, #2
 800541a:	e066      	b.n	80054ea <HAL_DMA_Start_IT+0xee>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d155      	bne.n	80054dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f9bb 	bl	80057d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 020e 	orr.w	r2, r2, #14
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e00f      	b.n	8005494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0204 	bic.w	r2, r2, #4
 8005482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 020a 	orr.w	r2, r2, #10
 8005492:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e005      	b.n	80054e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054e4:	2302      	movs	r3, #2
 80054e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d005      	beq.n	8005516 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2204      	movs	r2, #4
 800550e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
 8005514:	e037      	b.n	8005586 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 020e 	bic.w	r2, r2, #14
 8005524:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005534:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0201 	bic.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554a:	f003 021f 	and.w	r2, r3, #31
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	2101      	movs	r1, #1
 8005554:	fa01 f202 	lsl.w	r2, r1, r2
 8005558:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005562:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00c      	beq.n	8005586 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005576:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800557a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005584:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d00d      	beq.n	80055d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2204      	movs	r2, #4
 80055c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
 80055d6:	e047      	b.n	8005668 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 020e 	bic.w	r2, r2, #14
 80055e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560c:	f003 021f 	and.w	r2, r3, #31
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	2101      	movs	r1, #1
 8005616:	fa01 f202 	lsl.w	r2, r1, r2
 800561a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005624:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800563c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005646:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
    }
  }
  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2204      	movs	r2, #4
 8005694:	409a      	lsls	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4013      	ands	r3, r2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d026      	beq.n	80056ec <HAL_DMA_IRQHandler+0x7a>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d021      	beq.n	80056ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d107      	bne.n	80056c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0204 	bic.w	r2, r2, #4
 80056c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	f003 021f 	and.w	r2, r3, #31
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	2104      	movs	r1, #4
 80056d4:	fa01 f202 	lsl.w	r2, r1, r2
 80056d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d071      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056ea:	e06c      	b.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	2202      	movs	r2, #2
 80056f6:	409a      	lsls	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02e      	beq.n	800575e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d029      	beq.n	800575e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 020a 	bic.w	r2, r2, #10
 8005726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005734:	f003 021f 	and.w	r2, r3, #31
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	2102      	movs	r1, #2
 800573e:	fa01 f202 	lsl.w	r2, r1, r2
 8005742:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d038      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800575c:	e033      	b.n	80057c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2208      	movs	r2, #8
 8005768:	409a      	lsls	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d02a      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d025      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 020e 	bic.w	r2, r2, #14
 800578a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	f003 021f 	and.w	r2, r3, #31
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	2101      	movs	r1, #1
 800579a:	fa01 f202 	lsl.w	r2, r1, r2
 800579e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
}
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	f003 021f 	and.w	r2, r3, #31
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	2101      	movs	r1, #1
 8005808:	fa01 f202 	lsl.w	r2, r1, r2
 800580c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b10      	cmp	r3, #16
 800581c:	d108      	bne.n	8005830 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800582e:	e007      	b.n	8005840 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	4b16      	ldr	r3, [pc, #88]	@ (80058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800585c:	429a      	cmp	r2, r3
 800585e:	d802      	bhi.n	8005866 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005860:	4b15      	ldr	r3, [pc, #84]	@ (80058b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e001      	b.n	800586a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005866:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005868:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	3b08      	subs	r3, #8
 8005876:	4a12      	ldr	r2, [pc, #72]	@ (80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	009a      	lsls	r2, r3, #2
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	461a      	mov	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a0b      	ldr	r2, [pc, #44]	@ (80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005896:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2201      	movs	r2, #1
 80058a0:	409a      	lsls	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40020407 	.word	0x40020407
 80058b8:	40020800 	.word	0x40020800
 80058bc:	40020820 	.word	0x40020820
 80058c0:	cccccccd 	.word	0xcccccccd
 80058c4:	40020880 	.word	0x40020880

080058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	461a      	mov	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a08      	ldr	r2, [pc, #32]	@ (800590c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80058ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2201      	movs	r2, #1
 80058f6:	409a      	lsls	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	1000823f 	.word	0x1000823f
 800590c:	40020940 	.word	0x40020940

08005910 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01a      	beq.n	800595e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005932:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005936:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005940:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005962:	2b00      	cmp	r3, #0
 8005964:	d022      	beq.n	80059ac <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01a      	beq.n	80059ac <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005984:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800598e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
      }
    }
  }
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80059c2:	e15a      	b.n	8005c7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	2101      	movs	r1, #1
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	4013      	ands	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 814c 	beq.w	8005c74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d005      	beq.n	80059f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d130      	bne.n	8005a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	2203      	movs	r2, #3
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4013      	ands	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	f003 0201 	and.w	r2, r3, #1
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d017      	beq.n	8005a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4013      	ands	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d123      	bne.n	8005ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	08da      	lsrs	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3208      	adds	r2, #8
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	220f      	movs	r2, #15
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43db      	mvns	r3, r3
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	08da      	lsrs	r2, r3, #3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3208      	adds	r2, #8
 8005ae0:	6939      	ldr	r1, [r7, #16]
 8005ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	2203      	movs	r2, #3
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43db      	mvns	r3, r3
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4013      	ands	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f003 0203 	and.w	r2, r3, #3
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80a6 	beq.w	8005c74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b28:	4b5b      	ldr	r3, [pc, #364]	@ (8005c98 <HAL_GPIO_Init+0x2e4>)
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2c:	4a5a      	ldr	r2, [pc, #360]	@ (8005c98 <HAL_GPIO_Init+0x2e4>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b34:	4b58      	ldr	r3, [pc, #352]	@ (8005c98 <HAL_GPIO_Init+0x2e4>)
 8005b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b40:	4a56      	ldr	r2, [pc, #344]	@ (8005c9c <HAL_GPIO_Init+0x2e8>)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	3302      	adds	r3, #2
 8005b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	220f      	movs	r2, #15
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4013      	ands	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b6a:	d01f      	beq.n	8005bac <HAL_GPIO_Init+0x1f8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8005ca0 <HAL_GPIO_Init+0x2ec>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d019      	beq.n	8005ba8 <HAL_GPIO_Init+0x1f4>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a4b      	ldr	r2, [pc, #300]	@ (8005ca4 <HAL_GPIO_Init+0x2f0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <HAL_GPIO_Init+0x1f0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8005ca8 <HAL_GPIO_Init+0x2f4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00d      	beq.n	8005ba0 <HAL_GPIO_Init+0x1ec>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a49      	ldr	r2, [pc, #292]	@ (8005cac <HAL_GPIO_Init+0x2f8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <HAL_GPIO_Init+0x1e8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a48      	ldr	r2, [pc, #288]	@ (8005cb0 <HAL_GPIO_Init+0x2fc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <HAL_GPIO_Init+0x1e4>
 8005b94:	2305      	movs	r3, #5
 8005b96:	e00a      	b.n	8005bae <HAL_GPIO_Init+0x1fa>
 8005b98:	2306      	movs	r3, #6
 8005b9a:	e008      	b.n	8005bae <HAL_GPIO_Init+0x1fa>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	e006      	b.n	8005bae <HAL_GPIO_Init+0x1fa>
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e004      	b.n	8005bae <HAL_GPIO_Init+0x1fa>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e002      	b.n	8005bae <HAL_GPIO_Init+0x1fa>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <HAL_GPIO_Init+0x1fa>
 8005bac:	2300      	movs	r3, #0
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	f002 0203 	and.w	r2, r2, #3
 8005bb4:	0092      	lsls	r2, r2, #2
 8005bb6:	4093      	lsls	r3, r2
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bbe:	4937      	ldr	r1, [pc, #220]	@ (8005c9c <HAL_GPIO_Init+0x2e8>)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	089b      	lsrs	r3, r3, #2
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bcc:	4b39      	ldr	r3, [pc, #228]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005bf0:	4a30      	ldr	r2, [pc, #192]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4013      	ands	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c1a:	4a26      	ldr	r2, [pc, #152]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005c20:	4b24      	ldr	r3, [pc, #144]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c44:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c6e:	4a11      	ldr	r2, [pc, #68]	@ (8005cb4 <HAL_GPIO_Init+0x300>)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3301      	adds	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f47f ae9d 	bne.w	80059c4 <HAL_GPIO_Init+0x10>
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	48000400 	.word	0x48000400
 8005ca4:	48000800 	.word	0x48000800
 8005ca8:	48000c00 	.word	0x48000c00
 8005cac:	48001000 	.word	0x48001000
 8005cb0:	48001400 	.word	0x48001400
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	887b      	ldrh	r3, [r7, #2]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e001      	b.n	8005cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cf8:	787b      	ldrb	r3, [r7, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d04:	e002      	b.n	8005d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	041a      	lsls	r2, r3, #16
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	43d9      	mvns	r1, r3
 8005d36:	887b      	ldrh	r3, [r7, #2]
 8005d38:	400b      	ands	r3, r1
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	619a      	str	r2, [r3, #24]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d56:	4b08      	ldr	r3, [pc, #32]	@ (8005d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d006      	beq.n	8005d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d62:	4a05      	ldr	r2, [pc, #20]	@ (8005d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d64:	88fb      	ldrh	r3, [r7, #6]
 8005d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d68:	88fb      	ldrh	r3, [r7, #6]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd f810 	bl	8002d90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40010400 	.word	0x40010400

08005d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d141      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d96:	d131      	bne.n	8005dfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d98:	4b47      	ldr	r3, [pc, #284]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9e:	4a46      	ldr	r2, [pc, #280]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005da8:	4b43      	ldr	r3, [pc, #268]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005db0:	4a41      	ldr	r2, [pc, #260]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005db8:	4b40      	ldr	r3, [pc, #256]	@ (8005ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2232      	movs	r2, #50	@ 0x32
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	0c9b      	lsrs	r3, r3, #18
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dce:	e002      	b.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dd6:	4b38      	ldr	r3, [pc, #224]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de2:	d102      	bne.n	8005dea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f2      	bne.n	8005dd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dea:	4b33      	ldr	r3, [pc, #204]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df6:	d158      	bne.n	8005eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e057      	b.n	8005eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e02:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e0c:	e04d      	b.n	8005eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e14:	d141      	bne.n	8005e9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e16:	4b28      	ldr	r3, [pc, #160]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e22:	d131      	bne.n	8005e88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e24:	4b24      	ldr	r3, [pc, #144]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e2a:	4a23      	ldr	r2, [pc, #140]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e34:	4b20      	ldr	r3, [pc, #128]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e44:	4b1d      	ldr	r3, [pc, #116]	@ (8005ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2232      	movs	r2, #50	@ 0x32
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	0c9b      	lsrs	r3, r3, #18
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e5a:	e002      	b.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6e:	d102      	bne.n	8005e76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f2      	bne.n	8005e5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e76:	4b10      	ldr	r3, [pc, #64]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e82:	d112      	bne.n	8005eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e011      	b.n	8005eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e88:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e98:	e007      	b.n	8005eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e9a:	4b07      	ldr	r3, [pc, #28]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ea2:	4a05      	ldr	r2, [pc, #20]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ea8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40007000 	.word	0x40007000
 8005ebc:	20000000 	.word	0x20000000
 8005ec0:	431bde83 	.word	0x431bde83

08005ec4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a04      	ldr	r2, [pc, #16]	@ (8005ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005ece:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ed2:	6093      	str	r3, [r2, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40007000 	.word	0x40007000

08005ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e2fe      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d075      	beq.n	8005fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f02:	4b97      	ldr	r3, [pc, #604]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f0c:	4b94      	ldr	r3, [pc, #592]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d102      	bne.n	8005f22 <HAL_RCC_OscConfig+0x3e>
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d002      	beq.n	8005f28 <HAL_RCC_OscConfig+0x44>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d10b      	bne.n	8005f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f28:	4b8d      	ldr	r3, [pc, #564]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d05b      	beq.n	8005fec <HAL_RCC_OscConfig+0x108>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d157      	bne.n	8005fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e2d9      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f48:	d106      	bne.n	8005f58 <HAL_RCC_OscConfig+0x74>
 8005f4a:	4b85      	ldr	r3, [pc, #532]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a84      	ldr	r2, [pc, #528]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e01d      	b.n	8005f94 <HAL_RCC_OscConfig+0xb0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCC_OscConfig+0x98>
 8005f62:	4b7f      	ldr	r3, [pc, #508]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a7e      	ldr	r2, [pc, #504]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a7b      	ldr	r2, [pc, #492]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e00b      	b.n	8005f94 <HAL_RCC_OscConfig+0xb0>
 8005f7c:	4b78      	ldr	r3, [pc, #480]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a77      	ldr	r2, [pc, #476]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	4b75      	ldr	r3, [pc, #468]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a74      	ldr	r2, [pc, #464]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d013      	beq.n	8005fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fd fb2e 	bl	80035fc <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa4:	f7fd fb2a 	bl	80035fc <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	@ 0x64
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e29e      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCC_OscConfig+0xc0>
 8005fc2:	e014      	b.n	8005fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fd fb1a 	bl	80035fc <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fcc:	f7fd fb16 	bl	80035fc <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b64      	cmp	r3, #100	@ 0x64
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e28a      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fde:	4b60      	ldr	r3, [pc, #384]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0xe8>
 8005fea:	e000      	b.n	8005fee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d075      	beq.n	80060e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffa:	4b59      	ldr	r3, [pc, #356]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006004:	4b56      	ldr	r3, [pc, #344]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d102      	bne.n	800601a <HAL_RCC_OscConfig+0x136>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d002      	beq.n	8006020 <HAL_RCC_OscConfig+0x13c>
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d11f      	bne.n	8006060 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006020:	4b4f      	ldr	r3, [pc, #316]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_RCC_OscConfig+0x154>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e25d      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006038:	4b49      	ldr	r3, [pc, #292]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	4946      	ldr	r1, [pc, #280]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800604c:	4b45      	ldr	r3, [pc, #276]	@ (8006164 <HAL_RCC_OscConfig+0x280>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f7fd fa87 	bl	8003564 <HAL_InitTick>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d043      	beq.n	80060e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e249      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d023      	beq.n	80060b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006068:	4b3d      	ldr	r3, [pc, #244]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a3c      	ldr	r2, [pc, #240]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 800606e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fd fac2 	bl	80035fc <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800607c:	f7fd fabe 	bl	80035fc <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e232      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800608e:	4b34      	ldr	r3, [pc, #208]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609a:	4b31      	ldr	r3, [pc, #196]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	492d      	ldr	r1, [pc, #180]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	604b      	str	r3, [r1, #4]
 80060ae:	e01a      	b.n	80060e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2a      	ldr	r2, [pc, #168]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 80060b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fd fa9e 	bl	80035fc <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c4:	f7fd fa9a 	bl	80035fc <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e20e      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060d6:	4b22      	ldr	r3, [pc, #136]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x1e0>
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d041      	beq.n	8006176 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01c      	beq.n	8006134 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060fa:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 80060fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006100:	4a17      	ldr	r2, [pc, #92]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610a:	f7fd fa77 	bl	80035fc <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006112:	f7fd fa73 	bl	80035fc <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e1e7      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006124:	4b0e      	ldr	r3, [pc, #56]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8006126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0ef      	beq.n	8006112 <HAL_RCC_OscConfig+0x22e>
 8006132:	e020      	b.n	8006176 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006134:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 8006136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800613a:	4a09      	ldr	r2, [pc, #36]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fd fa5a 	bl	80035fc <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800614a:	e00d      	b.n	8006168 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800614c:	f7fd fa56 	bl	80035fc <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d906      	bls.n	8006168 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e1ca      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
 8006164:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006168:	4b8c      	ldr	r3, [pc, #560]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800616a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1ea      	bne.n	800614c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 80a6 	beq.w	80062d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006184:	2300      	movs	r3, #0
 8006186:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006188:	4b84      	ldr	r3, [pc, #528]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800618a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_OscConfig+0x2b4>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_RCC_OscConfig+0x2b6>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619e:	4b7f      	ldr	r3, [pc, #508]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80061a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a2:	4a7e      	ldr	r2, [pc, #504]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80061a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061aa:	4b7c      	ldr	r3, [pc, #496]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80061ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061b6:	2301      	movs	r3, #1
 80061b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ba:	4b79      	ldr	r3, [pc, #484]	@ (80063a0 <HAL_RCC_OscConfig+0x4bc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d118      	bne.n	80061f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c6:	4b76      	ldr	r3, [pc, #472]	@ (80063a0 <HAL_RCC_OscConfig+0x4bc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a75      	ldr	r2, [pc, #468]	@ (80063a0 <HAL_RCC_OscConfig+0x4bc>)
 80061cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061d2:	f7fd fa13 	bl	80035fc <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061da:	f7fd fa0f 	bl	80035fc <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e183      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ec:	4b6c      	ldr	r3, [pc, #432]	@ (80063a0 <HAL_RCC_OscConfig+0x4bc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d108      	bne.n	8006212 <HAL_RCC_OscConfig+0x32e>
 8006200:	4b66      	ldr	r3, [pc, #408]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006206:	4a65      	ldr	r2, [pc, #404]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006210:	e024      	b.n	800625c <HAL_RCC_OscConfig+0x378>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b05      	cmp	r3, #5
 8006218:	d110      	bne.n	800623c <HAL_RCC_OscConfig+0x358>
 800621a:	4b60      	ldr	r3, [pc, #384]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006220:	4a5e      	ldr	r2, [pc, #376]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006222:	f043 0304 	orr.w	r3, r3, #4
 8006226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800622a:	4b5c      	ldr	r3, [pc, #368]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006230:	4a5a      	ldr	r2, [pc, #360]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800623a:	e00f      	b.n	800625c <HAL_RCC_OscConfig+0x378>
 800623c:	4b57      	ldr	r3, [pc, #348]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006242:	4a56      	ldr	r2, [pc, #344]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800624c:	4b53      	ldr	r3, [pc, #332]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006252:	4a52      	ldr	r2, [pc, #328]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006254:	f023 0304 	bic.w	r3, r3, #4
 8006258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d016      	beq.n	8006292 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006264:	f7fd f9ca 	bl	80035fc <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626a:	e00a      	b.n	8006282 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626c:	f7fd f9c6 	bl	80035fc <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e138      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006282:	4b46      	ldr	r3, [pc, #280]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0ed      	beq.n	800626c <HAL_RCC_OscConfig+0x388>
 8006290:	e015      	b.n	80062be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fd f9b3 	bl	80035fc <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fd f9af 	bl	80035fc <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e121      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062b0:	4b3a      	ldr	r3, [pc, #232]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1ed      	bne.n	800629a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062be:	7ffb      	ldrb	r3, [r7, #31]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d105      	bne.n	80062d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c4:	4b35      	ldr	r3, [pc, #212]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c8:	4a34      	ldr	r2, [pc, #208]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80062ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d03c      	beq.n	8006356 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01c      	beq.n	800631e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062e4:	4b2d      	ldr	r3, [pc, #180]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80062e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062ea:	4a2c      	ldr	r2, [pc, #176]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f4:	f7fd f982 	bl	80035fc <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062fc:	f7fd f97e 	bl	80035fc <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e0f2      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800630e:	4b23      	ldr	r3, [pc, #140]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0ef      	beq.n	80062fc <HAL_RCC_OscConfig+0x418>
 800631c:	e01b      	b.n	8006356 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800631e:	4b1f      	ldr	r3, [pc, #124]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006324:	4a1d      	ldr	r2, [pc, #116]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632e:	f7fd f965 	bl	80035fc <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006336:	f7fd f961 	bl	80035fc <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e0d5      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006348:	4b14      	ldr	r3, [pc, #80]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800634a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ef      	bne.n	8006336 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 80c9 	beq.w	80064f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006360:	4b0e      	ldr	r3, [pc, #56]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 030c 	and.w	r3, r3, #12
 8006368:	2b0c      	cmp	r3, #12
 800636a:	f000 8083 	beq.w	8006474 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d15e      	bne.n	8006434 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006376:	4b09      	ldr	r3, [pc, #36]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a08      	ldr	r2, [pc, #32]	@ (800639c <HAL_RCC_OscConfig+0x4b8>)
 800637c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006382:	f7fd f93b 	bl	80035fc <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006388:	e00c      	b.n	80063a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638a:	f7fd f937 	bl	80035fc <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d905      	bls.n	80063a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e0ab      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
 800639c:	40021000 	.word	0x40021000
 80063a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063a4:	4b55      	ldr	r3, [pc, #340]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ec      	bne.n	800638a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063b0:	4b52      	ldr	r3, [pc, #328]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	4b52      	ldr	r3, [pc, #328]	@ (8006500 <HAL_RCC_OscConfig+0x61c>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6a11      	ldr	r1, [r2, #32]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063c0:	3a01      	subs	r2, #1
 80063c2:	0112      	lsls	r2, r2, #4
 80063c4:	4311      	orrs	r1, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80063ca:	0212      	lsls	r2, r2, #8
 80063cc:	4311      	orrs	r1, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063d2:	0852      	lsrs	r2, r2, #1
 80063d4:	3a01      	subs	r2, #1
 80063d6:	0552      	lsls	r2, r2, #21
 80063d8:	4311      	orrs	r1, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063de:	0852      	lsrs	r2, r2, #1
 80063e0:	3a01      	subs	r2, #1
 80063e2:	0652      	lsls	r2, r2, #25
 80063e4:	4311      	orrs	r1, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063ea:	06d2      	lsls	r2, r2, #27
 80063ec:	430a      	orrs	r2, r1
 80063ee:	4943      	ldr	r1, [pc, #268]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063f4:	4b41      	ldr	r3, [pc, #260]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a40      	ldr	r2, [pc, #256]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 80063fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006400:	4b3e      	ldr	r3, [pc, #248]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4a3d      	ldr	r2, [pc, #244]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 8006406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800640a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fd f8f6 	bl	80035fc <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006414:	f7fd f8f2 	bl	80035fc <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e066      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006426:	4b35      	ldr	r3, [pc, #212]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x530>
 8006432:	e05e      	b.n	80064f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006434:	4b31      	ldr	r3, [pc, #196]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a30      	ldr	r2, [pc, #192]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 800643a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800643e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fd f8dc 	bl	80035fc <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006448:	f7fd f8d8 	bl	80035fc <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e04c      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800645a:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f0      	bne.n	8006448 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006466:	4b25      	ldr	r3, [pc, #148]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	4924      	ldr	r1, [pc, #144]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 800646c:	4b25      	ldr	r3, [pc, #148]	@ (8006504 <HAL_RCC_OscConfig+0x620>)
 800646e:	4013      	ands	r3, r2
 8006470:	60cb      	str	r3, [r1, #12]
 8006472:	e03e      	b.n	80064f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e039      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006480:	4b1e      	ldr	r3, [pc, #120]	@ (80064fc <HAL_RCC_OscConfig+0x618>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0203 	and.w	r2, r3, #3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	429a      	cmp	r2, r3
 8006492:	d12c      	bne.n	80064ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	3b01      	subs	r3, #1
 80064a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d123      	bne.n	80064ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d11b      	bne.n	80064ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d113      	bne.n	80064ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	3b01      	subs	r3, #1
 80064d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d109      	bne.n	80064ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e4:	085b      	lsrs	r3, r3, #1
 80064e6:	3b01      	subs	r3, #1
 80064e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000
 8006500:	019f800c 	.word	0x019f800c
 8006504:	feeefffc 	.word	0xfeeefffc

08006508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e11e      	b.n	800675e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006520:	4b91      	ldr	r3, [pc, #580]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d910      	bls.n	8006550 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b8e      	ldr	r3, [pc, #568]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 020f 	bic.w	r2, r3, #15
 8006536:	498c      	ldr	r1, [pc, #560]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653e:	4b8a      	ldr	r3, [pc, #552]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e106      	b.n	800675e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d073      	beq.n	8006644 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d129      	bne.n	80065b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006564:	4b81      	ldr	r3, [pc, #516]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0f4      	b.n	800675e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006574:	f000 f99e 	bl	80068b4 <RCC_GetSysClockFreqFromPLLSource>
 8006578:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4a7c      	ldr	r2, [pc, #496]	@ (8006770 <HAL_RCC_ClockConfig+0x268>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d93f      	bls.n	8006602 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006582:	4b7a      	ldr	r3, [pc, #488]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006596:	2b00      	cmp	r3, #0
 8006598:	d033      	beq.n	8006602 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d12f      	bne.n	8006602 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065a2:	4b72      	ldr	r3, [pc, #456]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065aa:	4a70      	ldr	r2, [pc, #448]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80065ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80065b2:	2380      	movs	r3, #128	@ 0x80
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	e024      	b.n	8006602 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d107      	bne.n	80065d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065c0:	4b6a      	ldr	r3, [pc, #424]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d109      	bne.n	80065e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e0c6      	b.n	800675e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065d0:	4b66      	ldr	r3, [pc, #408]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0be      	b.n	800675e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065e0:	f000 f8ce 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 80065e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4a61      	ldr	r2, [pc, #388]	@ (8006770 <HAL_RCC_ClockConfig+0x268>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d909      	bls.n	8006602 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065ee:	4b5f      	ldr	r3, [pc, #380]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065f6:	4a5d      	ldr	r2, [pc, #372]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80065f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006602:	4b5a      	ldr	r3, [pc, #360]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f023 0203 	bic.w	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4957      	ldr	r1, [pc, #348]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006610:	4313      	orrs	r3, r2
 8006612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006614:	f7fc fff2 	bl	80035fc <HAL_GetTick>
 8006618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661a:	e00a      	b.n	8006632 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800661c:	f7fc ffee 	bl	80035fc <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e095      	b.n	800675e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006632:	4b4e      	ldr	r3, [pc, #312]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 020c 	and.w	r2, r3, #12
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	429a      	cmp	r2, r3
 8006642:	d1eb      	bne.n	800661c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d023      	beq.n	8006698 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800665c:	4b43      	ldr	r3, [pc, #268]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	4a42      	ldr	r2, [pc, #264]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006662:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006666:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006674:	4b3d      	ldr	r3, [pc, #244]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800667c:	4a3b      	ldr	r2, [pc, #236]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 800667e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006682:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006684:	4b39      	ldr	r3, [pc, #228]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4936      	ldr	r1, [pc, #216]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
 8006696:	e008      	b.n	80066aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b80      	cmp	r3, #128	@ 0x80
 800669c:	d105      	bne.n	80066aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800669e:	4b33      	ldr	r3, [pc, #204]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4a32      	ldr	r2, [pc, #200]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 80066a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d21d      	bcs.n	80066f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f023 020f 	bic.w	r2, r3, #15
 80066c0:	4929      	ldr	r1, [pc, #164]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066c8:	f7fc ff98 	bl	80035fc <HAL_GetTick>
 80066cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ce:	e00a      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d0:	f7fc ff94 	bl	80035fc <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066de:	4293      	cmp	r3, r2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e03b      	b.n	800675e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e6:	4b20      	ldr	r3, [pc, #128]	@ (8006768 <HAL_RCC_ClockConfig+0x260>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d1ed      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006700:	4b1a      	ldr	r3, [pc, #104]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4917      	ldr	r1, [pc, #92]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 800670e:	4313      	orrs	r3, r2
 8006710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800671e:	4b13      	ldr	r3, [pc, #76]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	490f      	ldr	r1, [pc, #60]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 800672e:	4313      	orrs	r3, r2
 8006730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006732:	f000 f825 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 8006736:	4602      	mov	r2, r0
 8006738:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <HAL_RCC_ClockConfig+0x264>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	091b      	lsrs	r3, r3, #4
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	490c      	ldr	r1, [pc, #48]	@ (8006774 <HAL_RCC_ClockConfig+0x26c>)
 8006744:	5ccb      	ldrb	r3, [r1, r3]
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	4a0a      	ldr	r2, [pc, #40]	@ (8006778 <HAL_RCC_ClockConfig+0x270>)
 8006750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006752:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <HAL_RCC_ClockConfig+0x274>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7fc ff04 	bl	8003564 <HAL_InitTick>
 800675c:	4603      	mov	r3, r0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40022000 	.word	0x40022000
 800676c:	40021000 	.word	0x40021000
 8006770:	04c4b400 	.word	0x04c4b400
 8006774:	0800a864 	.word	0x0800a864
 8006778:	20000000 	.word	0x20000000
 800677c:	20000004 	.word	0x20000004

08006780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006786:	4b2c      	ldr	r3, [pc, #176]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
 800678e:	2b04      	cmp	r3, #4
 8006790:	d102      	bne.n	8006798 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006792:	4b2a      	ldr	r3, [pc, #168]	@ (800683c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	e047      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006798:	4b27      	ldr	r3, [pc, #156]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d102      	bne.n	80067aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067a4:	4b26      	ldr	r3, [pc, #152]	@ (8006840 <HAL_RCC_GetSysClockFreq+0xc0>)
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	e03e      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80067aa:	4b23      	ldr	r3, [pc, #140]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
 80067b2:	2b0c      	cmp	r3, #12
 80067b4:	d136      	bne.n	8006824 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067b6:	4b20      	ldr	r3, [pc, #128]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	091b      	lsrs	r3, r3, #4
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	3301      	adds	r3, #1
 80067cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d10c      	bne.n	80067ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <HAL_RCC_GetSysClockFreq+0xc0>)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	4a16      	ldr	r2, [pc, #88]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067de:	68d2      	ldr	r2, [r2, #12]
 80067e0:	0a12      	lsrs	r2, r2, #8
 80067e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	617b      	str	r3, [r7, #20]
      break;
 80067ec:	e00c      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067ee:	4a13      	ldr	r2, [pc, #76]	@ (800683c <HAL_RCC_GetSysClockFreq+0xbc>)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f6:	4a10      	ldr	r2, [pc, #64]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f8:	68d2      	ldr	r2, [r2, #12]
 80067fa:	0a12      	lsrs	r2, r2, #8
 80067fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006800:	fb02 f303 	mul.w	r3, r2, r3
 8006804:	617b      	str	r3, [r7, #20]
      break;
 8006806:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006808:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	0e5b      	lsrs	r3, r3, #25
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	3301      	adds	r3, #1
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e001      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006828:	693b      	ldr	r3, [r7, #16]
}
 800682a:	4618      	mov	r0, r3
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40021000 	.word	0x40021000
 800683c:	00f42400 	.word	0x00f42400
 8006840:	007a1200 	.word	0x007a1200

08006844 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	@ (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000000 	.word	0x20000000

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006860:	f7ff fff0 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006864:	4602      	mov	r2, r0
 8006866:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4904      	ldr	r1, [pc, #16]	@ (8006884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006872:	5ccb      	ldrb	r3, [r1, r3]
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800687c:	4618      	mov	r0, r3
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40021000 	.word	0x40021000
 8006884:	0800a874 	.word	0x0800a874

08006888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800688c:	f7ff ffda 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006890:	4602      	mov	r2, r0
 8006892:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	0adb      	lsrs	r3, r3, #11
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	4904      	ldr	r1, [pc, #16]	@ (80068b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800689e:	5ccb      	ldrb	r3, [r1, r3]
 80068a0:	f003 031f 	and.w	r3, r3, #31
 80068a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40021000 	.word	0x40021000
 80068b0:	0800a874 	.word	0x0800a874

080068b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d10c      	bne.n	80068f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068d8:	4a17      	ldr	r2, [pc, #92]	@ (8006938 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	4a14      	ldr	r2, [pc, #80]	@ (8006934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068e2:	68d2      	ldr	r2, [r2, #12]
 80068e4:	0a12      	lsrs	r2, r2, #8
 80068e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80068ea:	fb02 f303 	mul.w	r3, r2, r3
 80068ee:	617b      	str	r3, [r7, #20]
    break;
 80068f0:	e00c      	b.n	800690c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068f2:	4a12      	ldr	r2, [pc, #72]	@ (800693c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068fc:	68d2      	ldr	r2, [r2, #12]
 80068fe:	0a12      	lsrs	r2, r2, #8
 8006900:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006904:	fb02 f303 	mul.w	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]
    break;
 800690a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800690c:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	0e5b      	lsrs	r3, r3, #25
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	3301      	adds	r3, #1
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006926:	687b      	ldr	r3, [r7, #4]
}
 8006928:	4618      	mov	r0, r3
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	40021000 	.word	0x40021000
 8006938:	007a1200 	.word	0x007a1200
 800693c:	00f42400 	.word	0x00f42400

08006940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006948:	2300      	movs	r3, #0
 800694a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800694c:	2300      	movs	r3, #0
 800694e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8098 	beq.w	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800695e:	2300      	movs	r3, #0
 8006960:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006962:	4b43      	ldr	r3, [pc, #268]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800696e:	4b40      	ldr	r3, [pc, #256]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006972:	4a3f      	ldr	r2, [pc, #252]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006978:	6593      	str	r3, [r2, #88]	@ 0x58
 800697a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800697c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006986:	2301      	movs	r3, #1
 8006988:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800698a:	4b3a      	ldr	r3, [pc, #232]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a39      	ldr	r2, [pc, #228]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006994:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006996:	f7fc fe31 	bl	80035fc <HAL_GetTick>
 800699a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800699c:	e009      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800699e:	f7fc fe2d 	bl	80035fc <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d902      	bls.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	74fb      	strb	r3, [r7, #19]
        break;
 80069b0:	e005      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069b2:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0ef      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80069be:	7cfb      	ldrb	r3, [r7, #19]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d159      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01e      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d019      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069e0:	4b23      	ldr	r3, [pc, #140]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ec:	4b20      	ldr	r3, [pc, #128]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a02:	4a1b      	ldr	r2, [pc, #108]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a0c:	4a18      	ldr	r2, [pc, #96]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1e:	f7fc fded 	bl	80035fc <HAL_GetTick>
 8006a22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a24:	e00b      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a26:	f7fc fde9 	bl	80035fc <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d902      	bls.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	74fb      	strb	r3, [r7, #19]
            break;
 8006a3c:	e006      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0ec      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a52:	4b07      	ldr	r3, [pc, #28]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a60:	4903      	ldr	r1, [pc, #12]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006a68:	e008      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a6a:	7cfb      	ldrb	r3, [r7, #19]
 8006a6c:	74bb      	strb	r3, [r7, #18]
 8006a6e:	e005      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a70:	40021000 	.word	0x40021000
 8006a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a7c:	7c7b      	ldrb	r3, [r7, #17]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d105      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a82:	4ba6      	ldr	r3, [pc, #664]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a86:	4aa5      	ldr	r2, [pc, #660]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a9a:	4ba0      	ldr	r3, [pc, #640]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa0:	f023 0203 	bic.w	r2, r3, #3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	499c      	ldr	r1, [pc, #624]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006abc:	4b97      	ldr	r3, [pc, #604]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac2:	f023 020c 	bic.w	r2, r3, #12
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	4994      	ldr	r1, [pc, #592]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ade:	4b8f      	ldr	r3, [pc, #572]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	498b      	ldr	r1, [pc, #556]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b00:	4b86      	ldr	r3, [pc, #536]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	4983      	ldr	r1, [pc, #524]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b22:	4b7e      	ldr	r3, [pc, #504]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	497a      	ldr	r1, [pc, #488]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b44:	4b75      	ldr	r3, [pc, #468]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	4972      	ldr	r1, [pc, #456]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b66:	4b6d      	ldr	r3, [pc, #436]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	4969      	ldr	r1, [pc, #420]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b88:	4b64      	ldr	r3, [pc, #400]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	4961      	ldr	r1, [pc, #388]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006baa:	4b5c      	ldr	r3, [pc, #368]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb8:	4958      	ldr	r1, [pc, #352]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d015      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bcc:	4b53      	ldr	r3, [pc, #332]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bda:	4950      	ldr	r1, [pc, #320]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bea:	d105      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bec:	4b4b      	ldr	r3, [pc, #300]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d015      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c04:	4b45      	ldr	r3, [pc, #276]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c12:	4942      	ldr	r1, [pc, #264]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c22:	d105      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c24:	4b3d      	ldr	r3, [pc, #244]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a3c      	ldr	r2, [pc, #240]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d015      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c3c:	4b37      	ldr	r3, [pc, #220]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4a:	4934      	ldr	r1, [pc, #208]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c5a:	d105      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4a2e      	ldr	r2, [pc, #184]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d015      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c74:	4b29      	ldr	r3, [pc, #164]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c82:	4926      	ldr	r1, [pc, #152]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c92:	d105      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c94:	4b21      	ldr	r3, [pc, #132]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	4a20      	ldr	r2, [pc, #128]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d015      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cac:	4b1b      	ldr	r3, [pc, #108]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cba:	4918      	ldr	r1, [pc, #96]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cca:	d105      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ccc:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4a12      	ldr	r2, [pc, #72]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d015      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf2:	490a      	ldr	r1, [pc, #40]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d02:	d105      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d04:	4b05      	ldr	r3, [pc, #20]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4a04      	ldr	r2, [pc, #16]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d10:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000

08006d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e09d      	b.n	8006e6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d108      	bne.n	8006d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d42:	d009      	beq.n	8006d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	61da      	str	r2, [r3, #28]
 8006d4a:	e005      	b.n	8006d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fc f984 	bl	8003080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d98:	d902      	bls.n	8006da0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e002      	b.n	8006da6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006dae:	d007      	beq.n	8006dc0 <HAL_SPI_Init+0xa0>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006db8:	d002      	beq.n	8006dc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e02:	ea42 0103 	orr.w	r1, r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	f003 0204 	and.w	r2, r3, #4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e3c:	ea42 0103 	orr.w	r1, r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b08a      	sub	sp, #40	@ 0x28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e84:	2301      	movs	r3, #1
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x26>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e20a      	b.n	80072b2 <HAL_SPI_TransmitReceive+0x43c>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea4:	f7fc fbaa 	bl	80035fc <HAL_GetTick>
 8006ea8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006eb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006eb8:	887b      	ldrh	r3, [r7, #2]
 8006eba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ebc:	887b      	ldrh	r3, [r7, #2]
 8006ebe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ec0:	7efb      	ldrb	r3, [r7, #27]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x6e>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ecc:	d106      	bne.n	8006edc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <HAL_SPI_TransmitReceive+0x66>
 8006ed6:	7efb      	ldrb	r3, [r7, #27]
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d003      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006ee2:	e1e0      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <HAL_SPI_TransmitReceive+0x80>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <HAL_SPI_TransmitReceive+0x80>
 8006ef0:	887b      	ldrh	r3, [r7, #2]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006efc:	e1d3      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d003      	beq.n	8006f12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	887a      	ldrh	r2, [r7, #2]
 8006f22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	887a      	ldrh	r2, [r7, #2]
 8006f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	887a      	ldrh	r2, [r7, #2]
 8006f3e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f54:	d802      	bhi.n	8006f5c <HAL_SPI_TransmitReceive+0xe6>
 8006f56:	8a3b      	ldrh	r3, [r7, #16]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d908      	bls.n	8006f6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f6a:	605a      	str	r2, [r3, #4]
 8006f6c:	e007      	b.n	8006f7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f88:	2b40      	cmp	r3, #64	@ 0x40
 8006f8a:	d007      	beq.n	8006f9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fa4:	f240 8081 	bls.w	80070aa <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x140>
 8006fb0:	8a7b      	ldrh	r3, [r7, #18]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d16d      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	881a      	ldrh	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	1c9a      	adds	r2, r3, #2
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fda:	e05a      	b.n	8007092 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d11b      	bne.n	8007022 <HAL_SPI_TransmitReceive+0x1ac>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d016      	beq.n	8007022 <HAL_SPI_TransmitReceive+0x1ac>
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d113      	bne.n	8007022 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	881a      	ldrh	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d11c      	bne.n	800706a <HAL_SPI_TransmitReceive+0x1f4>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d016      	beq.n	800706a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	b292      	uxth	r2, r2
 8007048:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704e:	1c9a      	adds	r2, r3, #2
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007066:	2301      	movs	r3, #1
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800706a:	f7fc fac7 	bl	80035fc <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007076:	429a      	cmp	r2, r3
 8007078:	d80b      	bhi.n	8007092 <HAL_SPI_TransmitReceive+0x21c>
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d007      	beq.n	8007092 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007090:	e109      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d19f      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x166>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d199      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x166>
 80070a8:	e0e3      	b.n	8007272 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_SPI_TransmitReceive+0x244>
 80070b2:	8a7b      	ldrh	r3, [r7, #18]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 80cf 	bne.w	8007258 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d912      	bls.n	80070ea <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	881a      	ldrh	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d4:	1c9a      	adds	r2, r3, #2
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b02      	subs	r3, #2
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070e8:	e0b6      	b.n	8007258 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	7812      	ldrb	r2, [r2, #0]
 80070f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007110:	e0a2      	b.n	8007258 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d134      	bne.n	800718a <HAL_SPI_TransmitReceive+0x314>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d02f      	beq.n	800718a <HAL_SPI_TransmitReceive+0x314>
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	2b01      	cmp	r3, #1
 800712e:	d12c      	bne.n	800718a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d912      	bls.n	8007160 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	881a      	ldrh	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b02      	subs	r3, #2
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800715e:	e012      	b.n	8007186 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b01      	cmp	r3, #1
 8007196:	d148      	bne.n	800722a <HAL_SPI_TransmitReceive+0x3b4>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d042      	beq.n	800722a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d923      	bls.n	80071f8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ba:	b292      	uxth	r2, r2
 80071bc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	1c9a      	adds	r2, r3, #2
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b02      	subs	r3, #2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d81f      	bhi.n	8007226 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071f4:	605a      	str	r2, [r3, #4]
 80071f6:	e016      	b.n	8007226 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f103 020c 	add.w	r2, r3, #12
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007204:	7812      	ldrb	r2, [r2, #0]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007226:	2301      	movs	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800722a:	f7fc f9e7 	bl	80035fc <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007236:	429a      	cmp	r2, r3
 8007238:	d803      	bhi.n	8007242 <HAL_SPI_TransmitReceive+0x3cc>
 800723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d102      	bne.n	8007248 <HAL_SPI_TransmitReceive+0x3d2>
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d107      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007256:	e026      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	f47f af57 	bne.w	8007112 <HAL_SPI_TransmitReceive+0x29c>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	f47f af50 	bne.w	8007112 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f93e 	bl	80074f8 <SPI_EndRxTxTransaction>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2220      	movs	r2, #32
 800728c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729c:	e003      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80072ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3728      	adds	r7, #40	@ 0x28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	4613      	mov	r3, r2
 80072ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072cc:	f7fc f996 	bl	80035fc <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4413      	add	r3, r2
 80072da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072dc:	f7fc f98e 	bl	80035fc <HAL_GetTick>
 80072e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072e2:	4b39      	ldr	r3, [pc, #228]	@ (80073c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	015b      	lsls	r3, r3, #5
 80072e8:	0d1b      	lsrs	r3, r3, #20
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	fb02 f303 	mul.w	r3, r2, r3
 80072f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072f2:	e054      	b.n	800739e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d050      	beq.n	800739e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072fc:	f7fc f97e 	bl	80035fc <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	429a      	cmp	r2, r3
 800730a:	d902      	bls.n	8007312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d13d      	bne.n	800738e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800732a:	d111      	bne.n	8007350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007334:	d004      	beq.n	8007340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733e:	d107      	bne.n	8007350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800734e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007358:	d10f      	bne.n	800737a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e017      	b.n	80073be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	3b01      	subs	r3, #1
 800739c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4013      	ands	r3, r2
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	bf0c      	ite	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	2300      	movne	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d19b      	bne.n	80072f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000000 	.word	0x20000000

080073cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08a      	sub	sp, #40	@ 0x28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073de:	f7fc f90d 	bl	80035fc <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	4413      	add	r3, r2
 80073ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80073ee:	f7fc f905 	bl	80035fc <HAL_GetTick>
 80073f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073fc:	4b3d      	ldr	r3, [pc, #244]	@ (80074f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	00da      	lsls	r2, r3, #3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	0d1b      	lsrs	r3, r3, #20
 800740c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800740e:	fb02 f303 	mul.w	r3, r2, r3
 8007412:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007414:	e060      	b.n	80074d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800741c:	d107      	bne.n	800742e <SPI_WaitFifoStateUntilTimeout+0x62>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800742c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d050      	beq.n	80074d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007436:	f7fc f8e1 	bl	80035fc <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007442:	429a      	cmp	r2, r3
 8007444:	d902      	bls.n	800744c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	d13d      	bne.n	80074c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800745a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007464:	d111      	bne.n	800748a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800746e:	d004      	beq.n	800747a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007478:	d107      	bne.n	800748a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007488:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007492:	d10f      	bne.n	80074b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e010      	b.n	80074ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4013      	ands	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d196      	bne.n	8007416 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3728      	adds	r7, #40	@ 0x28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000000 	.word	0x20000000

080074f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7ff ff5b 	bl	80073cc <SPI_WaitFifoStateUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d007      	beq.n	800752c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007520:	f043 0220 	orr.w	r2, r3, #32
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e027      	b.n	800757c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	2180      	movs	r1, #128	@ 0x80
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff fec0 	bl	80072bc <SPI_WaitFlagStateUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007546:	f043 0220 	orr.w	r2, r3, #32
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e014      	b.n	800757c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff ff34 	bl	80073cc <SPI_WaitFifoStateUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d007      	beq.n	800757a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800756e:	f043 0220 	orr.w	r2, r3, #32
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e000      	b.n	800757c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e049      	b.n	800762a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fb fdaa 	bl	8003104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f000 fdb6 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b01      	cmp	r3, #1
 8007646:	d001      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e04a      	b.n	80076e2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a21      	ldr	r2, [pc, #132]	@ (80076f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d018      	beq.n	80076a0 <HAL_TIM_Base_Start_IT+0x6c>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007676:	d013      	beq.n	80076a0 <HAL_TIM_Base_Start_IT+0x6c>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1d      	ldr	r2, [pc, #116]	@ (80076f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00e      	beq.n	80076a0 <HAL_TIM_Base_Start_IT+0x6c>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1c      	ldr	r2, [pc, #112]	@ (80076f8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d009      	beq.n	80076a0 <HAL_TIM_Base_Start_IT+0x6c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1a      	ldr	r2, [pc, #104]	@ (80076fc <HAL_TIM_Base_Start_IT+0xc8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <HAL_TIM_Base_Start_IT+0x6c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a19      	ldr	r2, [pc, #100]	@ (8007700 <HAL_TIM_Base_Start_IT+0xcc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d115      	bne.n	80076cc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	4b17      	ldr	r3, [pc, #92]	@ (8007704 <HAL_TIM_Base_Start_IT+0xd0>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b06      	cmp	r3, #6
 80076b0:	d015      	beq.n	80076de <HAL_TIM_Base_Start_IT+0xaa>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076b8:	d011      	beq.n	80076de <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0201 	orr.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ca:	e008      	b.n	80076de <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	e000      	b.n	80076e0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40013400 	.word	0x40013400
 8007700:	40014000 	.word	0x40014000
 8007704:	00010007 	.word	0x00010007

08007708 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0201 	bic.w	r2, r2, #1
 800771e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a1a      	ldr	r2, [r3, #32]
 8007726:	f241 1311 	movw	r3, #4369	@ 0x1111
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10f      	bne.n	8007750 <HAL_TIM_Base_Stop_IT+0x48>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a1a      	ldr	r2, [r3, #32]
 8007736:	f244 4344 	movw	r3, #17476	@ 0x4444
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d107      	bne.n	8007750 <HAL_TIM_Base_Stop_IT+0x48>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e049      	b.n	800780c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f841 	bl	8007814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f000 fcc5 	bl	8008134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d109      	bne.n	800784c <HAL_TIM_PWM_Start+0x24>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	bf14      	ite	ne
 8007844:	2301      	movne	r3, #1
 8007846:	2300      	moveq	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	e03c      	b.n	80078c6 <HAL_TIM_PWM_Start+0x9e>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b04      	cmp	r3, #4
 8007850:	d109      	bne.n	8007866 <HAL_TIM_PWM_Start+0x3e>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b01      	cmp	r3, #1
 800785c:	bf14      	ite	ne
 800785e:	2301      	movne	r3, #1
 8007860:	2300      	moveq	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	e02f      	b.n	80078c6 <HAL_TIM_PWM_Start+0x9e>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d109      	bne.n	8007880 <HAL_TIM_PWM_Start+0x58>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	bf14      	ite	ne
 8007878:	2301      	movne	r3, #1
 800787a:	2300      	moveq	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	e022      	b.n	80078c6 <HAL_TIM_PWM_Start+0x9e>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b0c      	cmp	r3, #12
 8007884:	d109      	bne.n	800789a <HAL_TIM_PWM_Start+0x72>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	e015      	b.n	80078c6 <HAL_TIM_PWM_Start+0x9e>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b10      	cmp	r3, #16
 800789e:	d109      	bne.n	80078b4 <HAL_TIM_PWM_Start+0x8c>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	bf14      	ite	ne
 80078ac:	2301      	movne	r3, #1
 80078ae:	2300      	moveq	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	e008      	b.n	80078c6 <HAL_TIM_PWM_Start+0x9e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	bf14      	ite	ne
 80078c0:	2301      	movne	r3, #1
 80078c2:	2300      	moveq	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e097      	b.n	80079fe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d104      	bne.n	80078de <HAL_TIM_PWM_Start+0xb6>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078dc:	e023      	b.n	8007926 <HAL_TIM_PWM_Start+0xfe>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_PWM_Start+0xc6>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078ec:	e01b      	b.n	8007926 <HAL_TIM_PWM_Start+0xfe>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d104      	bne.n	80078fe <HAL_TIM_PWM_Start+0xd6>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078fc:	e013      	b.n	8007926 <HAL_TIM_PWM_Start+0xfe>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d104      	bne.n	800790e <HAL_TIM_PWM_Start+0xe6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800790c:	e00b      	b.n	8007926 <HAL_TIM_PWM_Start+0xfe>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b10      	cmp	r3, #16
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start+0xf6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800791c:	e003      	b.n	8007926 <HAL_TIM_PWM_Start+0xfe>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2201      	movs	r2, #1
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f001 f82e 	bl	8008990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a33      	ldr	r2, [pc, #204]	@ (8007a08 <HAL_TIM_PWM_Start+0x1e0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d013      	beq.n	8007966 <HAL_TIM_PWM_Start+0x13e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a32      	ldr	r2, [pc, #200]	@ (8007a0c <HAL_TIM_PWM_Start+0x1e4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00e      	beq.n	8007966 <HAL_TIM_PWM_Start+0x13e>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a30      	ldr	r2, [pc, #192]	@ (8007a10 <HAL_TIM_PWM_Start+0x1e8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d009      	beq.n	8007966 <HAL_TIM_PWM_Start+0x13e>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a2f      	ldr	r2, [pc, #188]	@ (8007a14 <HAL_TIM_PWM_Start+0x1ec>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d004      	beq.n	8007966 <HAL_TIM_PWM_Start+0x13e>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a2d      	ldr	r2, [pc, #180]	@ (8007a18 <HAL_TIM_PWM_Start+0x1f0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d101      	bne.n	800796a <HAL_TIM_PWM_Start+0x142>
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <HAL_TIM_PWM_Start+0x144>
 800796a:	2300      	movs	r3, #0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800797e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a20      	ldr	r2, [pc, #128]	@ (8007a08 <HAL_TIM_PWM_Start+0x1e0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d018      	beq.n	80079bc <HAL_TIM_PWM_Start+0x194>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007992:	d013      	beq.n	80079bc <HAL_TIM_PWM_Start+0x194>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a20      	ldr	r2, [pc, #128]	@ (8007a1c <HAL_TIM_PWM_Start+0x1f4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00e      	beq.n	80079bc <HAL_TIM_PWM_Start+0x194>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007a20 <HAL_TIM_PWM_Start+0x1f8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d009      	beq.n	80079bc <HAL_TIM_PWM_Start+0x194>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a17      	ldr	r2, [pc, #92]	@ (8007a0c <HAL_TIM_PWM_Start+0x1e4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <HAL_TIM_PWM_Start+0x194>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a16      	ldr	r2, [pc, #88]	@ (8007a10 <HAL_TIM_PWM_Start+0x1e8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d115      	bne.n	80079e8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	4b18      	ldr	r3, [pc, #96]	@ (8007a24 <HAL_TIM_PWM_Start+0x1fc>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b06      	cmp	r3, #6
 80079cc:	d015      	beq.n	80079fa <HAL_TIM_PWM_Start+0x1d2>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079d4:	d011      	beq.n	80079fa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0201 	orr.w	r2, r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e6:	e008      	b.n	80079fa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	e000      	b.n	80079fc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40014400 	.word	0x40014400
 8007a18:	40014800 	.word	0x40014800
 8007a1c:	40000400 	.word	0x40000400
 8007a20:	40000800 	.word	0x40000800
 8007a24:	00010007 	.word	0x00010007

08007a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d020      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01b      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0202 	mvn.w	r2, #2
 8007a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fb40 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb32 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb43 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d020      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01b      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0204 	mvn.w	r2, #4
 8007aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2202      	movs	r2, #2
 8007aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fb1a 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fb0c 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb1d 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d020      	beq.n	8007b24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01b      	beq.n	8007b24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0208 	mvn.w	r2, #8
 8007af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2204      	movs	r2, #4
 8007afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 faf4 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007b10:	e005      	b.n	8007b1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fae6 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 faf7 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f003 0310 	and.w	r3, r3, #16
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d020      	beq.n	8007b70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01b      	beq.n	8007b70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0210 	mvn.w	r2, #16
 8007b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2208      	movs	r2, #8
 8007b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 face 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007b5c:	e005      	b.n	8007b6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fac0 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fad1 	bl	800810c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00c      	beq.n	8007b94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d007      	beq.n	8007b94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0201 	mvn.w	r2, #1
 8007b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fb f8a6 	bl	8002ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d104      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f825 	bl	8008c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 f81d 	bl	8008c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa8b 	bl	8008120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f06f 0220 	mvn.w	r2, #32
 8007c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 ffe5 	bl	8008bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00c      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fff1 	bl	8008c34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00c      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 ffe9 	bl	8008c48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00c      	beq.n	8007c9a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 ffe1 	bl	8008c5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00c      	beq.n	8007cbe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d007      	beq.n	8007cbe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 ffd9 	bl	8008c70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e0ff      	b.n	8007ee6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b14      	cmp	r3, #20
 8007cf2:	f200 80f0 	bhi.w	8007ed6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfc:	08007d51 	.word	0x08007d51
 8007d00:	08007ed7 	.word	0x08007ed7
 8007d04:	08007ed7 	.word	0x08007ed7
 8007d08:	08007ed7 	.word	0x08007ed7
 8007d0c:	08007d91 	.word	0x08007d91
 8007d10:	08007ed7 	.word	0x08007ed7
 8007d14:	08007ed7 	.word	0x08007ed7
 8007d18:	08007ed7 	.word	0x08007ed7
 8007d1c:	08007dd3 	.word	0x08007dd3
 8007d20:	08007ed7 	.word	0x08007ed7
 8007d24:	08007ed7 	.word	0x08007ed7
 8007d28:	08007ed7 	.word	0x08007ed7
 8007d2c:	08007e13 	.word	0x08007e13
 8007d30:	08007ed7 	.word	0x08007ed7
 8007d34:	08007ed7 	.word	0x08007ed7
 8007d38:	08007ed7 	.word	0x08007ed7
 8007d3c:	08007e55 	.word	0x08007e55
 8007d40:	08007ed7 	.word	0x08007ed7
 8007d44:	08007ed7 	.word	0x08007ed7
 8007d48:	08007ed7 	.word	0x08007ed7
 8007d4c:	08007e95 	.word	0x08007e95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68b9      	ldr	r1, [r7, #8]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fa88 	bl	800826c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0208 	orr.w	r2, r2, #8
 8007d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0204 	bic.w	r2, r2, #4
 8007d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6999      	ldr	r1, [r3, #24]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	619a      	str	r2, [r3, #24]
      break;
 8007d8e:	e0a5      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 faf8 	bl	800838c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6999      	ldr	r1, [r3, #24]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	021a      	lsls	r2, r3, #8
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	619a      	str	r2, [r3, #24]
      break;
 8007dd0:	e084      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fb61 	bl	80084a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69da      	ldr	r2, [r3, #28]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0208 	orr.w	r2, r2, #8
 8007dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0204 	bic.w	r2, r2, #4
 8007dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69d9      	ldr	r1, [r3, #28]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	61da      	str	r2, [r3, #28]
      break;
 8007e10:	e064      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fbc9 	bl	80085b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69d9      	ldr	r1, [r3, #28]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	021a      	lsls	r2, r3, #8
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	61da      	str	r2, [r3, #28]
      break;
 8007e52:	e043      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fc32 	bl	80086c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0208 	orr.w	r2, r2, #8
 8007e6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 0204 	bic.w	r2, r2, #4
 8007e7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007e92:	e023      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fc76 	bl	800878c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ebe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	021a      	lsls	r2, r3, #8
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007ed4:	e002      	b.n	8007edc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop

08007ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_TIM_ConfigClockSource+0x1c>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e0de      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x1da>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a63      	ldr	r2, [pc, #396]	@ (80080d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	f000 80a9 	beq.w	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007f4c:	4a61      	ldr	r2, [pc, #388]	@ (80080d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	f200 80ae 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f54:	4a60      	ldr	r2, [pc, #384]	@ (80080d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	f000 80a1 	beq.w	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80080d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	f200 80a6 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f64:	4a5d      	ldr	r2, [pc, #372]	@ (80080dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	f000 8099 	beq.w	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007f6c:	4a5b      	ldr	r2, [pc, #364]	@ (80080dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	f200 809e 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f74:	4a5a      	ldr	r2, [pc, #360]	@ (80080e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	f000 8091 	beq.w	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007f7c:	4a58      	ldr	r2, [pc, #352]	@ (80080e0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	f200 8096 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f88:	f000 8089 	beq.w	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007f8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f90:	f200 808e 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f98:	d03e      	beq.n	8008018 <HAL_TIM_ConfigClockSource+0x128>
 8007f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f9e:	f200 8087 	bhi.w	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fa6:	f000 8086 	beq.w	80080b6 <HAL_TIM_ConfigClockSource+0x1c6>
 8007faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fae:	d87f      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fb0:	2b70      	cmp	r3, #112	@ 0x70
 8007fb2:	d01a      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0xfa>
 8007fb4:	2b70      	cmp	r3, #112	@ 0x70
 8007fb6:	d87b      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fb8:	2b60      	cmp	r3, #96	@ 0x60
 8007fba:	d050      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x16e>
 8007fbc:	2b60      	cmp	r3, #96	@ 0x60
 8007fbe:	d877      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fc0:	2b50      	cmp	r3, #80	@ 0x50
 8007fc2:	d03c      	beq.n	800803e <HAL_TIM_ConfigClockSource+0x14e>
 8007fc4:	2b50      	cmp	r3, #80	@ 0x50
 8007fc6:	d873      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	d058      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x18e>
 8007fcc:	2b40      	cmp	r3, #64	@ 0x40
 8007fce:	d86f      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fd0:	2b30      	cmp	r3, #48	@ 0x30
 8007fd2:	d064      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007fd4:	2b30      	cmp	r3, #48	@ 0x30
 8007fd6:	d86b      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d060      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	d867      	bhi.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d05c      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d05a      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x1ae>
 8007fe8:	e062      	b.n	80080b0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ffa:	f000 fca9 	bl	8008950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800800c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	609a      	str	r2, [r3, #8]
      break;
 8008016:	e04f      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008028:	f000 fc92 	bl	8008950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800803a:	609a      	str	r2, [r3, #8]
      break;
 800803c:	e03c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	461a      	mov	r2, r3
 800804c:	f000 fc04 	bl	8008858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2150      	movs	r1, #80	@ 0x50
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fc5d 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 800805c:	e02c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800806a:	461a      	mov	r2, r3
 800806c:	f000 fc23 	bl	80088b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2160      	movs	r1, #96	@ 0x60
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fc4d 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 800807c:	e01c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	461a      	mov	r2, r3
 800808c:	f000 fbe4 	bl	8008858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2140      	movs	r1, #64	@ 0x40
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fc3d 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 800809c:	e00c      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f000 fc34 	bl	8008916 <TIM_ITRx_SetConfig>
      break;
 80080ae:	e003      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e000      	b.n	80080b8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80080b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	00100070 	.word	0x00100070
 80080d8:	00100040 	.word	0x00100040
 80080dc:	00100030 	.word	0x00100030
 80080e0:	00100020 	.word	0x00100020

080080e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a42      	ldr	r2, [pc, #264]	@ (8008250 <TIM_Base_SetConfig+0x11c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00f      	beq.n	800816c <TIM_Base_SetConfig+0x38>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008152:	d00b      	beq.n	800816c <TIM_Base_SetConfig+0x38>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a3f      	ldr	r2, [pc, #252]	@ (8008254 <TIM_Base_SetConfig+0x120>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <TIM_Base_SetConfig+0x38>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a3e      	ldr	r2, [pc, #248]	@ (8008258 <TIM_Base_SetConfig+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d003      	beq.n	800816c <TIM_Base_SetConfig+0x38>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a3d      	ldr	r2, [pc, #244]	@ (800825c <TIM_Base_SetConfig+0x128>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d108      	bne.n	800817e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a33      	ldr	r2, [pc, #204]	@ (8008250 <TIM_Base_SetConfig+0x11c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d01b      	beq.n	80081be <TIM_Base_SetConfig+0x8a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818c:	d017      	beq.n	80081be <TIM_Base_SetConfig+0x8a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a30      	ldr	r2, [pc, #192]	@ (8008254 <TIM_Base_SetConfig+0x120>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d013      	beq.n	80081be <TIM_Base_SetConfig+0x8a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a2f      	ldr	r2, [pc, #188]	@ (8008258 <TIM_Base_SetConfig+0x124>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00f      	beq.n	80081be <TIM_Base_SetConfig+0x8a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a2e      	ldr	r2, [pc, #184]	@ (800825c <TIM_Base_SetConfig+0x128>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00b      	beq.n	80081be <TIM_Base_SetConfig+0x8a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d007      	beq.n	80081be <TIM_Base_SetConfig+0x8a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008264 <TIM_Base_SetConfig+0x130>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d003      	beq.n	80081be <TIM_Base_SetConfig+0x8a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008268 <TIM_Base_SetConfig+0x134>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d108      	bne.n	80081d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a16      	ldr	r2, [pc, #88]	@ (8008250 <TIM_Base_SetConfig+0x11c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00f      	beq.n	800821c <TIM_Base_SetConfig+0xe8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a17      	ldr	r2, [pc, #92]	@ (800825c <TIM_Base_SetConfig+0x128>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00b      	beq.n	800821c <TIM_Base_SetConfig+0xe8>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a16      	ldr	r2, [pc, #88]	@ (8008260 <TIM_Base_SetConfig+0x12c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d007      	beq.n	800821c <TIM_Base_SetConfig+0xe8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a15      	ldr	r2, [pc, #84]	@ (8008264 <TIM_Base_SetConfig+0x130>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_Base_SetConfig+0xe8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a14      	ldr	r2, [pc, #80]	@ (8008268 <TIM_Base_SetConfig+0x134>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d103      	bne.n	8008224 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b01      	cmp	r3, #1
 8008234:	d105      	bne.n	8008242 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f023 0201 	bic.w	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	611a      	str	r2, [r3, #16]
  }
}
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	40012c00 	.word	0x40012c00
 8008254:	40000400 	.word	0x40000400
 8008258:	40000800 	.word	0x40000800
 800825c:	40013400 	.word	0x40013400
 8008260:	40014000 	.word	0x40014000
 8008264:	40014400 	.word	0x40014400
 8008268:	40014800 	.word	0x40014800

0800826c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	f023 0201 	bic.w	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800829a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f023 0302 	bic.w	r3, r3, #2
 80082b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008378 <TIM_OC1_SetConfig+0x10c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00f      	beq.n	80082ec <TIM_OC1_SetConfig+0x80>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a2b      	ldr	r2, [pc, #172]	@ (800837c <TIM_OC1_SetConfig+0x110>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00b      	beq.n	80082ec <TIM_OC1_SetConfig+0x80>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008380 <TIM_OC1_SetConfig+0x114>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d007      	beq.n	80082ec <TIM_OC1_SetConfig+0x80>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a29      	ldr	r2, [pc, #164]	@ (8008384 <TIM_OC1_SetConfig+0x118>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d003      	beq.n	80082ec <TIM_OC1_SetConfig+0x80>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a28      	ldr	r2, [pc, #160]	@ (8008388 <TIM_OC1_SetConfig+0x11c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d10c      	bne.n	8008306 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f023 0308 	bic.w	r3, r3, #8
 80082f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f023 0304 	bic.w	r3, r3, #4
 8008304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a1b      	ldr	r2, [pc, #108]	@ (8008378 <TIM_OC1_SetConfig+0x10c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00f      	beq.n	800832e <TIM_OC1_SetConfig+0xc2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a1a      	ldr	r2, [pc, #104]	@ (800837c <TIM_OC1_SetConfig+0x110>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00b      	beq.n	800832e <TIM_OC1_SetConfig+0xc2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a19      	ldr	r2, [pc, #100]	@ (8008380 <TIM_OC1_SetConfig+0x114>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d007      	beq.n	800832e <TIM_OC1_SetConfig+0xc2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a18      	ldr	r2, [pc, #96]	@ (8008384 <TIM_OC1_SetConfig+0x118>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <TIM_OC1_SetConfig+0xc2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a17      	ldr	r2, [pc, #92]	@ (8008388 <TIM_OC1_SetConfig+0x11c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d111      	bne.n	8008352 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800833c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	621a      	str	r2, [r3, #32]
}
 800836c:	bf00      	nop
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	40012c00 	.word	0x40012c00
 800837c:	40013400 	.word	0x40013400
 8008380:	40014000 	.word	0x40014000
 8008384:	40014400 	.word	0x40014400
 8008388:	40014800 	.word	0x40014800

0800838c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	f023 0210 	bic.w	r2, r3, #16
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f023 0320 	bic.w	r3, r3, #32
 80083da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a28      	ldr	r2, [pc, #160]	@ (800848c <TIM_OC2_SetConfig+0x100>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_OC2_SetConfig+0x6c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a27      	ldr	r2, [pc, #156]	@ (8008490 <TIM_OC2_SetConfig+0x104>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d10d      	bne.n	8008414 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a1d      	ldr	r2, [pc, #116]	@ (800848c <TIM_OC2_SetConfig+0x100>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00f      	beq.n	800843c <TIM_OC2_SetConfig+0xb0>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a1c      	ldr	r2, [pc, #112]	@ (8008490 <TIM_OC2_SetConfig+0x104>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00b      	beq.n	800843c <TIM_OC2_SetConfig+0xb0>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a1b      	ldr	r2, [pc, #108]	@ (8008494 <TIM_OC2_SetConfig+0x108>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d007      	beq.n	800843c <TIM_OC2_SetConfig+0xb0>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a1a      	ldr	r2, [pc, #104]	@ (8008498 <TIM_OC2_SetConfig+0x10c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d003      	beq.n	800843c <TIM_OC2_SetConfig+0xb0>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a19      	ldr	r2, [pc, #100]	@ (800849c <TIM_OC2_SetConfig+0x110>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d113      	bne.n	8008464 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800844a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4313      	orrs	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40012c00 	.word	0x40012c00
 8008490:	40013400 	.word	0x40013400
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800

080084a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a27      	ldr	r2, [pc, #156]	@ (800859c <TIM_OC3_SetConfig+0xfc>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC3_SetConfig+0x6a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a26      	ldr	r2, [pc, #152]	@ (80085a0 <TIM_OC3_SetConfig+0x100>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d10d      	bne.n	8008526 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	021b      	lsls	r3, r3, #8
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a1c      	ldr	r2, [pc, #112]	@ (800859c <TIM_OC3_SetConfig+0xfc>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00f      	beq.n	800854e <TIM_OC3_SetConfig+0xae>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a1b      	ldr	r2, [pc, #108]	@ (80085a0 <TIM_OC3_SetConfig+0x100>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00b      	beq.n	800854e <TIM_OC3_SetConfig+0xae>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a1a      	ldr	r2, [pc, #104]	@ (80085a4 <TIM_OC3_SetConfig+0x104>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d007      	beq.n	800854e <TIM_OC3_SetConfig+0xae>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a19      	ldr	r2, [pc, #100]	@ (80085a8 <TIM_OC3_SetConfig+0x108>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d003      	beq.n	800854e <TIM_OC3_SetConfig+0xae>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a18      	ldr	r2, [pc, #96]	@ (80085ac <TIM_OC3_SetConfig+0x10c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d113      	bne.n	8008576 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800855c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	011b      	lsls	r3, r3, #4
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	621a      	str	r2, [r3, #32]
}
 8008590:	bf00      	nop
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	40012c00 	.word	0x40012c00
 80085a0:	40013400 	.word	0x40013400
 80085a4:	40014000 	.word	0x40014000
 80085a8:	40014400 	.word	0x40014400
 80085ac:	40014800 	.word	0x40014800

080085b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	031b      	lsls	r3, r3, #12
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	4313      	orrs	r3, r2
 800860a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a28      	ldr	r2, [pc, #160]	@ (80086b0 <TIM_OC4_SetConfig+0x100>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_OC4_SetConfig+0x6c>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a27      	ldr	r2, [pc, #156]	@ (80086b4 <TIM_OC4_SetConfig+0x104>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d10d      	bne.n	8008638 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	031b      	lsls	r3, r3, #12
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	4313      	orrs	r3, r2
 800862e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <TIM_OC4_SetConfig+0x100>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00f      	beq.n	8008660 <TIM_OC4_SetConfig+0xb0>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1c      	ldr	r2, [pc, #112]	@ (80086b4 <TIM_OC4_SetConfig+0x104>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00b      	beq.n	8008660 <TIM_OC4_SetConfig+0xb0>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a1b      	ldr	r2, [pc, #108]	@ (80086b8 <TIM_OC4_SetConfig+0x108>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d007      	beq.n	8008660 <TIM_OC4_SetConfig+0xb0>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a1a      	ldr	r2, [pc, #104]	@ (80086bc <TIM_OC4_SetConfig+0x10c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_OC4_SetConfig+0xb0>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a19      	ldr	r2, [pc, #100]	@ (80086c0 <TIM_OC4_SetConfig+0x110>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d113      	bne.n	8008688 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008666:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800866e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	019b      	lsls	r3, r3, #6
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	019b      	lsls	r3, r3, #6
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40012c00 	.word	0x40012c00
 80086b4:	40013400 	.word	0x40013400
 80086b8:	40014000 	.word	0x40014000
 80086bc:	40014400 	.word	0x40014400
 80086c0:	40014800 	.word	0x40014800

080086c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008708:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a17      	ldr	r2, [pc, #92]	@ (8008778 <TIM_OC5_SetConfig+0xb4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00f      	beq.n	800873e <TIM_OC5_SetConfig+0x7a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a16      	ldr	r2, [pc, #88]	@ (800877c <TIM_OC5_SetConfig+0xb8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d00b      	beq.n	800873e <TIM_OC5_SetConfig+0x7a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a15      	ldr	r2, [pc, #84]	@ (8008780 <TIM_OC5_SetConfig+0xbc>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d007      	beq.n	800873e <TIM_OC5_SetConfig+0x7a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a14      	ldr	r2, [pc, #80]	@ (8008784 <TIM_OC5_SetConfig+0xc0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d003      	beq.n	800873e <TIM_OC5_SetConfig+0x7a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a13      	ldr	r2, [pc, #76]	@ (8008788 <TIM_OC5_SetConfig+0xc4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d109      	bne.n	8008752 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	621a      	str	r2, [r3, #32]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	40012c00 	.word	0x40012c00
 800877c:	40013400 	.word	0x40013400
 8008780:	40014000 	.word	0x40014000
 8008784:	40014400 	.word	0x40014400
 8008788:	40014800 	.word	0x40014800

0800878c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	051b      	lsls	r3, r3, #20
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4313      	orrs	r3, r2
 80087de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a18      	ldr	r2, [pc, #96]	@ (8008844 <TIM_OC6_SetConfig+0xb8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00f      	beq.n	8008808 <TIM_OC6_SetConfig+0x7c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a17      	ldr	r2, [pc, #92]	@ (8008848 <TIM_OC6_SetConfig+0xbc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <TIM_OC6_SetConfig+0x7c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a16      	ldr	r2, [pc, #88]	@ (800884c <TIM_OC6_SetConfig+0xc0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d007      	beq.n	8008808 <TIM_OC6_SetConfig+0x7c>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a15      	ldr	r2, [pc, #84]	@ (8008850 <TIM_OC6_SetConfig+0xc4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_OC6_SetConfig+0x7c>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a14      	ldr	r2, [pc, #80]	@ (8008854 <TIM_OC6_SetConfig+0xc8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d109      	bne.n	800881c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800880e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	029b      	lsls	r3, r3, #10
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40012c00 	.word	0x40012c00
 8008848:	40013400 	.word	0x40013400
 800884c:	40014000 	.word	0x40014000
 8008850:	40014400 	.word	0x40014400
 8008854:	40014800 	.word	0x40014800

08008858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	f023 0201 	bic.w	r2, r3, #1
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f023 030a 	bic.w	r3, r3, #10
 8008894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b087      	sub	sp, #28
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	f023 0210 	bic.w	r2, r3, #16
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	031b      	lsls	r3, r3, #12
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008916:	b480      	push	{r7}
 8008918:	b085      	sub	sp, #20
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800892c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	f043 0307 	orr.w	r3, r3, #7
 800893c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	609a      	str	r2, [r3, #8]
}
 8008944:	bf00      	nop
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800896a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	021a      	lsls	r2, r3, #8
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	431a      	orrs	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4313      	orrs	r3, r2
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	609a      	str	r2, [r3, #8]
}
 8008984:	bf00      	nop
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 031f 	and.w	r3, r3, #31
 80089a2:	2201      	movs	r2, #1
 80089a4:	fa02 f303 	lsl.w	r3, r2, r3
 80089a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a1a      	ldr	r2, [r3, #32]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	43db      	mvns	r3, r3
 80089b2:	401a      	ands	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a1a      	ldr	r2, [r3, #32]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f003 031f 	and.w	r3, r3, #31
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	fa01 f303 	lsl.w	r3, r1, r3
 80089c8:	431a      	orrs	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
	...

080089dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e065      	b.n	8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a2c      	ldr	r2, [pc, #176]	@ (8008acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d004      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a2b      	ldr	r2, [pc, #172]	@ (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d108      	bne.n	8008a3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d018      	beq.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a6a:	d013      	beq.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a18      	ldr	r2, [pc, #96]	@ (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00e      	beq.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a17      	ldr	r2, [pc, #92]	@ (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d009      	beq.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a12      	ldr	r2, [pc, #72]	@ (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d004      	beq.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a13      	ldr	r2, [pc, #76]	@ (8008adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d10c      	bne.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	40012c00 	.word	0x40012c00
 8008ad0:	40013400 	.word	0x40013400
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40014000 	.word	0x40014000

08008ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e073      	b.n	8008be4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	041b      	lsls	r3, r3, #16
 8008b72:	4313      	orrs	r3, r2
 8008b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a19      	ldr	r2, [pc, #100]	@ (8008bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d004      	beq.n	8008b98 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d11c      	bne.n	8008bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba2:	051b      	lsls	r3, r3, #20
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	40012c00 	.word	0x40012c00
 8008bf4:	40013400 	.word	0x40013400

08008bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e042      	b.n	8008d1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d106      	bne.n	8008cae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7fa fac9 	bl	8003240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2224      	movs	r2, #36	@ 0x24
 8008cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0201 	bic.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fec2 	bl	8009a58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fbf3 	bl	80094c0 <UART_SetConfig>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e01b      	b.n	8008d1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689a      	ldr	r2, [r3, #8]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 ff41 	bl	8009b9c <UART_CheckIdleState>
 8008d1a:	4603      	mov	r3, r0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08a      	sub	sp, #40	@ 0x28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d167      	bne.n	8008e0c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <HAL_UART_Transmit_DMA+0x24>
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e060      	b.n	8008e0e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	88fa      	ldrh	r2, [r7, #6]
 8008d56:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	88fa      	ldrh	r2, [r7, #6]
 8008d5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2221      	movs	r2, #33	@ 0x21
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d028      	beq.n	8008dcc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d7e:	4a26      	ldr	r2, [pc, #152]	@ (8008e18 <HAL_UART_Transmit_DMA+0xf4>)
 8008d80:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d86:	4a25      	ldr	r2, [pc, #148]	@ (8008e1c <HAL_UART_Transmit_DMA+0xf8>)
 8008d88:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d8e:	4a24      	ldr	r2, [pc, #144]	@ (8008e20 <HAL_UART_Transmit_DMA+0xfc>)
 8008d90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d96:	2200      	movs	r2, #0
 8008d98:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da2:	4619      	mov	r1, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3328      	adds	r3, #40	@ 0x28
 8008daa:	461a      	mov	r2, r3
 8008dac:	88fb      	ldrh	r3, [r7, #6]
 8008dae:	f7fc fb25 	bl	80053fc <HAL_DMA_Start_IT>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d009      	beq.n	8008dcc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2210      	movs	r2, #16
 8008dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e020      	b.n	8008e0e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2240      	movs	r2, #64	@ 0x40
 8008dd2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	613b      	str	r3, [r7, #16]
   return(result);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3308      	adds	r3, #8
 8008df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df4:	623a      	str	r2, [r7, #32]
 8008df6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	69f9      	ldr	r1, [r7, #28]
 8008dfa:	6a3a      	ldr	r2, [r7, #32]
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e5      	bne.n	8008dd4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	e000      	b.n	8008e0e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008e0c:	2302      	movs	r3, #2
  }
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3728      	adds	r7, #40	@ 0x28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	08009f19 	.word	0x08009f19
 8008e1c:	08009fb3 	.word	0x08009fb3
 8008e20:	08009fcf 	.word	0x08009fcf

08008e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b0ba      	sub	sp, #232	@ 0xe8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008e4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008e52:	4013      	ands	r3, r2
 8008e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d11b      	bne.n	8008e98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d015      	beq.n	8008e98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d105      	bne.n	8008e84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d009      	beq.n	8008e98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 82e3 	beq.w	8009454 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
      }
      return;
 8008e96:	e2dd      	b.n	8009454 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 8123 	beq.w	80090e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ea2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80090dc <HAL_UART_IRQHandler+0x2b8>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008eae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008eb2:	4b8b      	ldr	r3, [pc, #556]	@ (80090e0 <HAL_UART_IRQHandler+0x2bc>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8116 	beq.w	80090e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d011      	beq.n	8008eec <HAL_UART_IRQHandler+0xc8>
 8008ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee2:	f043 0201 	orr.w	r2, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d011      	beq.n	8008f1c <HAL_UART_IRQHandler+0xf8>
 8008ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f12:	f043 0204 	orr.w	r2, r3, #4
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d011      	beq.n	8008f4c <HAL_UART_IRQHandler+0x128>
 8008f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2204      	movs	r2, #4
 8008f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f42:	f043 0202 	orr.w	r2, r3, #2
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d017      	beq.n	8008f88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d105      	bne.n	8008f70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f68:	4b5c      	ldr	r3, [pc, #368]	@ (80090dc <HAL_UART_IRQHandler+0x2b8>)
 8008f6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2208      	movs	r2, #8
 8008f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f7e:	f043 0208 	orr.w	r2, r3, #8
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d012      	beq.n	8008fba <HAL_UART_IRQHandler+0x196>
 8008f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00c      	beq.n	8008fba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb0:	f043 0220 	orr.w	r2, r3, #32
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8249 	beq.w	8009458 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d013      	beq.n	8008ffa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d105      	bne.n	8008fea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009000:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800900e:	2b40      	cmp	r3, #64	@ 0x40
 8009010:	d005      	beq.n	800901e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009016:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800901a:	2b00      	cmp	r3, #0
 800901c:	d054      	beq.n	80090c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 ff14 	bl	8009e4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800902e:	2b40      	cmp	r3, #64	@ 0x40
 8009030:	d146      	bne.n	80090c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009048:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800904c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3308      	adds	r3, #8
 800905a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800905e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009062:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800906a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1d9      	bne.n	8009032 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009084:	2b00      	cmp	r3, #0
 8009086:	d017      	beq.n	80090b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800908e:	4a15      	ldr	r2, [pc, #84]	@ (80090e4 <HAL_UART_IRQHandler+0x2c0>)
 8009090:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009098:	4618      	mov	r0, r3
 800909a:	f7fc fa83 	bl	80055a4 <HAL_DMA_Abort_IT>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d019      	beq.n	80090d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80090b2:	4610      	mov	r0, r2
 80090b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b6:	e00f      	b.n	80090d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f9eb 	bl	8009494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090be:	e00b      	b.n	80090d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9e7 	bl	8009494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090c6:	e007      	b.n	80090d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f9e3 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80090d6:	e1bf      	b.n	8009458 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d8:	bf00      	nop
    return;
 80090da:	e1bd      	b.n	8009458 <HAL_UART_IRQHandler+0x634>
 80090dc:	10000001 	.word	0x10000001
 80090e0:	04000120 	.word	0x04000120
 80090e4:	0800a04f 	.word	0x0800a04f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	f040 8153 	bne.w	8009398 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090f6:	f003 0310 	and.w	r3, r3, #16
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 814c 	beq.w	8009398 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 8145 	beq.w	8009398 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2210      	movs	r2, #16
 8009114:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009120:	2b40      	cmp	r3, #64	@ 0x40
 8009122:	f040 80bb 	bne.w	800929c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 818f 	beq.w	800945c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009144:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009148:	429a      	cmp	r2, r3
 800914a:	f080 8187 	bcs.w	800945c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009154:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 8087 	bne.w	800927a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009174:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009180:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009196:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800919a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1da      	bne.n	800916c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091c8:	f023 0301 	bic.w	r3, r3, #1
 80091cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3308      	adds	r3, #8
 80091d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80091de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80091e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e1      	bne.n	80091b6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009216:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009218:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800921c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e3      	bne.n	80091f2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009248:	f023 0310 	bic.w	r3, r3, #16
 800924c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800925a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800925c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009260:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e4      	bne.n	8009238 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009274:	4618      	mov	r0, r3
 8009276:	f7fc f93c 	bl	80054f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2202      	movs	r2, #2
 800927e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800928c:	b29b      	uxth	r3, r3
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	b29b      	uxth	r3, r3
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f907 	bl	80094a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800929a:	e0df      	b.n	800945c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 80d1 	beq.w	8009460 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80092be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 80cc 	beq.w	8009460 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80092ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e4      	bne.n	80092c8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	623b      	str	r3, [r7, #32]
   return(result);
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3308      	adds	r3, #8
 8009322:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009326:	633a      	str	r2, [r7, #48]	@ 0x30
 8009328:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800932c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e1      	bne.n	80092fe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2220      	movs	r2, #32
 800933e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	60fb      	str	r3, [r7, #12]
   return(result);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 0310 	bic.w	r3, r3, #16
 8009362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009370:	61fb      	str	r3, [r7, #28]
 8009372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	69b9      	ldr	r1, [r7, #24]
 8009376:	69fa      	ldr	r2, [r7, #28]
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	617b      	str	r3, [r7, #20]
   return(result);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e4      	bne.n	800934e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800938a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f889 	bl	80094a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009396:	e063      	b.n	8009460 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00e      	beq.n	80093c2 <HAL_UART_IRQHandler+0x59e>
 80093a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d008      	beq.n	80093c2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80093b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fe88 	bl	800a0d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093c0:	e051      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d014      	beq.n	80093f8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d105      	bne.n	80093e6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d008      	beq.n	80093f8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d03a      	beq.n	8009464 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	4798      	blx	r3
    }
    return;
 80093f6:	e035      	b.n	8009464 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009400:	2b00      	cmp	r3, #0
 8009402:	d009      	beq.n	8009418 <HAL_UART_IRQHandler+0x5f4>
 8009404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fe32 	bl	800a07a <UART_EndTransmit_IT>
    return;
 8009416:	e026      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800941c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <HAL_UART_IRQHandler+0x614>
 8009424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009428:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fe61 	bl	800a0f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009436:	e016      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800943c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d010      	beq.n	8009466 <HAL_UART_IRQHandler+0x642>
 8009444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009448:	2b00      	cmp	r3, #0
 800944a:	da0c      	bge.n	8009466 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fe49 	bl	800a0e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009452:	e008      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
      return;
 8009454:	bf00      	nop
 8009456:	e006      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
    return;
 8009458:	bf00      	nop
 800945a:	e004      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
      return;
 800945c:	bf00      	nop
 800945e:	e002      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
      return;
 8009460:	bf00      	nop
 8009462:	e000      	b.n	8009466 <HAL_UART_IRQHandler+0x642>
    return;
 8009464:	bf00      	nop
  }
}
 8009466:	37e8      	adds	r7, #232	@ 0xe8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094c4:	b08c      	sub	sp, #48	@ 0x30
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	431a      	orrs	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	431a      	orrs	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4bab      	ldr	r3, [pc, #684]	@ (800979c <UART_SetConfig+0x2dc>)
 80094f0:	4013      	ands	r3, r2
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094f8:	430b      	orrs	r3, r1
 80094fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4aa0      	ldr	r2, [pc, #640]	@ (80097a0 <UART_SetConfig+0x2e0>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d004      	beq.n	800952c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009528:	4313      	orrs	r3, r2
 800952a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009536:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009540:	430b      	orrs	r3, r1
 8009542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	f023 010f 	bic.w	r1, r3, #15
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a91      	ldr	r2, [pc, #580]	@ (80097a4 <UART_SetConfig+0x2e4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d125      	bne.n	80095b0 <UART_SetConfig+0xf0>
 8009564:	4b90      	ldr	r3, [pc, #576]	@ (80097a8 <UART_SetConfig+0x2e8>)
 8009566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	2b03      	cmp	r3, #3
 8009570:	d81a      	bhi.n	80095a8 <UART_SetConfig+0xe8>
 8009572:	a201      	add	r2, pc, #4	@ (adr r2, 8009578 <UART_SetConfig+0xb8>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	08009589 	.word	0x08009589
 800957c:	08009599 	.word	0x08009599
 8009580:	08009591 	.word	0x08009591
 8009584:	080095a1 	.word	0x080095a1
 8009588:	2301      	movs	r3, #1
 800958a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800958e:	e0d6      	b.n	800973e <UART_SetConfig+0x27e>
 8009590:	2302      	movs	r3, #2
 8009592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009596:	e0d2      	b.n	800973e <UART_SetConfig+0x27e>
 8009598:	2304      	movs	r3, #4
 800959a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800959e:	e0ce      	b.n	800973e <UART_SetConfig+0x27e>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095a6:	e0ca      	b.n	800973e <UART_SetConfig+0x27e>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095ae:	e0c6      	b.n	800973e <UART_SetConfig+0x27e>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a7d      	ldr	r2, [pc, #500]	@ (80097ac <UART_SetConfig+0x2ec>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d138      	bne.n	800962c <UART_SetConfig+0x16c>
 80095ba:	4b7b      	ldr	r3, [pc, #492]	@ (80097a8 <UART_SetConfig+0x2e8>)
 80095bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c0:	f003 030c 	and.w	r3, r3, #12
 80095c4:	2b0c      	cmp	r3, #12
 80095c6:	d82d      	bhi.n	8009624 <UART_SetConfig+0x164>
 80095c8:	a201      	add	r2, pc, #4	@ (adr r2, 80095d0 <UART_SetConfig+0x110>)
 80095ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ce:	bf00      	nop
 80095d0:	08009605 	.word	0x08009605
 80095d4:	08009625 	.word	0x08009625
 80095d8:	08009625 	.word	0x08009625
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009615 	.word	0x08009615
 80095e4:	08009625 	.word	0x08009625
 80095e8:	08009625 	.word	0x08009625
 80095ec:	08009625 	.word	0x08009625
 80095f0:	0800960d 	.word	0x0800960d
 80095f4:	08009625 	.word	0x08009625
 80095f8:	08009625 	.word	0x08009625
 80095fc:	08009625 	.word	0x08009625
 8009600:	0800961d 	.word	0x0800961d
 8009604:	2300      	movs	r3, #0
 8009606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800960a:	e098      	b.n	800973e <UART_SetConfig+0x27e>
 800960c:	2302      	movs	r3, #2
 800960e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009612:	e094      	b.n	800973e <UART_SetConfig+0x27e>
 8009614:	2304      	movs	r3, #4
 8009616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800961a:	e090      	b.n	800973e <UART_SetConfig+0x27e>
 800961c:	2308      	movs	r3, #8
 800961e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009622:	e08c      	b.n	800973e <UART_SetConfig+0x27e>
 8009624:	2310      	movs	r3, #16
 8009626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800962a:	e088      	b.n	800973e <UART_SetConfig+0x27e>
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a5f      	ldr	r2, [pc, #380]	@ (80097b0 <UART_SetConfig+0x2f0>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d125      	bne.n	8009682 <UART_SetConfig+0x1c2>
 8009636:	4b5c      	ldr	r3, [pc, #368]	@ (80097a8 <UART_SetConfig+0x2e8>)
 8009638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800963c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009640:	2b30      	cmp	r3, #48	@ 0x30
 8009642:	d016      	beq.n	8009672 <UART_SetConfig+0x1b2>
 8009644:	2b30      	cmp	r3, #48	@ 0x30
 8009646:	d818      	bhi.n	800967a <UART_SetConfig+0x1ba>
 8009648:	2b20      	cmp	r3, #32
 800964a:	d00a      	beq.n	8009662 <UART_SetConfig+0x1a2>
 800964c:	2b20      	cmp	r3, #32
 800964e:	d814      	bhi.n	800967a <UART_SetConfig+0x1ba>
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <UART_SetConfig+0x19a>
 8009654:	2b10      	cmp	r3, #16
 8009656:	d008      	beq.n	800966a <UART_SetConfig+0x1aa>
 8009658:	e00f      	b.n	800967a <UART_SetConfig+0x1ba>
 800965a:	2300      	movs	r3, #0
 800965c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009660:	e06d      	b.n	800973e <UART_SetConfig+0x27e>
 8009662:	2302      	movs	r3, #2
 8009664:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009668:	e069      	b.n	800973e <UART_SetConfig+0x27e>
 800966a:	2304      	movs	r3, #4
 800966c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009670:	e065      	b.n	800973e <UART_SetConfig+0x27e>
 8009672:	2308      	movs	r3, #8
 8009674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009678:	e061      	b.n	800973e <UART_SetConfig+0x27e>
 800967a:	2310      	movs	r3, #16
 800967c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009680:	e05d      	b.n	800973e <UART_SetConfig+0x27e>
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a4b      	ldr	r2, [pc, #300]	@ (80097b4 <UART_SetConfig+0x2f4>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d125      	bne.n	80096d8 <UART_SetConfig+0x218>
 800968c:	4b46      	ldr	r3, [pc, #280]	@ (80097a8 <UART_SetConfig+0x2e8>)
 800968e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009692:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009696:	2bc0      	cmp	r3, #192	@ 0xc0
 8009698:	d016      	beq.n	80096c8 <UART_SetConfig+0x208>
 800969a:	2bc0      	cmp	r3, #192	@ 0xc0
 800969c:	d818      	bhi.n	80096d0 <UART_SetConfig+0x210>
 800969e:	2b80      	cmp	r3, #128	@ 0x80
 80096a0:	d00a      	beq.n	80096b8 <UART_SetConfig+0x1f8>
 80096a2:	2b80      	cmp	r3, #128	@ 0x80
 80096a4:	d814      	bhi.n	80096d0 <UART_SetConfig+0x210>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <UART_SetConfig+0x1f0>
 80096aa:	2b40      	cmp	r3, #64	@ 0x40
 80096ac:	d008      	beq.n	80096c0 <UART_SetConfig+0x200>
 80096ae:	e00f      	b.n	80096d0 <UART_SetConfig+0x210>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096b6:	e042      	b.n	800973e <UART_SetConfig+0x27e>
 80096b8:	2302      	movs	r3, #2
 80096ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096be:	e03e      	b.n	800973e <UART_SetConfig+0x27e>
 80096c0:	2304      	movs	r3, #4
 80096c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096c6:	e03a      	b.n	800973e <UART_SetConfig+0x27e>
 80096c8:	2308      	movs	r3, #8
 80096ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ce:	e036      	b.n	800973e <UART_SetConfig+0x27e>
 80096d0:	2310      	movs	r3, #16
 80096d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096d6:	e032      	b.n	800973e <UART_SetConfig+0x27e>
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a30      	ldr	r2, [pc, #192]	@ (80097a0 <UART_SetConfig+0x2e0>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d12a      	bne.n	8009738 <UART_SetConfig+0x278>
 80096e2:	4b31      	ldr	r3, [pc, #196]	@ (80097a8 <UART_SetConfig+0x2e8>)
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096f0:	d01a      	beq.n	8009728 <UART_SetConfig+0x268>
 80096f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096f6:	d81b      	bhi.n	8009730 <UART_SetConfig+0x270>
 80096f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096fc:	d00c      	beq.n	8009718 <UART_SetConfig+0x258>
 80096fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009702:	d815      	bhi.n	8009730 <UART_SetConfig+0x270>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <UART_SetConfig+0x250>
 8009708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800970c:	d008      	beq.n	8009720 <UART_SetConfig+0x260>
 800970e:	e00f      	b.n	8009730 <UART_SetConfig+0x270>
 8009710:	2300      	movs	r3, #0
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009716:	e012      	b.n	800973e <UART_SetConfig+0x27e>
 8009718:	2302      	movs	r3, #2
 800971a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800971e:	e00e      	b.n	800973e <UART_SetConfig+0x27e>
 8009720:	2304      	movs	r3, #4
 8009722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009726:	e00a      	b.n	800973e <UART_SetConfig+0x27e>
 8009728:	2308      	movs	r3, #8
 800972a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800972e:	e006      	b.n	800973e <UART_SetConfig+0x27e>
 8009730:	2310      	movs	r3, #16
 8009732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009736:	e002      	b.n	800973e <UART_SetConfig+0x27e>
 8009738:	2310      	movs	r3, #16
 800973a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a17      	ldr	r2, [pc, #92]	@ (80097a0 <UART_SetConfig+0x2e0>)
 8009744:	4293      	cmp	r3, r2
 8009746:	f040 80a8 	bne.w	800989a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800974a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800974e:	2b08      	cmp	r3, #8
 8009750:	d834      	bhi.n	80097bc <UART_SetConfig+0x2fc>
 8009752:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <UART_SetConfig+0x298>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	0800977d 	.word	0x0800977d
 800975c:	080097bd 	.word	0x080097bd
 8009760:	08009785 	.word	0x08009785
 8009764:	080097bd 	.word	0x080097bd
 8009768:	0800978b 	.word	0x0800978b
 800976c:	080097bd 	.word	0x080097bd
 8009770:	080097bd 	.word	0x080097bd
 8009774:	080097bd 	.word	0x080097bd
 8009778:	08009793 	.word	0x08009793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800977c:	f7fd f86e 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8009780:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009782:	e021      	b.n	80097c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009784:	4b0c      	ldr	r3, [pc, #48]	@ (80097b8 <UART_SetConfig+0x2f8>)
 8009786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009788:	e01e      	b.n	80097c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800978a:	f7fc fff9 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 800978e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009790:	e01a      	b.n	80097c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009798:	e016      	b.n	80097c8 <UART_SetConfig+0x308>
 800979a:	bf00      	nop
 800979c:	cfff69f3 	.word	0xcfff69f3
 80097a0:	40008000 	.word	0x40008000
 80097a4:	40013800 	.word	0x40013800
 80097a8:	40021000 	.word	0x40021000
 80097ac:	40004400 	.word	0x40004400
 80097b0:	40004800 	.word	0x40004800
 80097b4:	40004c00 	.word	0x40004c00
 80097b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 812a 	beq.w	8009a24 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d4:	4a9e      	ldr	r2, [pc, #632]	@ (8009a50 <UART_SetConfig+0x590>)
 80097d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097da:	461a      	mov	r2, r3
 80097dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097de:	fbb3 f3f2 	udiv	r3, r3, r2
 80097e2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	4613      	mov	r3, r2
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	4413      	add	r3, r2
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d305      	bcc.n	8009800 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d903      	bls.n	8009808 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009806:	e10d      	b.n	8009a24 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980a:	2200      	movs	r2, #0
 800980c:	60bb      	str	r3, [r7, #8]
 800980e:	60fa      	str	r2, [r7, #12]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009814:	4a8e      	ldr	r2, [pc, #568]	@ (8009a50 <UART_SetConfig+0x590>)
 8009816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800981a:	b29b      	uxth	r3, r3
 800981c:	2200      	movs	r2, #0
 800981e:	603b      	str	r3, [r7, #0]
 8009820:	607a      	str	r2, [r7, #4]
 8009822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800982a:	f7f7 f99b 	bl	8000b64 <__aeabi_uldivmod>
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4610      	mov	r0, r2
 8009834:	4619      	mov	r1, r3
 8009836:	f04f 0200 	mov.w	r2, #0
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	020b      	lsls	r3, r1, #8
 8009840:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009844:	0202      	lsls	r2, r0, #8
 8009846:	6979      	ldr	r1, [r7, #20]
 8009848:	6849      	ldr	r1, [r1, #4]
 800984a:	0849      	lsrs	r1, r1, #1
 800984c:	2000      	movs	r0, #0
 800984e:	460c      	mov	r4, r1
 8009850:	4605      	mov	r5, r0
 8009852:	eb12 0804 	adds.w	r8, r2, r4
 8009856:	eb43 0905 	adc.w	r9, r3, r5
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	469a      	mov	sl, r3
 8009862:	4693      	mov	fp, r2
 8009864:	4652      	mov	r2, sl
 8009866:	465b      	mov	r3, fp
 8009868:	4640      	mov	r0, r8
 800986a:	4649      	mov	r1, r9
 800986c:	f7f7 f97a 	bl	8000b64 <__aeabi_uldivmod>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4613      	mov	r3, r2
 8009876:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800987e:	d308      	bcc.n	8009892 <UART_SetConfig+0x3d2>
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009886:	d204      	bcs.n	8009892 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6a3a      	ldr	r2, [r7, #32]
 800988e:	60da      	str	r2, [r3, #12]
 8009890:	e0c8      	b.n	8009a24 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009898:	e0c4      	b.n	8009a24 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098a2:	d167      	bne.n	8009974 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80098a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d828      	bhi.n	80098fe <UART_SetConfig+0x43e>
 80098ac:	a201      	add	r2, pc, #4	@ (adr r2, 80098b4 <UART_SetConfig+0x3f4>)
 80098ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080098d9 	.word	0x080098d9
 80098b8:	080098e1 	.word	0x080098e1
 80098bc:	080098e9 	.word	0x080098e9
 80098c0:	080098ff 	.word	0x080098ff
 80098c4:	080098ef 	.word	0x080098ef
 80098c8:	080098ff 	.word	0x080098ff
 80098cc:	080098ff 	.word	0x080098ff
 80098d0:	080098ff 	.word	0x080098ff
 80098d4:	080098f7 	.word	0x080098f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d8:	f7fc ffc0 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80098dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098de:	e014      	b.n	800990a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098e0:	f7fc ffd2 	bl	8006888 <HAL_RCC_GetPCLK2Freq>
 80098e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098e6:	e010      	b.n	800990a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a54 <UART_SetConfig+0x594>)
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098ec:	e00d      	b.n	800990a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098ee:	f7fc ff47 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 80098f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098f4:	e009      	b.n	800990a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098fc:	e005      	b.n	800990a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8089 	beq.w	8009a24 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009916:	4a4e      	ldr	r2, [pc, #312]	@ (8009a50 <UART_SetConfig+0x590>)
 8009918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800991c:	461a      	mov	r2, r3
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	fbb3 f3f2 	udiv	r3, r3, r2
 8009924:	005a      	lsls	r2, r3, #1
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	085b      	lsrs	r3, r3, #1
 800992c:	441a      	add	r2, r3
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	fbb2 f3f3 	udiv	r3, r2, r3
 8009936:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	2b0f      	cmp	r3, #15
 800993c:	d916      	bls.n	800996c <UART_SetConfig+0x4ac>
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009944:	d212      	bcs.n	800996c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	b29b      	uxth	r3, r3
 800994a:	f023 030f 	bic.w	r3, r3, #15
 800994e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	085b      	lsrs	r3, r3, #1
 8009954:	b29b      	uxth	r3, r3
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	b29a      	uxth	r2, r3
 800995c:	8bfb      	ldrh	r3, [r7, #30]
 800995e:	4313      	orrs	r3, r2
 8009960:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	8bfa      	ldrh	r2, [r7, #30]
 8009968:	60da      	str	r2, [r3, #12]
 800996a:	e05b      	b.n	8009a24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009972:	e057      	b.n	8009a24 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009974:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009978:	2b08      	cmp	r3, #8
 800997a:	d828      	bhi.n	80099ce <UART_SetConfig+0x50e>
 800997c:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <UART_SetConfig+0x4c4>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	080099cf 	.word	0x080099cf
 8009994:	080099bf 	.word	0x080099bf
 8009998:	080099cf 	.word	0x080099cf
 800999c:	080099cf 	.word	0x080099cf
 80099a0:	080099cf 	.word	0x080099cf
 80099a4:	080099c7 	.word	0x080099c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099a8:	f7fc ff58 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80099ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099ae:	e014      	b.n	80099da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099b0:	f7fc ff6a 	bl	8006888 <HAL_RCC_GetPCLK2Freq>
 80099b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099b6:	e010      	b.n	80099da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099b8:	4b26      	ldr	r3, [pc, #152]	@ (8009a54 <UART_SetConfig+0x594>)
 80099ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099bc:	e00d      	b.n	80099da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099be:	f7fc fedf 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 80099c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099c4:	e009      	b.n	80099da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099cc:	e005      	b.n	80099da <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099d8:	bf00      	nop
    }

    if (pclk != 0U)
 80099da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d021      	beq.n	8009a24 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009a50 <UART_SetConfig+0x590>)
 80099e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ea:	461a      	mov	r2, r3
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	085b      	lsrs	r3, r3, #1
 80099f8:	441a      	add	r2, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	2b0f      	cmp	r3, #15
 8009a08:	d909      	bls.n	8009a1e <UART_SetConfig+0x55e>
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a10:	d205      	bcs.n	8009a1e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60da      	str	r2, [r3, #12]
 8009a1c:	e002      	b.n	8009a24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2200      	movs	r2, #0
 8009a38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3730      	adds	r7, #48	@ 0x30
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a4e:	bf00      	nop
 8009a50:	0800a87c 	.word	0x0800a87c
 8009a54:	00f42400 	.word	0x00f42400

08009a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	f003 0310 	and.w	r3, r3, #16
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0e:	f003 0320 	and.w	r3, r3, #32
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01a      	beq.n	8009b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b56:	d10a      	bne.n	8009b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	605a      	str	r2, [r3, #4]
  }
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b098      	sub	sp, #96	@ 0x60
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bac:	f7f9 fd26 	bl	80035fc <HAL_GetTick>
 8009bb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0308 	and.w	r3, r3, #8
 8009bbc:	2b08      	cmp	r3, #8
 8009bbe:	d12f      	bne.n	8009c20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f88e 	bl	8009cf0 <UART_WaitOnFlagUntilTimeout>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d022      	beq.n	8009c20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c00:	e841 2300 	strex	r3, r2, [r1]
 8009c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e6      	bne.n	8009bda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e063      	b.n	8009ce8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0304 	and.w	r3, r3, #4
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d149      	bne.n	8009cc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c36:	2200      	movs	r2, #0
 8009c38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f857 	bl	8009cf0 <UART_WaitOnFlagUntilTimeout>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d03c      	beq.n	8009cc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	623b      	str	r3, [r7, #32]
   return(result);
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e6      	bne.n	8009c48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f023 0301 	bic.w	r3, r3, #1
 8009c90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3308      	adds	r3, #8
 8009c98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c9a:	61fa      	str	r2, [r7, #28]
 8009c9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	69b9      	ldr	r1, [r7, #24]
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e5      	bne.n	8009c7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e012      	b.n	8009ce8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3758      	adds	r7, #88	@ 0x58
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d00:	e04f      	b.n	8009da2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d04b      	beq.n	8009da2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d0a:	f7f9 fc77 	bl	80035fc <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	69ba      	ldr	r2, [r7, #24]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d302      	bcc.n	8009d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e04e      	b.n	8009dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0304 	and.w	r3, r3, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d037      	beq.n	8009da2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b80      	cmp	r3, #128	@ 0x80
 8009d36:	d034      	beq.n	8009da2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2b40      	cmp	r3, #64	@ 0x40
 8009d3c:	d031      	beq.n	8009da2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d110      	bne.n	8009d6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2208      	movs	r2, #8
 8009d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f879 	bl	8009e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2208      	movs	r2, #8
 8009d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e029      	b.n	8009dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d7c:	d111      	bne.n	8009da2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f85f 	bl	8009e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e00f      	b.n	8009dc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69da      	ldr	r2, [r3, #28]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	4013      	ands	r3, r2
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	bf0c      	ite	eq
 8009db2:	2301      	moveq	r3, #1
 8009db4:	2300      	movne	r3, #0
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	79fb      	ldrb	r3, [r7, #7]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d0a0      	beq.n	8009d02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b08f      	sub	sp, #60	@ 0x3c
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	e853 3f00 	ldrex	r3, [r3]
 8009dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009df2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009df8:	e841 2300 	strex	r3, r2, [r1]
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e6      	bne.n	8009dd2 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e24:	61ba      	str	r2, [r7, #24]
 8009e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	6979      	ldr	r1, [r7, #20]
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	613b      	str	r3, [r7, #16]
   return(result);
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e5      	bne.n	8009e04 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009e40:	bf00      	nop
 8009e42:	373c      	adds	r7, #60	@ 0x3c
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b095      	sub	sp, #84	@ 0x54
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e72:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e6      	bne.n	8009e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e3      	bne.n	8009e86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d118      	bne.n	8009ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f023 0310 	bic.w	r3, r3, #16
 8009eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6979      	ldr	r1, [r7, #20]
 8009eea:	69ba      	ldr	r2, [r7, #24]
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e6      	bne.n	8009ec6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009f0c:	bf00      	nop
 8009f0e:	3754      	adds	r7, #84	@ 0x54
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b090      	sub	sp, #64	@ 0x40
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f24:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d137      	bne.n	8009fa4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3308      	adds	r3, #8
 8009f42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f46:	e853 3f00 	ldrex	r3, [r3]
 8009f4a:	623b      	str	r3, [r7, #32]
   return(result);
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e5      	bne.n	8009f3c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8e:	61fb      	str	r3, [r7, #28]
 8009f90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f92:	69b9      	ldr	r1, [r7, #24]
 8009f94:	69fa      	ldr	r2, [r7, #28]
 8009f96:	e841 2300 	strex	r3, r2, [r1]
 8009f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1e6      	bne.n	8009f70 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fa2:	e002      	b.n	8009faa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009fa4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009fa6:	f7ff fa61 	bl	800946c <HAL_UART_TxCpltCallback>
}
 8009faa:	bf00      	nop
 8009fac:	3740      	adds	r7, #64	@ 0x40
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f7ff fa5d 	bl	8009480 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fc6:	bf00      	nop
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fda:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fe2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ff6:	2b80      	cmp	r3, #128	@ 0x80
 8009ff8:	d109      	bne.n	800a00e <UART_DMAError+0x40>
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	2b21      	cmp	r3, #33	@ 0x21
 8009ffe:	d106      	bne.n	800a00e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a008:	6978      	ldr	r0, [r7, #20]
 800a00a:	f7ff fede 	bl	8009dca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a018:	2b40      	cmp	r3, #64	@ 0x40
 800a01a:	d109      	bne.n	800a030 <UART_DMAError+0x62>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b22      	cmp	r3, #34	@ 0x22
 800a020:	d106      	bne.n	800a030 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a02a:	6978      	ldr	r0, [r7, #20]
 800a02c:	f7ff ff0e 	bl	8009e4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a036:	f043 0210 	orr.w	r2, r3, #16
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a040:	6978      	ldr	r0, [r7, #20]
 800a042:	f7ff fa27 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a046:	bf00      	nop
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7ff fa11 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b088      	sub	sp, #32
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	e853 3f00 	ldrex	r3, [r3]
 800a08e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a096:	61fb      	str	r3, [r7, #28]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	61bb      	str	r3, [r7, #24]
 800a0a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	6979      	ldr	r1, [r7, #20]
 800a0a6:	69ba      	ldr	r2, [r7, #24]
 800a0a8:	e841 2300 	strex	r3, r2, [r1]
 800a0ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e6      	bne.n	800a082 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff f9d2 	bl	800946c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0c8:	bf00      	nop
 800a0ca:	3720      	adds	r7, #32
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_UARTEx_DisableFifoMode+0x16>
 800a11e:	2302      	movs	r3, #2
 800a120:	e027      	b.n	800a172 <HAL_UARTEx_DisableFifoMode+0x66>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2224      	movs	r2, #36	@ 0x24
 800a12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 0201 	bic.w	r2, r2, #1
 800a148:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a150:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2220      	movs	r2, #32
 800a164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a192:	2302      	movs	r3, #2
 800a194:	e02d      	b.n	800a1f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2224      	movs	r2, #36	@ 0x24
 800a1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f022 0201 	bic.w	r2, r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f850 	bl	800a278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b084      	sub	sp, #16
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a20e:	2302      	movs	r3, #2
 800a210:	e02d      	b.n	800a26e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2224      	movs	r2, #36	@ 0x24
 800a21e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 0201 	bic.w	r2, r2, #1
 800a238:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f812 	bl	800a278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2220      	movs	r2, #32
 800a260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a284:	2b00      	cmp	r3, #0
 800a286:	d108      	bne.n	800a29a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a298:	e031      	b.n	800a2fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a29a:	2308      	movs	r3, #8
 800a29c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a29e:	2308      	movs	r3, #8
 800a2a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	0e5b      	lsrs	r3, r3, #25
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	f003 0307 	and.w	r3, r3, #7
 800a2b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	0f5b      	lsrs	r3, r3, #29
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	f003 0307 	and.w	r3, r3, #7
 800a2c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2c2:	7bbb      	ldrb	r3, [r7, #14]
 800a2c4:	7b3a      	ldrb	r2, [r7, #12]
 800a2c6:	4911      	ldr	r1, [pc, #68]	@ (800a30c <UARTEx_SetNbDataToProcess+0x94>)
 800a2c8:	5c8a      	ldrb	r2, [r1, r2]
 800a2ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2ce:	7b3a      	ldrb	r2, [r7, #12]
 800a2d0:	490f      	ldr	r1, [pc, #60]	@ (800a310 <UARTEx_SetNbDataToProcess+0x98>)
 800a2d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	7b7a      	ldrb	r2, [r7, #13]
 800a2e4:	4909      	ldr	r1, [pc, #36]	@ (800a30c <UARTEx_SetNbDataToProcess+0x94>)
 800a2e6:	5c8a      	ldrb	r2, [r1, r2]
 800a2e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2ec:	7b7a      	ldrb	r2, [r7, #13]
 800a2ee:	4908      	ldr	r1, [pc, #32]	@ (800a310 <UARTEx_SetNbDataToProcess+0x98>)
 800a2f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2fe:	bf00      	nop
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	0800a894 	.word	0x0800a894
 800a310:	0800a89c 	.word	0x0800a89c

0800a314 <memset>:
 800a314:	4402      	add	r2, r0
 800a316:	4603      	mov	r3, r0
 800a318:	4293      	cmp	r3, r2
 800a31a:	d100      	bne.n	800a31e <memset+0xa>
 800a31c:	4770      	bx	lr
 800a31e:	f803 1b01 	strb.w	r1, [r3], #1
 800a322:	e7f9      	b.n	800a318 <memset+0x4>

0800a324 <__errno>:
 800a324:	4b01      	ldr	r3, [pc, #4]	@ (800a32c <__errno+0x8>)
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	2000000c 	.word	0x2000000c

0800a330 <__libc_init_array>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	4d0d      	ldr	r5, [pc, #52]	@ (800a368 <__libc_init_array+0x38>)
 800a334:	4c0d      	ldr	r4, [pc, #52]	@ (800a36c <__libc_init_array+0x3c>)
 800a336:	1b64      	subs	r4, r4, r5
 800a338:	10a4      	asrs	r4, r4, #2
 800a33a:	2600      	movs	r6, #0
 800a33c:	42a6      	cmp	r6, r4
 800a33e:	d109      	bne.n	800a354 <__libc_init_array+0x24>
 800a340:	4d0b      	ldr	r5, [pc, #44]	@ (800a370 <__libc_init_array+0x40>)
 800a342:	4c0c      	ldr	r4, [pc, #48]	@ (800a374 <__libc_init_array+0x44>)
 800a344:	f000 fa7a 	bl	800a83c <_init>
 800a348:	1b64      	subs	r4, r4, r5
 800a34a:	10a4      	asrs	r4, r4, #2
 800a34c:	2600      	movs	r6, #0
 800a34e:	42a6      	cmp	r6, r4
 800a350:	d105      	bne.n	800a35e <__libc_init_array+0x2e>
 800a352:	bd70      	pop	{r4, r5, r6, pc}
 800a354:	f855 3b04 	ldr.w	r3, [r5], #4
 800a358:	4798      	blx	r3
 800a35a:	3601      	adds	r6, #1
 800a35c:	e7ee      	b.n	800a33c <__libc_init_array+0xc>
 800a35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a362:	4798      	blx	r3
 800a364:	3601      	adds	r6, #1
 800a366:	e7f2      	b.n	800a34e <__libc_init_array+0x1e>
 800a368:	0800a8b4 	.word	0x0800a8b4
 800a36c:	0800a8b4 	.word	0x0800a8b4
 800a370:	0800a8b4 	.word	0x0800a8b4
 800a374:	0800a8b8 	.word	0x0800a8b8

0800a378 <ldexp>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	ed2d 8b02 	vpush	{d8}
 800a37e:	eeb0 8a40 	vmov.f32	s16, s0
 800a382:	eef0 8a60 	vmov.f32	s17, s1
 800a386:	4604      	mov	r4, r0
 800a388:	f000 f90e 	bl	800a5a8 <finite>
 800a38c:	b1f8      	cbz	r0, 800a3ce <ldexp+0x56>
 800a38e:	ec51 0b18 	vmov	r0, r1, d8
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	f7f6 fb63 	bl	8000a60 <__aeabi_dcmpeq>
 800a39a:	b9c0      	cbnz	r0, 800a3ce <ldexp+0x56>
 800a39c:	eeb0 0a48 	vmov.f32	s0, s16
 800a3a0:	eef0 0a68 	vmov.f32	s1, s17
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 f81b 	bl	800a3e0 <scalbn>
 800a3aa:	eeb0 8a40 	vmov.f32	s16, s0
 800a3ae:	eef0 8a60 	vmov.f32	s17, s1
 800a3b2:	f000 f8f9 	bl	800a5a8 <finite>
 800a3b6:	b130      	cbz	r0, 800a3c6 <ldexp+0x4e>
 800a3b8:	ec51 0b18 	vmov	r0, r1, d8
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f7f6 fb4e 	bl	8000a60 <__aeabi_dcmpeq>
 800a3c4:	b118      	cbz	r0, 800a3ce <ldexp+0x56>
 800a3c6:	f7ff ffad 	bl	800a324 <__errno>
 800a3ca:	2322      	movs	r3, #34	@ 0x22
 800a3cc:	6003      	str	r3, [r0, #0]
 800a3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800a3d2:	eef0 0a68 	vmov.f32	s1, s17
 800a3d6:	ecbd 8b02 	vpop	{d8}
 800a3da:	bd10      	pop	{r4, pc}
 800a3dc:	0000      	movs	r0, r0
	...

0800a3e0 <scalbn>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	ec55 4b10 	vmov	r4, r5, d0
 800a3e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	b991      	cbnz	r1, 800a416 <scalbn+0x36>
 800a3f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a3f4:	4323      	orrs	r3, r4
 800a3f6:	d03d      	beq.n	800a474 <scalbn+0x94>
 800a3f8:	4b35      	ldr	r3, [pc, #212]	@ (800a4d0 <scalbn+0xf0>)
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	2200      	movs	r2, #0
 800a400:	f7f6 f8c6 	bl	8000590 <__aeabi_dmul>
 800a404:	4b33      	ldr	r3, [pc, #204]	@ (800a4d4 <scalbn+0xf4>)
 800a406:	429e      	cmp	r6, r3
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	da0f      	bge.n	800a42e <scalbn+0x4e>
 800a40e:	a328      	add	r3, pc, #160	@ (adr r3, 800a4b0 <scalbn+0xd0>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	e01e      	b.n	800a454 <scalbn+0x74>
 800a416:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a41a:	4291      	cmp	r1, r2
 800a41c:	d10b      	bne.n	800a436 <scalbn+0x56>
 800a41e:	4622      	mov	r2, r4
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f7f5 fefe 	bl	8000224 <__adddf3>
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	e022      	b.n	800a474 <scalbn+0x94>
 800a42e:	460b      	mov	r3, r1
 800a430:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a434:	3936      	subs	r1, #54	@ 0x36
 800a436:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a43a:	4296      	cmp	r6, r2
 800a43c:	dd0d      	ble.n	800a45a <scalbn+0x7a>
 800a43e:	2d00      	cmp	r5, #0
 800a440:	a11d      	add	r1, pc, #116	@ (adr r1, 800a4b8 <scalbn+0xd8>)
 800a442:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a446:	da02      	bge.n	800a44e <scalbn+0x6e>
 800a448:	a11d      	add	r1, pc, #116	@ (adr r1, 800a4c0 <scalbn+0xe0>)
 800a44a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44e:	a31a      	add	r3, pc, #104	@ (adr r3, 800a4b8 <scalbn+0xd8>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f7f6 f89c 	bl	8000590 <__aeabi_dmul>
 800a458:	e7e6      	b.n	800a428 <scalbn+0x48>
 800a45a:	1872      	adds	r2, r6, r1
 800a45c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a460:	428a      	cmp	r2, r1
 800a462:	dcec      	bgt.n	800a43e <scalbn+0x5e>
 800a464:	2a00      	cmp	r2, #0
 800a466:	dd08      	ble.n	800a47a <scalbn+0x9a>
 800a468:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a46c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a470:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a474:	ec45 4b10 	vmov	d0, r4, r5
 800a478:	bd70      	pop	{r4, r5, r6, pc}
 800a47a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a47e:	da08      	bge.n	800a492 <scalbn+0xb2>
 800a480:	2d00      	cmp	r5, #0
 800a482:	a10b      	add	r1, pc, #44	@ (adr r1, 800a4b0 <scalbn+0xd0>)
 800a484:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a488:	dac1      	bge.n	800a40e <scalbn+0x2e>
 800a48a:	a10f      	add	r1, pc, #60	@ (adr r1, 800a4c8 <scalbn+0xe8>)
 800a48c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a490:	e7bd      	b.n	800a40e <scalbn+0x2e>
 800a492:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a496:	3236      	adds	r2, #54	@ 0x36
 800a498:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a49c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d8 <scalbn+0xf8>)
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	e7d4      	b.n	800a454 <scalbn+0x74>
 800a4aa:	bf00      	nop
 800a4ac:	f3af 8000 	nop.w
 800a4b0:	c2f8f359 	.word	0xc2f8f359
 800a4b4:	01a56e1f 	.word	0x01a56e1f
 800a4b8:	8800759c 	.word	0x8800759c
 800a4bc:	7e37e43c 	.word	0x7e37e43c
 800a4c0:	8800759c 	.word	0x8800759c
 800a4c4:	fe37e43c 	.word	0xfe37e43c
 800a4c8:	c2f8f359 	.word	0xc2f8f359
 800a4cc:	81a56e1f 	.word	0x81a56e1f
 800a4d0:	43500000 	.word	0x43500000
 800a4d4:	ffff3cb0 	.word	0xffff3cb0
 800a4d8:	3c900000 	.word	0x3c900000

0800a4dc <scalbnf>:
 800a4dc:	ee10 3a10 	vmov	r3, s0
 800a4e0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a4e4:	d02b      	beq.n	800a53e <scalbnf+0x62>
 800a4e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a4ea:	d302      	bcc.n	800a4f2 <scalbnf+0x16>
 800a4ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a4f0:	4770      	bx	lr
 800a4f2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a4f6:	d123      	bne.n	800a540 <scalbnf+0x64>
 800a4f8:	4b24      	ldr	r3, [pc, #144]	@ (800a58c <scalbnf+0xb0>)
 800a4fa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a590 <scalbnf+0xb4>
 800a4fe:	4298      	cmp	r0, r3
 800a500:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a504:	db17      	blt.n	800a536 <scalbnf+0x5a>
 800a506:	ee10 3a10 	vmov	r3, s0
 800a50a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a50e:	3a19      	subs	r2, #25
 800a510:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a514:	4288      	cmp	r0, r1
 800a516:	dd15      	ble.n	800a544 <scalbnf+0x68>
 800a518:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a594 <scalbnf+0xb8>
 800a51c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a598 <scalbnf+0xbc>
 800a520:	ee10 3a10 	vmov	r3, s0
 800a524:	eeb0 7a67 	vmov.f32	s14, s15
 800a528:	2b00      	cmp	r3, #0
 800a52a:	bfb8      	it	lt
 800a52c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a530:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a534:	4770      	bx	lr
 800a536:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a59c <scalbnf+0xc0>
 800a53a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a53e:	4770      	bx	lr
 800a540:	0dd2      	lsrs	r2, r2, #23
 800a542:	e7e5      	b.n	800a510 <scalbnf+0x34>
 800a544:	4410      	add	r0, r2
 800a546:	28fe      	cmp	r0, #254	@ 0xfe
 800a548:	dce6      	bgt.n	800a518 <scalbnf+0x3c>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	dd06      	ble.n	800a55c <scalbnf+0x80>
 800a54e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a552:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a556:	ee00 3a10 	vmov	s0, r3
 800a55a:	4770      	bx	lr
 800a55c:	f110 0f16 	cmn.w	r0, #22
 800a560:	da09      	bge.n	800a576 <scalbnf+0x9a>
 800a562:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a59c <scalbnf+0xc0>
 800a566:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a5a0 <scalbnf+0xc4>
 800a56a:	ee10 3a10 	vmov	r3, s0
 800a56e:	eeb0 7a67 	vmov.f32	s14, s15
 800a572:	2b00      	cmp	r3, #0
 800a574:	e7d9      	b.n	800a52a <scalbnf+0x4e>
 800a576:	3019      	adds	r0, #25
 800a578:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a57c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a580:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a5a4 <scalbnf+0xc8>
 800a584:	ee07 3a90 	vmov	s15, r3
 800a588:	e7d7      	b.n	800a53a <scalbnf+0x5e>
 800a58a:	bf00      	nop
 800a58c:	ffff3cb0 	.word	0xffff3cb0
 800a590:	4c000000 	.word	0x4c000000
 800a594:	7149f2ca 	.word	0x7149f2ca
 800a598:	f149f2ca 	.word	0xf149f2ca
 800a59c:	0da24260 	.word	0x0da24260
 800a5a0:	8da24260 	.word	0x8da24260
 800a5a4:	33000000 	.word	0x33000000

0800a5a8 <finite>:
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	ed8d 0b00 	vstr	d0, [sp]
 800a5ae:	9801      	ldr	r0, [sp, #4]
 800a5b0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a5b4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a5b8:	0fc0      	lsrs	r0, r0, #31
 800a5ba:	b002      	add	sp, #8
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <fmodf>:
 800a5c0:	b508      	push	{r3, lr}
 800a5c2:	ed2d 8b02 	vpush	{d8}
 800a5c6:	eef0 8a40 	vmov.f32	s17, s0
 800a5ca:	eeb0 8a60 	vmov.f32	s16, s1
 800a5ce:	f000 f8b3 	bl	800a738 <__ieee754_fmodf>
 800a5d2:	eef4 8a48 	vcmp.f32	s17, s16
 800a5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5da:	d60c      	bvs.n	800a5f6 <fmodf+0x36>
 800a5dc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a5fc <fmodf+0x3c>
 800a5e0:	eeb4 8a68 	vcmp.f32	s16, s17
 800a5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e8:	d105      	bne.n	800a5f6 <fmodf+0x36>
 800a5ea:	f7ff fe9b 	bl	800a324 <__errno>
 800a5ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a5f2:	2321      	movs	r3, #33	@ 0x21
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	ecbd 8b02 	vpop	{d8}
 800a5fa:	bd08      	pop	{r3, pc}
 800a5fc:	00000000 	.word	0x00000000

0800a600 <sqrtf>:
 800a600:	b508      	push	{r3, lr}
 800a602:	ed2d 8b02 	vpush	{d8}
 800a606:	eeb0 8a40 	vmov.f32	s16, s0
 800a60a:	f000 f86d 	bl	800a6e8 <__ieee754_sqrtf>
 800a60e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a616:	d60c      	bvs.n	800a632 <sqrtf+0x32>
 800a618:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a638 <sqrtf+0x38>
 800a61c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a624:	d505      	bpl.n	800a632 <sqrtf+0x32>
 800a626:	f7ff fe7d 	bl	800a324 <__errno>
 800a62a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a62e:	2321      	movs	r3, #33	@ 0x21
 800a630:	6003      	str	r3, [r0, #0]
 800a632:	ecbd 8b02 	vpop	{d8}
 800a636:	bd08      	pop	{r3, pc}
 800a638:	00000000 	.word	0x00000000

0800a63c <fmaxf>:
 800a63c:	b508      	push	{r3, lr}
 800a63e:	ed2d 8b02 	vpush	{d8}
 800a642:	eeb0 8a40 	vmov.f32	s16, s0
 800a646:	eef0 8a60 	vmov.f32	s17, s1
 800a64a:	f000 f831 	bl	800a6b0 <__fpclassifyf>
 800a64e:	b930      	cbnz	r0, 800a65e <fmaxf+0x22>
 800a650:	eeb0 8a68 	vmov.f32	s16, s17
 800a654:	eeb0 0a48 	vmov.f32	s0, s16
 800a658:	ecbd 8b02 	vpop	{d8}
 800a65c:	bd08      	pop	{r3, pc}
 800a65e:	eeb0 0a68 	vmov.f32	s0, s17
 800a662:	f000 f825 	bl	800a6b0 <__fpclassifyf>
 800a666:	2800      	cmp	r0, #0
 800a668:	d0f4      	beq.n	800a654 <fmaxf+0x18>
 800a66a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	dded      	ble.n	800a650 <fmaxf+0x14>
 800a674:	e7ee      	b.n	800a654 <fmaxf+0x18>

0800a676 <fminf>:
 800a676:	b508      	push	{r3, lr}
 800a678:	ed2d 8b02 	vpush	{d8}
 800a67c:	eeb0 8a40 	vmov.f32	s16, s0
 800a680:	eef0 8a60 	vmov.f32	s17, s1
 800a684:	f000 f814 	bl	800a6b0 <__fpclassifyf>
 800a688:	b930      	cbnz	r0, 800a698 <fminf+0x22>
 800a68a:	eeb0 8a68 	vmov.f32	s16, s17
 800a68e:	eeb0 0a48 	vmov.f32	s0, s16
 800a692:	ecbd 8b02 	vpop	{d8}
 800a696:	bd08      	pop	{r3, pc}
 800a698:	eeb0 0a68 	vmov.f32	s0, s17
 800a69c:	f000 f808 	bl	800a6b0 <__fpclassifyf>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d0f4      	beq.n	800a68e <fminf+0x18>
 800a6a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ac:	d5ed      	bpl.n	800a68a <fminf+0x14>
 800a6ae:	e7ee      	b.n	800a68e <fminf+0x18>

0800a6b0 <__fpclassifyf>:
 800a6b0:	ee10 3a10 	vmov	r3, s0
 800a6b4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a6b8:	d00d      	beq.n	800a6d6 <__fpclassifyf+0x26>
 800a6ba:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a6be:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a6c2:	d30a      	bcc.n	800a6da <__fpclassifyf+0x2a>
 800a6c4:	4b07      	ldr	r3, [pc, #28]	@ (800a6e4 <__fpclassifyf+0x34>)
 800a6c6:	1e42      	subs	r2, r0, #1
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d908      	bls.n	800a6de <__fpclassifyf+0x2e>
 800a6cc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a6d0:	4258      	negs	r0, r3
 800a6d2:	4158      	adcs	r0, r3
 800a6d4:	4770      	bx	lr
 800a6d6:	2002      	movs	r0, #2
 800a6d8:	4770      	bx	lr
 800a6da:	2004      	movs	r0, #4
 800a6dc:	4770      	bx	lr
 800a6de:	2003      	movs	r0, #3
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	007ffffe 	.word	0x007ffffe

0800a6e8 <__ieee754_sqrtf>:
 800a6e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <roundf>:
 800a6f0:	ee10 0a10 	vmov	r0, s0
 800a6f4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a6f8:	3a7f      	subs	r2, #127	@ 0x7f
 800a6fa:	2a16      	cmp	r2, #22
 800a6fc:	dc15      	bgt.n	800a72a <roundf+0x3a>
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	da08      	bge.n	800a714 <roundf+0x24>
 800a702:	3201      	adds	r2, #1
 800a704:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800a708:	d101      	bne.n	800a70e <roundf+0x1e>
 800a70a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800a70e:	ee00 3a10 	vmov	s0, r3
 800a712:	4770      	bx	lr
 800a714:	4907      	ldr	r1, [pc, #28]	@ (800a734 <roundf+0x44>)
 800a716:	4111      	asrs	r1, r2
 800a718:	4201      	tst	r1, r0
 800a71a:	d0fa      	beq.n	800a712 <roundf+0x22>
 800a71c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a720:	4113      	asrs	r3, r2
 800a722:	4403      	add	r3, r0
 800a724:	ea23 0301 	bic.w	r3, r3, r1
 800a728:	e7f1      	b.n	800a70e <roundf+0x1e>
 800a72a:	2a80      	cmp	r2, #128	@ 0x80
 800a72c:	d1f1      	bne.n	800a712 <roundf+0x22>
 800a72e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a732:	4770      	bx	lr
 800a734:	007fffff 	.word	0x007fffff

0800a738 <__ieee754_fmodf>:
 800a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73a:	ee10 5a90 	vmov	r5, s1
 800a73e:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800a742:	1e43      	subs	r3, r0, #1
 800a744:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a748:	d206      	bcs.n	800a758 <__ieee754_fmodf+0x20>
 800a74a:	ee10 3a10 	vmov	r3, s0
 800a74e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800a752:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800a756:	d304      	bcc.n	800a762 <__ieee754_fmodf+0x2a>
 800a758:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a75c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a762:	4286      	cmp	r6, r0
 800a764:	dbfc      	blt.n	800a760 <__ieee754_fmodf+0x28>
 800a766:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800a76a:	d105      	bne.n	800a778 <__ieee754_fmodf+0x40>
 800a76c:	4b32      	ldr	r3, [pc, #200]	@ (800a838 <__ieee754_fmodf+0x100>)
 800a76e:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800a772:	ed93 0a00 	vldr	s0, [r3]
 800a776:	e7f3      	b.n	800a760 <__ieee754_fmodf+0x28>
 800a778:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a77c:	d140      	bne.n	800a800 <__ieee754_fmodf+0xc8>
 800a77e:	0232      	lsls	r2, r6, #8
 800a780:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800a784:	2a00      	cmp	r2, #0
 800a786:	dc38      	bgt.n	800a7fa <__ieee754_fmodf+0xc2>
 800a788:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800a78c:	d13e      	bne.n	800a80c <__ieee754_fmodf+0xd4>
 800a78e:	0207      	lsls	r7, r0, #8
 800a790:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800a794:	2f00      	cmp	r7, #0
 800a796:	da36      	bge.n	800a806 <__ieee754_fmodf+0xce>
 800a798:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800a79c:	bfb9      	ittee	lt
 800a79e:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800a7a2:	1a5b      	sublt	r3, r3, r1
 800a7a4:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800a7a8:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800a7ac:	bfb8      	it	lt
 800a7ae:	fa06 f303 	lsllt.w	r3, r6, r3
 800a7b2:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a7b6:	bfb5      	itete	lt
 800a7b8:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800a7bc:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800a7c0:	1aad      	sublt	r5, r5, r2
 800a7c2:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800a7c6:	bfb8      	it	lt
 800a7c8:	40a8      	lsllt	r0, r5
 800a7ca:	1a89      	subs	r1, r1, r2
 800a7cc:	1a1d      	subs	r5, r3, r0
 800a7ce:	bb01      	cbnz	r1, 800a812 <__ieee754_fmodf+0xda>
 800a7d0:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800a7d4:	bf38      	it	cc
 800a7d6:	462b      	movcc	r3, r5
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d0c7      	beq.n	800a76c <__ieee754_fmodf+0x34>
 800a7dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a7e0:	db1f      	blt.n	800a822 <__ieee754_fmodf+0xea>
 800a7e2:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a7e6:	db1f      	blt.n	800a828 <__ieee754_fmodf+0xf0>
 800a7e8:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800a7ec:	327f      	adds	r2, #127	@ 0x7f
 800a7ee:	4323      	orrs	r3, r4
 800a7f0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a7f4:	ee00 3a10 	vmov	s0, r3
 800a7f8:	e7b2      	b.n	800a760 <__ieee754_fmodf+0x28>
 800a7fa:	3901      	subs	r1, #1
 800a7fc:	0052      	lsls	r2, r2, #1
 800a7fe:	e7c1      	b.n	800a784 <__ieee754_fmodf+0x4c>
 800a800:	15f1      	asrs	r1, r6, #23
 800a802:	397f      	subs	r1, #127	@ 0x7f
 800a804:	e7c0      	b.n	800a788 <__ieee754_fmodf+0x50>
 800a806:	3a01      	subs	r2, #1
 800a808:	007f      	lsls	r7, r7, #1
 800a80a:	e7c3      	b.n	800a794 <__ieee754_fmodf+0x5c>
 800a80c:	15c2      	asrs	r2, r0, #23
 800a80e:	3a7f      	subs	r2, #127	@ 0x7f
 800a810:	e7c2      	b.n	800a798 <__ieee754_fmodf+0x60>
 800a812:	2d00      	cmp	r5, #0
 800a814:	da02      	bge.n	800a81c <__ieee754_fmodf+0xe4>
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	3901      	subs	r1, #1
 800a81a:	e7d7      	b.n	800a7cc <__ieee754_fmodf+0x94>
 800a81c:	d0a6      	beq.n	800a76c <__ieee754_fmodf+0x34>
 800a81e:	006b      	lsls	r3, r5, #1
 800a820:	e7fa      	b.n	800a818 <__ieee754_fmodf+0xe0>
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	3a01      	subs	r2, #1
 800a826:	e7d9      	b.n	800a7dc <__ieee754_fmodf+0xa4>
 800a828:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800a82c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a830:	3282      	adds	r2, #130	@ 0x82
 800a832:	4113      	asrs	r3, r2
 800a834:	4323      	orrs	r3, r4
 800a836:	e7dd      	b.n	800a7f4 <__ieee754_fmodf+0xbc>
 800a838:	0800a8a4 	.word	0x0800a8a4

0800a83c <_init>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	bf00      	nop
 800a840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a842:	bc08      	pop	{r3}
 800a844:	469e      	mov	lr, r3
 800a846:	4770      	bx	lr

0800a848 <_fini>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	bf00      	nop
 800a84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84e:	bc08      	pop	{r3}
 800a850:	469e      	mov	lr, r3
 800a852:	4770      	bx	lr
